PATROL Adapter for WBEM 1.2.03


Table 1 PATROL Adapter for WBEM 1.2.03
Parameter



WBEM Application Class
There are no parameters associated with the WBEM Application Class.
WBEM_CIMOM Application Class
There are no parameters associated with the WBEM_CIMOM Application Class.
WBEM_NAMESPACE Application Class
There are no parameters associated with the WBEM_NAMESPACE Application Class.
WBEM_PROCESS Application Class
PageFaultsPerSec

Displays the number of page faults per second by the threads executing in this process. A page fault occurs when a thread refers to a virtual memory page that is not in the working set of pages in main memory (those pages recently touched by the threads in the process)..

Collector: ProcessColl
PageFileBytes

Displays the current number of bytes this process has used in the paging file.

Collector: ProcessColl
PrivTimePercent

Displays the percentage of elapsed time that this process has spent executing code in privileged mode.

Collector: ProcessColl
ProcessColl

Collects Process statistics from the Process performance objects in the Windows NT Performance Database.
ProcessorTimePercent

Displays the percentage of elapsed time the selected process used the processor to execute instructions.

Collector: ProcessColl
ThreadCount

Displays the number of threads currently active in this process.

Collector: ProcessColl
UserTimePercent

Displays the percentage of elapsed time that this process has spent executing code in user mode.

Collector: ProcessColl
WorkingSet

Displays the current number of megabytes in the working set of this process. The working set is the set of memory pages recently touched by the threads in the process.

Collector: ProcessColl
WBEM_PROVIDER Application Class
There are no parameters associated with the WBEM_PROVIDER Application Class.















PATROL for Baan Applications 1.3.05


Table 2 PATROL for Baan Applications 1.3.05
Parameter



BAAN_APP_ERRORS_FILTERED Application Class
ErrorCount

Indicates the number of errors that have occurred that match at least one search string filter.

Collector: patcol_baan
BAAN_DAEMON Application Class
DaemonStatus

Indicates the status of a Baan daemon.

Collector: patcol_baan
BAAN_DBSTATUS Application Class
DbStatus

Indicates the status of a Tbase/bisam database (proprietary Baan database, discontinued in BaanERP).

Collector: patcol_baan
BAAN_HOST_LIC Application Class
LicenseExpiryAlert

Indicates that a Baan license will expire soon.

Collector: patcol_baan
NumBshellsFound

Indicates the number of active sessions (number of bshells on local and remote hosts).

Collector: patcol_baan
NumBshellsNotFound

Indicates the number of Baan seats whose status cannot be determined (perhaps used by a host not registered in the PATROL software as a remote host).

Collector: patcol_baan
NumLicSeatsFree

Indicates the number of available seats.

Collector: patcol_baan
NumLicSeatsLocked

Indicates the number of locked seats (difference between the number of seats in use as shown by license manager, and the number of seats with corresponding bshell processes).

Collector: patcol_baan
NumLicSeatsUsed

Indicates the number of registered seats (seats identified as in use by the Baan license manager).

Collector: patcol_baan
PercLicSeatsFree

Indicates the percentage of available seats (based on NumLicSeatsFree).

Collector: patcol_baan
PercLicSeatsLocked

Indicates the percentage of locked seats (based on NumLicSeatsLocked).

Collector: patcol_baan
BAAN_JOB_MGMT Application Class
LstJobsOvertime

Lists jobs that exceeded their configured maximum duration by at least one hour during the last period.

Collector: patcol_baan
LstJobsRTError

Lists jobs that reported runtime errors during the last period.

Collector: patcol_baan
LstJobsRunning

Lists all jobs currently executing.

Note: If the job daemon dies while running a job, it may be incorrectly flagged as running.

Collector: patcol_baan
LstJobsSuccess

Lists all jobs that terminated without error during the last period.

Collector: patcol_baan
LstJobsTotal

Lists all jobs that ended during the last period.

Collector: patcol_baan
LstLateJobsInQueue

Lists jobs for which the current time exceeds the next scheduled execution start time by at least one hour.

Collector: patcol_baan
LstWaitingJobs

Lists jobs that will be waiting for at least one hour for the next scheduled execution start time.

Collector: patcol_baan
NumJobsOvertime

Indicates the number of jobs that exceeded their configured maximum duration during the last period.

Collector: patcol_baan
NumJobsRTError

Indicates the number of jobs that reported errors while executing during the last period.

Collector: patcol_baan
NumJobsRunning

Indicates the number of jobs currently executing.

Collector: patcol_baan
NumJobsSuccess

Indicates the number of jobs that terminated without error during the last period.

Collector: patcol_baan
NumJobsTotal

Indicates the total number of jobs that ended during the last period.

Collector: patcol_baan
NumLateJobsInQueue

Indicates the number of jobs for which the current time exceeds the next scheduled execution start time by at least 1 hour.

Collector: patcol_baan
NumWaitingJobs

Indicates the number of jobs that will be waiting for at least 1 hour for a next scheduled execution start time.

Collector: patcol_baan
BAAN_JOBDAEMON Application Class
DaemonStatus

Indicates whether the Baan job daemon is operating for a target Baan company.

Collector: patcol_baan
BAAN_KEY_TABLES Application Class
NumRecords

Indicates the number of records in a target key table.

Collector: patcol_baan
BAAN_LICDAEMON Application Class
DaemonStatus

Indicates whether a Baan license daemon is available.

Collector: patcol_baan
BAAN_LOGS Application Class
ListArchives

Lists log archive directories under $BSE/log.

Collector: patcol_baan
ListLogFiles

Lists nonempty log files in descending order by modification date.

Collector: patcol_baan
NumErrors

Indicates the number of errors between collection iterations.

Collector: patcol_baan
BAAN_PRINTING Application Class
LogicalQueueList

Lists the status of the device queue for type Logical Printer.

Collector: patcol_baan
LongestLogical Queue

Indicates the number of pending requests in the longest logical printer queue.

Collector: patcol_baan
LongestPrinterQueue

Indicates the number of pending requests in the longest printer queue.

Collector: patcol_baan
PrinterList

Lists the names of all available devices configured as type Printer.

Collector: patcol_baan
PrinterQueueList

Lists the status of the device queue for type Printer.

Collector: patcol_baan
BAAN_PROCESSES Application Class
LstCPUIntensive

Lists the Baan-specific operating system processes that have exceeded predetermined CPU usage thresholds.

Note: The CPU intensive threshold is defined by the Baan KM Setup => Baan System Setup menu command.

Collector: patcol_baan
LstRunawayProcesses

Lists Baan-specific operating system processes that are running independent of their parent (spawning) user session.

Note: Use this parameter to identify stray processes that may need to be killed to free resources or locks.

Collector: patcol_baan
LstTop10Processes

Lists the top 10 Baan-specific operating system processes according to CPU usage.

Note: a process can be counted as a top process even if it does not exceed the CPU intensive threshold set during configuration.

Collector: patcol_baan
NumCPUIntensive

Indicates the number of Baan-specific operating system processes that exceeded predetermined usage thresholds.

Collector: patcol_baan
NumRunawayProcesses

Indicates the number of Baan-specific operating system processes that are running independent of their parent (spawning) user session (see LstRunawayProcesses).

Collector: patcol_baan
Top10CPUProcesses

Indicates data points for the top processes over time (see LstTop10Processes).

Note: Click a data point for a listing of the top 10 operating system processes at the corresponding time. If a process is idle, it does not appear.

Collector: patcol_baan
BAAN_PTR_DAEMON Application Class
DaemonStatus

Indicates whether a Baan printer daemon is available.

Collector: patcol_baan
BAAN_SHARED_MEM Application Class
SHMAttachments

Indicates connections to shared memory segments; this does not necessarily equal the number of users.

Collector: patcol_baan
SHMInUse

Indicates shared memory currently in use.

Collector: patcol_baan
SHMPercInUse

Indicates the percentage of shared memory allocated relative to maximum configurable shared memory.

Collector: patcol_baan
SHMRTDataDictLoaded

Indicates whether the Baan objects have been loaded into shared memory.

Collector: patcol_baan
BAAN_TBASE Application Class
PercBuffers

Indicates the percentage of configured Tbase buffers in use.

Collector: patcol_baan
PercConnections

Indicates the percentage of configured connections in use.

Collector: patcol_baan
PercFiles

Indicates the percentage of configured Tbase files that are open.

Collector: patcol_baan
PercIndexes

Indicates the percentage of configured Tbase indexes that are open.

Collector: patcol_baan
PercLocks

Indicates the percentage of configured Tbase locks in use.

Collector: patcol_baan
BAAN_USERS Application Class
LstBaanUsers

Lists all users currently logged into Baan.

Collector: patcol_baan
NumBaanUsers

Indicates the number of users (including the job daemon) currently logged into Baan.

Collector: patcol_baan
NumIdleUsers

Indicates the number of idle users on the local host in a Baan system.

Collector: patcol_baan















PATROL for BEA Tuxedo 6.1.01


Table 3 PATROL for BEA Tuxedo 6.1.01
Parameter



APPS_LOG Application Class
_archiveLog

Displays results from the previous archive process; shown only for the TUXEDO user log (ULOG).
_LogDateCheck

Checks log file date and archives log if necessary.
LogEvent

Displays the number of events in the log file matching the sniff pattern since the pattern was registered for the log file; only the first occurrence of a sniff pattern in a line is counted; parameter annotation reflects the text that matched the registered pattern.
LogDiskFreeSpace 

Displays the percentage of free space on the disk where the log file is located.
LogFileSize

Displays the size of the log file (in megabytes).
LogIncreaseRate

Shows log file increase rate for each collection cycle (alarm range can be set to flag abnormally fast increases).
BEATUX_APPQ Application Class
NumDiskPage

Indicates the number of disk pages consumed.

Collector: _APPQueueAttriDisc
NumMessages

Indicates the number of messages in the queue.

Collector: _APPQueueAttriDisc
BEATUX_CLIENT Application Class
_ClntCollector

Collector parameter for client information.
NumDequeue

Indicates the number of dequeue operations.

Collector: _ClntCollector
NumEnqueue

Indicates the number of enqueue operations.

Collector: _ClntCollector
NumRequest

Indicates the number of requests.

Collector: _ClntCollector
NumTranAbt

Indicates the number of transactions aborted.

Collector: _ClntCollector
NumTranBegun

Indicates the number of transactions started.

Collector: _ClntCollector
NumTranCmt

Indicates the number of transactions committed.

Collector: _ClntCollector
BEATUX_EVENT Application Class
_checkEvent

Data collector for the BEATUX_EVENT application class.
ErrorEvent

Indicates the number of error events.

Collector: _checkEvent
InfoEvent

Indicates the number of information events.

Collector: _checkEvent
WarnEvent

Indicates the number of warn events.

Collector: _checkEvent
BEATUX_GROUP Application Class
_SrvPerfAttrDisc

Discovers run-time performance attributes of Tuxedo application servers.
_serverDisc

Discovers information about servers within a group.
GroupStatus

Indicates the status (up or down) of the group.

Collector: groupDisc
BEATUX_MACHINE Application Class
NumDequeue

Indicates the number of dequeue operations.

Collector: machineDisc
NumEnqueue

Indicates the number of enqueue operations.

Collector: machineDisc
NumEventPost

Indicates the number of event post operations.

Collector: machineDisc
NumRequests

Indicates the number of requests.

Collector: machineDisc
NumTranAbt

Indicates the number of transactions aborted.

Collector: machineDisc
NumTranCmt

Indicates the number of transaction committed.

Collector: machineDisc
NumTranInit

Indicates the number of transactions initiated.

Collector: machineDisc
NumWorkCompl

Indicates the total service load successfully dequeued and processed.

Collector: machineDisc
NumWorkInit

Indicates the total service load enqueued by clients/servers.

Collector: machineDisc
BEATUX_PROCESS Application Class (Windows NT only)
PROCProcessColl

Collects data for the BEATUX_PROCESS application class.
PROCprocPageFaultsPerSec

Indicates the number of page faults per second.

Collector: PROCProcessColl
PROCprocPageFileBytes

Indicates the number of page file bytes.

Collector: PROCProcessColl
PROCprocPrivTimePercent

Indicates the percentage of privileged time used.

Collector: PROCProcessColl
PROCprocProcessorTimePercent

Indicates the percentage of processor time used.

Collector: PROCProcessColl
PROCprocThreadCount

Indicates the process thread count.

Collector: PROCProcessColl
PROCprocUserTimePercent

Indicates the percentage of user time used.

Collector: PROCProcessColl
PROCprocWorkingSet

Indicates the working set.

Collector: PROCProcessColl
BEATUX_QSPACE Application Class
_APPQueueDisc

Discovers application queue instances within each queue space.
_APPQueueAttriDisc

Discovers data for attributes of application class.
_QspaceCollector

Collects data for the BEATUX_QSPACE application class.
DiskFreeSpace

Indicates the amount of free disk space.
MsgCapacity

Indicates the percentage of messages contained in the queue space.

Collector: _QspaceCollector
NumExistingQueue

Indicates the number of queues existing in the queue space.

Collector: _QspaceCollector
NumMessageInQueue

Indicates the number of messages in the queue space.

Collector: _QspaceCollector
NumProcessForQueue

Indicates the number of processes accessing the queue space.

Collector: _QspaceCollector
NumQueueExtents

Indicates the number of extents used by the queue space.

Collector: _QspaceCollector
NumTransactions

Indicates the number of outstanding transactions.

Collector: _QspaceCollector
QspaceFreeDiskSpace

Displays the percentage of actual free disk space in a queues allocated queue space.

Collector: _QspaceCollector
BEATUX_QUEUE Application Class
NumReqQueued

Indicates the number of requests currently enqueued.

Note: If the monitored Tuxedo system uses the MP Model, or if the Load Balance attribute for the domain is set to N, then this parameter will be inactive.

Collector: QueueAttrDisc
NumWrkQueued

Indicates the amount of work load currently enqueued.

Collector: QueueAttrDisc
QueueCapacity

Indicates the percentage of the message queue used.

Collector: QueueAttrDisc
ServerCnt

Indicates the number of active servers associated with this queue.

Collector: QueueAttrDisc
TotalReqQueued

Indicates the total requests enqueued since active.

Note: If the monitored Tuxedo system uses the MP Model, or if the Load Balance attribute for the domain is set to N, then this parameter will be inactive.

Collector: QueueAttrDisc
TotalWrkQueued

Indicates the total work load enqueued since active.

Note: If the monitored Tuxedo system uses the MP Model, or if the Load Balance attribute for the domain is set to N, then this parameter will be inactive.

Collector: QueueAttrDisc
BEATUX_SERVER Application Class
_ServiceDisc

Collector parameter discovers information about services running on the server. 
NumConversation

Indicates the number of conversations initiated.

Collector: SysSrvPerfAttrDisc
NumDequeue

Indicates the number of dequeue operations initiated.

Collector: SysSrvPerfAttrDisc
NumEnqueue

Indicates the number of enqueue operations initiated.

Collector: SysSrvPerfAttrDisc
NumReqPerHour

Indicates the number of requests per hour.

Collector: SysSrvPerfAttrDisc
NumRequest

Indicates the number of requests initiated by the server.

Collector: SysSrvPerfAttrDisc
NumTranAbt

Indicates the total number of transactions aborted.

Collector: SysSrvPerfAttrDisc
NumTranBegun

Indicates the total number of transactions begun.

Collector: SysSrvPerfAttrDisc
NumTranCmt

Indicates the total number of transactions committed.

Collector: SysSrvPerfAttrDisc
ServerStatus

Indicates whether the server is up or down.

Collector: SysSrvPerfAttrDisc
TotReqCompl

Indicates the total number of requests completed by the server.

Collector: SysSrvPerfAttrDisc
TotWorkloadCompleted

Indicates the total workload completed by the server.

Collector: SysSrvPerfAttrDisc
BEATUX_SETUP Application Class
_monitorRegisterInstance

Collects information about the Tuxedo environment during initial KM discovery cycle.
BEATUX_SYSTEM Application Class
AppQueueDisc

Discovers Tuxedo application queue information; creates and updates BEATUX_APPQ instance icons.
ClientAttrDisc

Discovers run-time attributes of Tuxedo active clients in an application (T_CLIENT).
GroupAttrDisc

Discovers run-time attributes of Tuxedo server group (T_GROUP).
groupDisc

Discovers Tuxedo group information based on group configuration; creates and updates the BEATUX_GROUP instance icons.
MachineAttrDisc

Discovers run-time attributes of a particular machine (T_MACHINE).
machineDisc

Discovers a Tuxedo instances logical machine information and system administrative server information (such as BBL, DBBL, and BRIDGE); also creates and updates BEATUX_MACHINE and BEATUX_SERVER instance icons.
MIBDiscovery

Discovers MIB attributes in TUXEDO system.
MSGAttrDisc

Discovers run-time attributes of Tuxedo system managed Unix System message queues (T_MSG).
NumActiveClients

Indicates the number of active clients.
NumServers

Indicates the current number of servers.
OthersAttrDisc

Discovers run-time attributes of the Tuxedo application queue space (T_APPQSPACE).
QSpaceDisc

Discovers Tuxedo queue space information; creates and updates the BEATUX_QSPACE instance icons.
QueueAttrDisc

Discovers run-time attributes of the Tuxedo system queue.
queueDiscovery

Discovers a Tuxedo instances queue information and creates and updates BEATUX_QUEUE instance icons.
PATCOLStatus

Indicates whether the PATROL collector is available and running. If this parameter is in alarm, restart the collector.
SysSrvCfgAttrDisc

Discovers configuration attributes of the Tuxedo system servers, such as BBL, DBBL, and BRIDGE.
SysSrvPerfAttrDisc

Discovers run-time performance attributes of the Tuxedo system servers, such as BBL, DBBL, and BRIDGE.
WSHAttrDisc

Discovers run-time attributes of the Tuxedo Workstation Handler (T_WSH).
WSHDisc

Discovers Tuxedo workstation handler information; creates and updates the BEATUX_WSH instance icons.
WSLAttrDisc

Discovers run-time attributes of Tuxedo workstation listener server (T_WSL).
BEATUX_WSH Application Class
NumBlockQ

Indicates the number of times the workstation handler was unable to enqueue a message.

Collector: WSHAttrDisc
NumRcvdMessage

Displays the number of received messages from the network from workstation clients.

Collector: WSHAttrDisc
NumRcvdMessagePerMin

Displays the number of received messages from the network from workstation clients per minute.

Collector: WSHAttrDisc
NumSentMessages

Indicates the number of messages sent by the network to the workstation clients.

Collector: WSHAttrDisc
NumSentMsgPerMin

Displays the number of sent messages from the network to workstation clients per minute.

Collector: WSHAttrDisc
TotalActiveTime

Indicates the active time since the workstation handler started.

Collector: WSHAttrDisc
TotalIdleTime

Indicates the idle time since the workstation handler started.

Collector: WSHAttrDisc
TotalRcvdBytes

Indicates the number of bytes from the network received by workstation clients.

Collector: WSHAttrDisc
TotalSentBytes

Indicates the number of kilobytes sent to the network by workstation clients.

Collector: WSHAttrDisc
BEATUX_WSL Application Class
MaxActHandler

Indicates the maximum number of currently active handles associated with a workstation listener.

Collector: WSLAttrDisc
NumCurHandler

Indicates the number of currently active handlers for this workstation listener.

Collector: WSLAttrDisc
PctHandlerUsed

Displays the percent of the workstation handler being used.

Collector: WSLAttrDisc















PATROL for BEA WebLogic 2.3.00


Table 4 PATROL for BEA WebLogic 2.3.00 when used in a WebLogic 6.1, 7.0, or 8.1 environment
Parameter



BEAWLI_INTEGRATION Application Class
_IntegAttrDisc

Internal integration server attribute collector.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).
AppEventErrCount

The number of encountered event delivery errors of the application view.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
AppSvcAsynErrCount

The error count of application view of the asynchronous service.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
AppSvcAvgElapsedTime

The average elapsed time for all services providedby the application views.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
AppSvcSynErrCount

The error count of application view of the synchronous service.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
IntegDiscovery

Internal business process object discovery.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (ful).
NumEventRowCount

The number of events in the process tracking table.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
NumTotalDeadMsg

The total number of undelivered messages for all the channels of a message broker.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
BEAWLi_PROCESS Application Class
ElapsedTime

The average time spent executing messages to this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
NumTotalExceededSLA

The total number of instances that exceeded the SLA set for this process.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
ProcessThroughput

The percentage of the number of completed process instances divided by the number of all process instances.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: _IntegAttrDisc
BEAWLP_CACHE Application Class
CacheMode

The enabled mode of this cache.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: PortalDiscovery
BEAWLP_PORTAL Application Class
PortalDiscovery

Internal collector for WebLogic portal data.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).
BEAWLS_CLUSTER Application Class
ClusteredServerStatus

stoplight icon indicating whether or not the clustered server is available.

Required Configuration is basic (full).

Collector: AttrDiscovery
BEAWLS_DBURL Application Class
AvgResponseTime

Average response time, in milliseconds, for all SQL statements with this database URL that have been executed.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
HighestInvocationCount

Number of times that the SQL statement most often requested during the previous polling cycle was invoked.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
InvocationRate

Frequency at which a database URL is called.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
LongestSQLAvgRespTime

Time (in ms) needed to run the SQL statement with the slowest average response time.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
LongestSQLTotalRespTime

Time (in ms) needed to run the SQL statement with the slowest total response time.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
TotalInvocationCount

Number of invocations of all SQL statements executed during the most recent polling cycle.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
TotalResponseTime

Total response time for all SQL statements with the monitored URL over the most recent polling cycle.

Required Configuration is inst.

Collector: _SQLRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _SQLRespColl (BEAWLS_SERVER)
BEAWLS_EJB_HOME Application Class
ActivationCount

Number of beans that need to be activated to satisfy a client request. An EJB is activated if a suitable EJB cannot be found in the cache. This parameter does not apply to stateless session EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
AvgResponseTime

Average response time during previous polling cycle, of the EJB across all methods.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
BeanAccessCount

The total number of attempts made to get a bean instance from the free pool.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
BeanDestroyedCount

The total number of times a bean instance from this pool was destroyed due to a non-application exception being thrown from it.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
BeanDestroyedRatio

The ratio of the number of beans destroyed to the total number of requests for a bean.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
BeanMissCount

The total number of times a failed attempt was made to get a bean instance from the free pool.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
BeansIdle

Number of unused beans available for assignment. This parameter does not apply to stateful session EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
BeansInUse

Number of beans currently being used. This parameter does not apply to stateful session EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
CacheAccessCount

Total number of times the cache has been accessed,whther or not the target was found. This parameter does not apply to stateless session EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
CachedBeansCurrentCount

Number of EJB instances maintained in the cache. This parameter does not apply to stateless session EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
CacheHitCount

Number of times that a target EJB sought in the cache was actually found. This parameter applies to stateless session and entity EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
CacheMissRatio

The BeanMissCount divided by the CacheAccessCount. This parameter applies to stateless session and entity EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
FreePoolMissRatio

The ratio of the number of times a request was made to get a bean from the pool when no beans were available, divided by the total number of requests for a bean for a pool.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
FreePoolTimeout

Number of beans that timed out waiting for the free pool. If this number is other than zero, it indicates that transactions failed due to insufficient beans in the free pool; you may wish to allocate additional EJBs to the pool. This parameter does not apply to stateful session beans.

Required Configuration is basic (key).

Collector: AttrDiscovery
FreePoolTimeoutRatio

The ratio of the number of requests that have timed out waiting for a bean from the pool divided by the total number of requests made.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
FreePoolWaiter

Number of beans waiting for the free pool. If this number is growing, you may wish to allocate additional EJBs to the pool (see the online Help). This parameter does not apply to stateful session EJBs.

Required Configuration is basic (key).

Collector: AttrDiscovery
InvocationCount

Number of times the EJB was invoked during the previous polling cycle (across all methods).

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
InvocationRate

Number of times per millisecond (frequency rate) that the EJB was invoked during the previous polling cycle (across all methods).

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
JMSConnectionAlive

Status of JMS connection (up or down).

Required Configuration is basic (key).

Collector: AttrDiscovery
LockEntriesCount

Number of currently locked entries.

Required Configuration is basic (key).

Collector: AttrDiscovery
LockManagerAccessCount

Number of times the lock manager was accessed.

Required Configuration is basic (full).

Collector: AttrDiscovery
LockTimeoutCount

Number of times an access to the lock manager timed out.

Required Configuration is basic (full).

Collector: AttrDiscovery
LockimeoutRatio

The LockTimeoutCount divided by the LockAccessCount.

Required Configuration is basic (key).

Collector: AttrDiscovery
LockWaiterCount

Number of beans currently waiting for service from the lock manager.

Required Configuration is basic (full).

Collector: AttrDiscovery
LockimeoutRatio

The LockWaiterCount divided by the LockAccessCount.

Required Configuration is basic (key).

Collector: AttrDiscovery
LongestEJBAvgRespTime

Longest average response time of any method executed for this specific EJB during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
LongestEJBTotalRespTime

Longest total response time of any method, during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
MostInvocationEJB

Highest invocation count for any method executed by the EJB during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
PassivationCount

Number of beans passivated since last cycle. An EJB is passivated either because the cache is full or because the bean was not accessed over a long period of time.

Required Configuration is basic (key).

Collector: AttrDiscovery
TotalResponseTime

Cumulative response time of the EJB across all methods during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
TransactionCommitRate

Rate at which transactions are committed. This is measured as number of commits per discovery cycle.

Required Configuration is basic (key).

Collector: AttrDiscovery
TransactionRollbackRate

Number of transaction rollback operations performed by this EJB per discovery cycle.

Required Configuration is basic (key).

Collector: AttrDiscovery
TransactionTimeoutRate

Number of transactions that failed per discovery cycle because they could not complete within a satisfactory time.

Required Configuration is basic (key).

Collector: AttrDiscovery
BEAWLS_EJB_METHOD Application Class
AvgResponseTime

Average response time of the method during previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
InvocationCount

Number of times the method was invoked during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
InvocationRate

Number of times per millisecond (frequency rate) that the method was invoked during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
TotalResponseTime

Cumulative response time of the method during the previous polling cycle.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
BEAWLS_EXEC_QUEUE Application Class
ExecQThroughput

Execution queue throughput. This parameter indicates the rate at which requests are processed by the WebLogic Server. (Number of requests processed during the previous polling cycle.)

Required Configuration is basic (key).

Collector: AttrDiscovery
ExecuteQueueLength

Number of requests waiting in the execution queue.

Required Configuration is basic (key).

Collector: AttrDiscovery
IdleExecThreadCount

Number of execution queues currently idle.

Required Configuration is basic (key).

Collector: AttrDiscovery
QueueLengthPercent

The percentage of current queue length divided by the maximum queue length.

Required Configuration is basic (key).

Collector: AttrDiscovery
BEAWLS_JCA Application Class
ActiveConnectionsCurrentCount

Number of active Connector connections in the JCA pool.

Required Configuration is basic (key).

Collector: AttrDiscovery
ActiveConnectionsHighCount

Highest number of active Connector connections in the JCA pool (highwater mark) since the pool was established.

Required Configuration is basic (full).

Collector: AttrDiscovery
AverageActiveUsage

Running average of connections that are active in the connection pool since it was last shrunk.

Required Configuration is basic (full).

Collector: AttrDiscovery
ConnectionIdleProfileCount

Number of idle leak connection profiles stored for this JCA pool.

Required Configuration is basic (full).

Collector: AttrDiscovery
ConnectionLeakProfileCount

Number of leak connection profiles stored for this JCA pool.

Required Configuration is basic (full).

Collector: AttrDiscovery
CreatedConnectionsTotalCount

Total number of connections created in this Connector connection pool since the pool was created.

Required Configuration is basic (full).

Collector: AttrDiscovery
DestroyedConnectionsTotalCount

Total number of connections destroyed in this Connector connection pool since the pool was created.

Required Configuration is basic (full).

Collector: AttrDiscovery
FreeConnectionsCurrentCount

Total number of currently free connections in the JCA connector pool.

Required Configuration is basic (key).

Collector: AttrDiscovery
FreeConnectionsHighCount

Highest number of currently free connections in the JCA connector pool since the pool was created (high water mark).

Required Configuration is basic (full).

Collector: AttrDiscovery
IdleConnectionsTotalCount

Total number of idle connections detected in the lifetime of this pool.

Required Configuration is basic (full).

Collector: AttrDiscovery
LeakedConnectionsTotalCount

Total number of leaked connections detected over the lifetime of this pool.

Required Configuration is basic (full).

Collector: AttrDiscovery
MatchedConnectionsTotalCount

Total number of times since the pool was created that a request for a connection was satisfied by using an existing connection from the pool.

Required Configuration is basic (full).

Collector: AttrDiscovery
RecycledTotalCount

Total number of connections recycled during the previous polling cycle.

Required Configuration is basic (full).

Collector: AttrDiscovery
RejectedConnectionsTotalCount

Total number of rejected requests for a connection since the pool was created.

Required Configuration is basic (full).

Collector: AttrDiscovery
BEAWLS_JDBC Application Class
ActiveConnections

Number of active database connections held by a JDBC pool. If this number is at or close to the maximum capacity (shown in the InfoBox), consider increasing the maximum number of connections to decrease the amount of time that requests will have to wait for a connection.

Required Configuration is basic (key).

Collector: AttrDiscovery
AvailableConnections

The number of available connections in this pool.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
ConnectionDelayTime

Average time (in milliseconds) needed to get a connection from the database connection pool.

Required Configuration is basic (full).

Collector: AttrDiscovery
ConnectionLeakProfileCount

Number of connection leak profiles. Connection leaks occur when a pool is closed without an explicit close() statement and is then scooped up during garbage collection. Use the Connection Leak Report to view a stack trace with details.

Required Configuration is basic (full).

Collector: AttrDiscovery
FailuresToReconnectCount

Number of database connections that failed to reconnect during the most recent collection cycle. Failure to reconnect may indicate that a database is down, or that configuration information must be updated.

Required Configuration is basic (key).

Collector: AttrDiscovery
LeakedConnectionsCount

Number of connections that leaked. See the online Help for details.

Required Configuration is basic (key).

Collector: AttrDiscovery
PoolState

Status of the connection pool. Available (0) or other (1), which can include a pool that is unavailable, suspended, shut down, or is in an unknown state.

Required Configuration is basic (key).

Collector: AttrDiscovery
StatementCacheHitCount

Number of statements that were found in cache.

Required Configuration is basic (full).

Collector: AttrDiscovery
StatementCacheMissCount

Number of statements that were sought in the cache, but not found.

Required Configuration is basic (full).

Collector: AttrDiscovery
StatementProfileCount

Number of SQL statements profiled. If SQL statement profiling is turned on, information such as execution time, statement text, and performance metrics, will be retained. SQL profiles can be viewed using the SQL Roundtrip report command in the JDBC application class.

Required Configuration is basic (full).

Collector: AttrDiscovery
UnavailableConnections

The number of unavailable connections in this pool.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
WaitingForConnections

Number of requests waiting for an available database connection. Connections may be waiting because all connections in the pool are in use. See the online Help for details.

Required Configuration is basic (key).

Collector: AttrDiscovery
BEAWLS_JMS Application Class
HealthStatus

The health status of the JMS service.

This parameter only supports WebLogic Server version 7.0 and higher.
Required Configuration is basic (key).

Collector: AttrDiscovery
JMSConnectionsCurrentCount

The current number of connections to this WebLogic Server.

Required Configuration is basic (key).

Collector: AttrDiscovery
JMSServersCurrentCount

The number of JMS servers that are curently deployed on this WebLogic Server instance.

Required Configuration is basic (key).

Collector: AttrDiscovery
BEAWLS_JMS_DESTINATION Application Class
BytesCurrentCount

The number of bytes currently stored in the destination. This does not include pending bytes.

Required Configuration is basic (full).

Collector: AttrDiscovery
BytesPendingCount

The number of pending bytes (bytes for pending messages) stored in the destination.

Required Configuration is basic (full).

Collector: AttrDiscovery
BytesReceivedCount

The number of bytes received in this destination since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
BytesThresholdTime

The amount of time in the threshold condition since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
ConsumersCurrentCount

The number of consumers currently accessing this destination.

Required Configuration is basic (full).

Collector: AttrDiscovery
MessagesCurrentCount

The current number of messages in the destination. This does not include pending messages.

Required Configuration is basic (full).

Collector: AttrDiscovery
MessagesPendingCount

The number of pending messages in the destination.

Required Configuration is basic (full).

Collector: AttrDiscovery
MessagesReceivedCount

The number of messages received in this destination since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
MessagesThresholdTime

The amount of time in the threshold condition since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
BEAWLS_JMSSERVER Application Class
BytesCurrentCount

Current number of bytes stored on this JMS server. This does not include pending bytes.

Required Configuration is basic (key).

Collector: AttrDiscovery
BytesHighCount

Peak number of bytes stored on this JMS server.

Required Configuration is basic (full).

Collector: AttrDiscovery
BytesPendingCount

Current number of bytes pending (unacknowledged or uncommitted) that are stored on the server.

Required Configuration is basic (key).

Collector: AttrDiscovery
BytesReceivedCount

Number of bytes received by this JMS server since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
BytesThresholdTime

Bytes threshold time.

Required Configuration is basic (full).

Collector: AttrDiscovery
DestinationsCurrentCount

Current number of destinations for this JMS server.

Required Configuration is basic (full).

Collector: AttrDiscovery
DestinationsHighCount

Peak number of destinations for this JMS server.

Required Configuration is basic (full).

Collector: AttrDiscovery
DestinationsTotalCount

Total number of destinations for this JMS server since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
HealthStatus

Health status (general condition) of the JMS server.

This parameter only supports WebLogic Server version 7.0 and higher.
Required Configuration is basic (key).

Collector: AttrDiscovery
Note about statuses:

WARN may indicate:

msg count has been above threshold for 1 hour
msg count has been above threshold for 90% of its total running time,
byte count has been above threshold for 1 hour
byte count has been above threshold for 90% of its total running time

CRITICAL may indicate:

all JMS threads have been blocked for 10 minutes
I/O(store operation) exception in last 10 minutes

FAILED indicates that the server status is unknown

OK indicates that there are no WARN, CRITICAL, or FAILED conditions
MessagesCurrentCount

Current number of messages stored on this JMS server. This does not include pending messages.

Required Configuration is basic (key).

Collector: AttrDiscovery
MessagesHighCount

Highest number of messages stored on this JMS server. This does not include pending messages.

Required Configuration is basic (full).

Collector: AttrDiscovery
MessagesPendingCount

Number of messages currently pending (unacknowledged or uncommitted) on this JMS server.

Required Configuration is basic (key).

Collector: AttrDiscovery
MessagesReceivedCount

Number of messages received by this JMS server since the last reset.

Required Configuration is basic (full).

Collector: AttrDiscovery
MessagesThresholdTime

Message threshold time.

Required Configuration is basic (full).

Collector: AttrDiscovery
SessionPoolsCurrentCount

Current number of session pools running on this JMS server.

Required Configuration is basic (full).

Collector: AttrDiscovery
SessionPoolsHighCount

Peak number of session pools running on this JMS server.

Required Configuration is basic (full).

Collector: AttrDiscovery
SessionPoolsTotalCount

Total number of session pools on this JMS server.

Required Configuration is basic (full).

Collector: AttrDiscovery
BEAWLS_JVMPROFILER Application Class
AvgGCTime

Average time spent on garbage collection during the previous polling cycle.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
CPUUsage

Total amount of CPU time used by the Java Virtual Machine.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
GCCount

Number of times that garbage collection was performed duirng the previous polling cycle.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
GCTime

Amount of CPU usage spent on garbage collection during the previous polling cycle.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
MemoryUsage

Total amount of real memory allocated by the Java Virtual Machine.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
ThreadHighestCPUTime

Highest CPU time used by one JVM thread in seconds (this parameter can be used as an indicator to look for stuck threads).

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
TotalHeapSize

Total amount of memory allocated to heap.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
TotalThreadCPU

Total CPU time used by all JVM threads.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
UsedHeapByAllThreads

Total amount of memory used by all thread objects during the previous collection cycle.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
VMemoryUsage

Total virtual memory used by the Java Virtual Machine.

Required Configuration is prof.

Collector: _JVMProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _JVMProfColl (BEAWLS_SERVER)
BEAWLS_J2EE_APPS Application Class
LongestEJBAvgRespTime

The longest EJB average response time of this application; advanced monitoring setting and byte-code instrumentation is required.

Required Configuration is inst.

Collector: _EJBRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _EJBRespColl (BEAWLS_SERVER)
LongestWebAppAvgRespTime

The longest web application average response time of this application; advanced monitoring setting and byte-code instrumentation is required.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
BEAWLS_LOCAL_MANAGED Application Class
_EJBRespColl

Collector parameter for EJB instrumentation and reporting.

Required Configuration is inst.
_JVMProfColl

Collector parameter for JVM profiling and reporting.

Required Configuration is prof.
_MethodProfColl

Collector parameter for method level profiling and reporting.

Required Configuration is meth.
_SQLRespColl

Collector parameter for SQL instrumentation and reporting.

Required Configuration is inst.
_WebAppRespColl

Collector parameter to get servlet response data.

Required Configuration is inst.
ConnectionStatus

WebLogic server client connection status, based on ping and connect commands. An alarm condition means that the Patrol collector cannot connect to the server, usually because WebLogic is not running. Restarting WebLogic will usually clear an alarm within two minutes.

Required Configuration is basic (key).

Collector: AttrDiscovery
ForeignFragmentsDropped

Number of foreign fragments dropped. A foreign fragment is one that originates in a domain or cluster using a different multicast address.

Required Configuration is basic (full).

Collector: AttrDiscovery
FragmentsReceived

Number of multicast messages received on this server from within the cluster.

Required Configuration is basic (full).

Collector: AttrDiscovery
FragmentsSent

Number of multicast messages sent from this server onto the cluster.

Required Configuration is basic (full).

Collector: AttrDiscovery
FreeHeap

Percentage of allocated JVM heap space currently available for use.

Required Configuration is basic (full).

Collector: AttrDiscovery
HealthStatus

Health status (general condition) of the managed server.

This parameter only supports WebLogic Server version 7.0 and higher.
Required Configuration is basic (key).

Collector: AttrDiscovery
HeapUsed

Percent of Java heap space in use.

Required Configuration is basic (key).

Collector: AttrDiscovery
MulticastMsgLost

Total number of incoming multicast messages onto the cluster that were lost according to the server.

Required Configuration is basic (key).

Collector: AttrDiscovery
NumOpenConnections

Number of connections to this server.

Required Configuration is basic (key).

Collector: AttrDiscovery
NumOpenSockets

Number of open sockets on the managed server.

Required Configuration is basic (key).

Collector: AttrDiscovery
ResentRequests

Number of state-change (delta) messages that were resent becaue a receiving server in the cluster missed a message.

Required Configuration is basic (key).

Collector: AttrDiscovery
BEAWLS_LOG Application Class
LogDiskFreeSpace

Percentage of free space on the disk where the log file is located.

Required Configuration is basic (full).
LogEvent

Number of events matching sniff pattern since the sniff pattern was registered for the log file. Only the first occurrence of a sniff pattern in a line is counted. Parameter annotation reflects the text that matched the registered pattern.

Required Configuration is basic (full).
LogIncreaseRate

Rate of increase in the log file size since the last collection cycle. Set the alarm range to flag abnormally fast increases in log file size.

Required Configuration is basic (full).
BEAWLS_MANAGED Application Class
ConnectionStatus

WebLogic server client connection status, based on ping and connect commands. An alarm condition means that the Patrol collector cannot connect to the server, usually because WebLogic is not running. Restarting WebLogic will usually clear an alarm within two minutes.

Required Configuration is basic (full).

Collector: AttrDiscovery
ForeignFragmentsDropped

Number of foreign fragments dropped. A foreign fragment is one that originates in a domain or cluster using a different multicast address.

Required Configuration is basic (full).

Collector: AttrDiscovery
FragmentsReceived

Number of multicast messages received on this server from within the cluster.

Required Configuration is basic (full).

Collector: AttrDiscovery
FragmentsSent

Number of multicast messages sent from this server onto the cluster.

Required Configuration is basic (full).

Collector: AttrDiscovery
FreeHeap

Percentage of allocated JVM heap space currently available for use.

Required Configuration is basic (full).

Collector: AttrDiscovery
HealthStatus

Health status (general condition) of the managed server.

This parameter only supports WebLogic Server version 7.0 or higher.
Required Configuration is basic (full).

Collector: AttrDiscovery
HeapUsed

Percent of Java heap space in use.

Required Configuration is basic (full).

Collector: AttrDiscovery
MulticastMsgLost

Total number of incoming multicast messages that were lost according to the server.

Required Configuration is basic (full).

Collector: AttrDiscovery
NumOpenConnections

Number of connections to this server.

Required Configuration is basic (full).

Collector: AttrDiscovery
NumOpenSockets

Number of open sockets on the managed server.

Required Configuration is basic (full).

Collector: AttrDiscovery
ResentRequests

Number of state-change (delta) messages that were resent becaue a receiving server in the cluster missed a message.

Required Configuration is basic (full).

Collector: AttrDiscovery
BEAWLS_OS Application Class
_ProcColl

Collector parameter to discover performance information at the local operating system level and to populate parameter data in the OS application class.

Required Configuration is basic (full).
ActiveProcesses

List of currently active JVM processes running on a monitored server.

Required Configuration is basic (full).

Collector: _ProcColl
NumActiveJVMProcesses

Number of currently active JVM processes running on a monitored server.

Required Configuration is basic (full).

Collector: _ProcColl
NumHighCpuJVMProcesses

Number of processes on the monitored server that exceed the threshold established by the system administrator to define a high CPU process.

Required Configuration is basic (full).

Collector: _ProcColl
ServerJVMsCpuUtil

Percentage of a machines CPU utilization attributed to a WebLogic server JVM.

Required Configuration is basic (full).

Collector: _ProcColl
ServerJVMsMemUsage

Total memory being used by a monitored WebLogic servers JVM processes.

Required Configuration is basic (full).

Collector: _ProcColl
BEAWLS_PROBE Application Class
AvgConnTime

Average connection time for a client to connect through the WebLogic Server to the applications. See the Help for recommended alarm ranges.

Required Configuration is basic (full).
AvgPingTime

Average ping time. This indicates the average time needed to query the status of a server.

Required Configuration is basic (full).
BEAWLS_PROF_METHOD Application Class
AvgCPUTime

Average CPU time used by methods during the previous polling cycle.

Required Configuration is meth.

Collector: _MethodProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _MethodProfColl (BEAWLS_SERVER)
CPUTime

Total CPU time used by methods during the previous polling cycle.

Required Configuration is meth.

Collector: _MethodProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _MethodProfColl (BEAWLS_SERVER)
ExecutionTime

Total method execution time during the previous polling cycle.

Required Configuration is meth.

Collector: _MethodProfColl (BEAWLS_LOCAL_MANAGED)

Collector: _MethodProfColl (BEAWLS_SERVER)
BEAWLS_SERVER Application Class
_EJBRespColl

Collector parameter for EJB instrumentation and reporting.

Required Configuration is inst.
_JVMProfColl

Collector parameter for JVM profiling and reporting.

Required Configuration is prof.
_MethodProfColl

Collector parameter for method level profiling and reporting.

Required Configuration is meth.
_SQLRespColl

Collector parameter for SQL instrumentation and reporting.

Required Configuration is inst.
_WebAppRespColl

Collector parameter to get servlet response data.

Required Configuration is inst.
AttrDiscovery

Collector parameter to discover server configuration attributes.

Required Configuration is basic (full).
CheckNotification

Collector parameter that checks JMX notification log and creates notification messages and events for PATROL Event Manager.

Required Configuration is basic (full).
ConnectionStatus

WebLogic server connection status. An alarm condition means that the Patrol collector cannot connect to the server, usually because WebLogic is not running. Restarting WebLogic will usually clear an alarm within two minutes.

Required Configuration is basic (key).

Collector: AttrDiscovery
FreeHeap

Amount of available memory in the JVM heap. See the Help for more information.

Required Configuration is basic (full).

Collector: AttrDiscovery
HealthStatus

Health status (general condition) of the server.

This parameter only supports WebLogic Server version 7.0 and higher.

Collector: AttrDiscovery
Note about statuses:

WARN may indicate:

msg count has been above threshold for 1 hour
msg count has been above threshold for 90% of its total running time,
byte count has been above threshold for 1 hour
byte count has been above threshold for 90% of its total running time

CRITICAL may indicate:

all JMS threads have been blocked for 10 minutes
I/O(store operation) exception in last 10 minutes

FAILED indicates that the server status is unknown

OK indicates that there are no WARN, CRITICAL, or FAILED conditions
HeapUsed

Percentage of Java heap space in use. This reflects memory used by both applications and the WebLogic Server. See the online Help for details.

Required Configuration is basic (key).

Collector: AttrDiscovery
LogDiscovery

Collector parameter that determines the availability of log files.

Required Configuration is basic (full).
MainDiscovery

Discovers configuration information for a registered server and creates instances of application classes.

Required Configuration is basic (full).
NumOpenConnections

Number of connections to this server.

Collector: AttrDiscovery
NumOpenSockets

Number of open sockets on the server.

Required Configuration is basic (key).

Collector: AttrDiscovery
PatrolCollectorStatus

Logon status of the Java collector for WebLogic Server.

If PatrolCollectorStatus is in alarm, check the ConnectionStatus parameter; if it is also in alarm, restart WebLogic Server, otherwise, use the Update Registered Server command to verify server attributes. See the online Help.

Required Configuration is basic (key).
ServletDiscovery

Collector for servlet information.

Required Configuration is basic (full).
BEAWLS_SERVLET Application Class
ExecutionTimeAverage

Average execution time for this servlet. This is calculated as ExecutionTimeTotal divided by InvocationCount.

Required Configuration is basic (key).

Collector: ServletDiscovery
ExecutionTimeHigh

Longest execution time for this servlet. This is the slowest run time since the servlet was created.

Required Configuration is basic (full).

Collector: ServletDiscovery
ExecutionTimeLow

Shortest execution time for this servlet.

Required Configuration is basic (full).

Collector: ServletDiscovery
ExecutionTimeTotal

Total execution time for this servlet.

Required Configuration is basic (full).

Collector: ServletDiscovery
InvocationCount

Number of times a servlet has been invoked.

Required Configuration is basic (key).

Collector: ServletDiscovery
BEAWLS_SERVLET_METHOD Application Class
AvgResponseTime

Average response time for this servlet to execute.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
InvocationCount

Number of times this servlet was invoked during the previous collection cycle.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
InvocationRate

Frequency at which the servlet method was invoked during the previous collection cycle (number of calls per millisecond).

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
TotalResponseTime

Total response time for this servlet method during the previous collection cycle.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SREVER)
BEAWLS_SETUP Application Class
_monitorRegisterServer

Collector that discovers WebLogic instances. This runs only five times after initialization.

Required Configuration is basic (full).
About

The information about the product.

Required Configuration is basic (full).
BEAWLS_SQL Application Class
_SQLResponseColl

Collector that discovers SQL response rate data and populates all consumer parameters for the SQL application class.

Required Configuration is inst.
AvgResponseTime

Average response time for this SQL statement to execute.

Required Configuration is inst.

Collector: _SQLResponseColl
InvocationCount

Number of times this SQL was invoked during the previous collection cycle.

Required Configuration is inst.

Collector: _SQLResponseColl
InvocationRate

Frequency at which the SQL was invoked during the previous collection cycle (number of calls per millisecond).

Required Configuration is inst.

Collector: _SQLResponseColl
TotalResponseTime

Total response time for this SQL during the previous collection cycle.

Required Configuration is inst.

Collector: _SQLResponseColl
BEAWLS_WEBAPP Application Class
AvgResponseTime

Average response time for this web application to execute.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
InvocationCount

Number of times this web application was invoked during the previous collection cycle.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
InvocationRate

Frequency at which the web application was invoked during the previous collection cycle (number of calls per millisecond).

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
LongestServletAvgRespTime

Average response time of the slowest servlet in this web application.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
LongestServletTotalRespTime

Longest total response time for any given servlet in a web application.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
MostInvocationServlet

Highest number of servlet invocations over a user-selected time range.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
OpenSessionsCount

Number of sessions currently open for this application or component.

Required Configuration is basic (key).

Collector: AttrDiscovery
OpenSessionHighCount

High water mark of concurrently open sessions.

Required Configuration is basic (full).

Collector: AttrDiscovery
TotalOpenSessions

Total number of open sessions.

Required Configuration is basic (full).

Collector: AttrDiscovery
TotalResponseTime

Total response time for this web application to execute.

Required Configuration is inst.

Collector: _WebAppRespColl (BEAWLS_LOCAL_MANAGED)

Collector: _WebAppRespColl (BEAWLS_SERVER)
BEAWLS_WS Application Class
HighestHdlTotReqFail

The highest number of total failed request including SOAP faults, errors, and terminations.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
HighestHdlTotRespFail

The highest number of total failed responses including SOAP faults, errors, and terminations.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumHighestInvocation

The highest number of invocations for any service operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumHomePageHit

The number of times that the home page of this service has been visited.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
NumMalformedRequest

The number of times that this service has received a malformed or otherwise invalid request.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumWSDLHit

The number of times the WSDL of this service has been retrieved since this webservice was deployed.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
SlowestOpAvgDisp

The slowest average dispatch time of the service operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
SlowestOpAvgExec

The slowest average execution time of the service operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
SlowestOpAvgResp

The slowest average response time of the service operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
BEAWLS_WS_HDL Application Class
NumReqError

The number of times that the handlers handlerRequest method has thrown a runtime exception.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumReqSOAPFault

The number of times that the handlers handlerRequest method has thrown a SOAPFaultException.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumReqTermination

The number of times that the handlers handlerRequest method has returned a false.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
NumRespError

The number of times that the handlers handlerResponse method has thrown a runtime exception.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumRespSOAPFault

The number of times that the handlers handlerResponse method has thrown a SOAPFaultException.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumRespTermination

The number of times that the handlers handlerResponse method has returned a false.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
BEAWLS_WS_OPER Application Class
AvgDispTime

The average amount of time spent dispatching a single message to this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
AvgExecTime

The average amount of time spent on a single execution of this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
AvgRespTime

The average amount of time spent sending a single response from this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
HandlerReqErrorCount

The error count of the handlers request method.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
HandlerRespErrorCount

The error count of the handlers response method.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
HighestDispTime

The largest amount of time spent on a single execution of this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
HighestExecTime

The largest amount of time spent on a single execution of this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
HighestRespTime

The largest amount of time spent sending a single response from this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
LowestDispTime

The smallest amount of time spent dispatching a single message to this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
LowesttExecTime

The smallest amount of time spent on a single execution of this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
LowestRespTime

The lowest amount of time spent sending a single response from this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
NumInvocation

The number of times that this operation has been invoked since the webservice was deployed.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
NumRespError

The number of errors that were encountered sending responses from this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (key).

Collector: AttrDiscovery
TotalDispTime

The total time spent dispatching messages to this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
TotalExecTime

The total time spent executing this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
TotalRespTime

The total time spent sending responses from this operation.

This parameter only supports WebLogic Server version 8.1.
Required Configuration is basic (full).

Collector: AttrDiscovery
JMX_DOMAIN Application Class
MBeanCount

Tracks the number of MBeans registered in an MBean domain. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
JMX_MAIN Application Class
SetupRequired

Indicates that setup is required for the KM. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
JMX_SERVER Application Class
Availability

Displays the availability of the registered server (up or down). This parameter triggers an alarm if the server is down or if the JMX client is unable to connect to the server. A value of 0 indicates a server is unavailable, a value of 1 indicates available. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
MBeanCount

Displays the number of MBeans registered in the MBean server. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
JMX_CONDITION Application Class
AnnotatedStatus

Tracks the status of a condition. The numeric value indicates the status of the condition. When the status changes or actions are taken, the graph is annotated. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
BooleanFalseCount

Displays the number of monitored MBeans for which the current value of the attribute is false. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
BooleanTrueCount

Displays the number of monitored MBeans for which the current value of the attribute is true. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
MBeanCount

Displays the number of MBeans being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
StatusCriticalCount

Displays the number of monitored MBeans for which the current status is alarm, as defined by notifications or attribute values. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
StatusOKCount

Displays the number of monitored MBeans for which the current status is OK, as defined by notifications or attribute values. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
StatusWarningCount

Displays the number of monitored MBeans for which the current status is warning, as defined by notifications or attribute values. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
StringMatchCount

Displays the number of monitored MBeans for which the current value of the string matches the specified value. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
StringNoMatchCount

Displays the number of monitored MBeans for which the current value of the string does not match the specified value. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
ValueAverage

Displays the average attribute value across all MBeans being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
ValueMaximum

Displays the highest value in any MBean being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
ValueMinimum

Displays the lowest value in any MBean being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery
ValueSum

Displays the total value of all MBeans being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

Required Configuration is basic.

Collector: JMX Discovery















PATROL for Check Point FireWall-1  2.0.01


Table 5 PATROL for Check Point FireWall-1  2.0.01
Parameter



FW_FIREWALL Application Class
kmAdvisor

Displays the current status of the knowledge module. This parameter does not provide the status of the Check Point Management Module or any of the firewall modules.
FW1_MGMT_MODULE Application Class
collectorCol

Collector parameter for the Check Point Management Module. This parameter is used to set up connections to the collector binaries (fw_col, fw_objects, fw_objects_ng, and fw_diskcheck). It creates instances for the monitored firewalls. It also creates other instances for application classes, which are created under the FW1_FW_MODULE instance (for example, FW1_DoS_Attacks).
inAcceptedLogs

Graphs the number of inbound accepted log entries for all the firewall modules that are connected to the Check Point Management Module.

Collector: mgmtLogCol
inDroppedLogs

Graphs the number of inbound dropped log entries for all the firewall modules that are connected to the Check Point Management Module.

Collector: mgmtLogCol
inTotalLogs

Graphs the total number of inbound log entries for all the firewall modules that are connected to the Check Point Management Module.

Collector: mgmtLogCol
mgmtLogCol

Collects information associated with the accepted and dropped log entries at the Check Point Management Module level.
mgmtRuleLogCol

Collects all the information associated with the rules at the Check Point Management Module level.
outAcceptedLogs

Graphs the number of outbound accepted log entries for all the firewall modules that are connected to the Check Point Management Module.

Collector: mgmtLogCol
outDroppedLogs

Graphs the number of outbound dropped log entries for all the firewall modules that are connected to the Check Point Management Module.

Collector: mgmtLogCol
outTotalLogs

Graphs the total number of outbound log entries for all the firewall modules that are connected to the Check Point Management Module.

Collector: mgmtLogCol
sinceLastLog

Graphs the number of seconds since a log has been posted into the Check Point log.

Collector: mgmtLogCol
FW1_DoS_ATTACKS Application Class
DoSCol

Compiles the DoS attack information and populates the consumer parameters.
portScan

Alarms when a port scan attack is potentially occurring. This is based on the configuration of the parameter. The default is 5 different ports in 5 minutes from the same source host.

Collector: DoSCol
smurf

Alarms when a smurf attack is potentially occurring. This is based on the configuration of the parameter. The default is 25 ICMP packets within 5 seconds to the same destination.

Collector: DoSCol
spoof

Alarms when a spoof attack is potentially occurring.

Collector: DoSCol
FW1_MgmtModStatus Application Class
fwState

Displays the overall status of the Check Point Management Module.
remainingDiskPercentage

Graphs the amount of disk space available, in a percentage, for the disk partition where the Check Point logs are written.

Collector: fwModDiskCol
remainingDiskSpace

Graphs the amount of disk space available, in megabytes, for the disk partition where the Check Point logs are written.

Collector: fwModDiskCol
estTimeUntilDiskFull

Graphs the estimated amount of time, in minutes, before the disk is full based on the current usage.

Collector: fwModDiskCol
fwModDiskCol

Collects information about the FW1_MgmtModStatus application class.
FW1_DEBUG Application Class
remainingDiskPercentage

Graphs the amount of disk space available where the debug logs are written. The value is a percent of the total amount of disk space on the disk.

Collector: debugDiskCol
remainingDiskSpace

Graphs the amount of disk space available, in megabytes, for the disk partition where the debug logs are written.

Collector: debugDiskCol
estTimeUntilDiskFull

Graphs the amount of time, based on current usage, before the disk partition is full. This parameter monitors the disk partition where the debug logs are written.

Collector: debugDiskCol
debugDiskCol

Collects information on the total disk space.
FW1_Objects Application Class
userCol

Collects information on monitored users.
policyContCol

Creates or destroys the instances of FW1_OBJECT_POLICY that are monitored.
daysUntilNextUserExpiry

Displays the number of days until the next user ID expires.

Collector: userCol
adminChanges

Displays the number of changes to the administrators since the last discovery cycle. This parameter goes into alarm when changes occur to the administrators of the Check Point Management Module.
expiredUsers

Graphs the number of expired users IDs.

Collector: userCol
userChanges

Displays the number of changes to the users since the last discovery cycle.

Collector: userCol
networkObjectChanges

Displays the number of changes to the network objects since the last discovery cycle.
FW1_OBJECT_POLICY Application Class
numOfChanges

Displays the number of changes to the monitored policy since the last discovery cycle. If there are any changes to the policy, the parameter goes into alarm.
FW1_FW_MODULE Application Class
fwdLogCol

Collector parameter that collects the log information for the firewall module. This parameter collects the information associated with the accepted and dropped log entries.
fwRuleLogCol

Collector parameter that collects all the information associated with all the monitored rules at the firewall module level.
fwStatus

Displays the overall status of the firewall module. This parameter monitors changes to the policies that are installed on the firewall and alarms on changes to the install date, install time, or the policy that is installed.

Collector: policyInfoCol
inAcceptedLogs

Graphs the number of inbound accepted log entries for the firewall module that is being monitored.

Collector: fwdLogCol
inDroppedLogs

Graphs the number of inbound dropped log entries for the firewall module that is being monitored.

Collector: fwdLogCol
inTotalLogs

Graphs the total number of log entries for the firewall module that is being monitored.

Collector: fwdLogCol
nicCol

Collector parameter that discovers which network cards are installed on the firewall computer if SNMP is enabled on the firewall module and the user has configured it in the KM.
outAcceptedLogs

Graphs the number of outbound accepted log entries for the firewall module that is being monitored.

Collector: fwdLogCol
outDroppedLogs

Graphs the number of outbound dropped log entries for the firewall module that is being monitored.

Collector: fwdLogCol
outTotalLogs

Graphs the total number of outbound log entries for the firewall module that is being monitored.

Collector: fwdLogCol
policyInfoCol

Collector parameter that collects the policy status information for the firewall module.
sinceLastLog

Graphs the amount of time in seconds since the last log entry for the firewall module.This might indicate possible problems with the firewall.

Collector: fwdLogCol
PingAvailability

Graphs the ping test showing whether it is successful or not.
FW1_SPECIFIC Application Class
inAcceptedLogs

Graphs the number of inbound accepted log entries for the specific object that is being monitored.

Collector: specificLogCol
inDroppedLogs

Graphs the number of inbound dropped log entries for the specific object that is being monitored.

Collector: specificLogCol
inTotalLogs

Graphs the number of total inbound log entries for the specific object that is being monitored.

Collector: specificLogCol
outAcceptedLogs

Graphs the number of outbound accepted log entries for the specific object that is being monitored.

Collector: specificLogCol
outDroppedLogs

Graphs the number of outbound dropped log entries for the specific object that is being monitored.

Collector: specificLogCol
outTotalLogs

Graphs the number of total outbound log entries for the specific object that is being monitored.

Collector: specificLogCol
sinceLastLog

Graphs the number of seconds since a log has been posted into the Check Point log for the specific object.

Collector: specificLogCol
specificLogCol

Collector parameter that collects the log information for the specific object. This parameter collects the information associated with the accepted and dropped log entries.
FW1_NIC Application Class
nicStatusCol

Collector parameter for the network interface card (NIC) information. This information is based on the SNMP MIB.
bandwidthUtil

Graphs the percentage of utilization for the network card being monitored. This percentage is based on throughput of the NIC and the amount of traffic passing through the NIC.

Collector: nicStatusCol
operStatus

Displays the current state of the interface. The status can be up, down, or testing.

Collector: nicStatusCol
adminStatus

Displays the desired state of the interface. The status can be up, down, or testing.

Collector: nicStatusCol
inErrors

Graphs the number of inbound packets discarded because of errors.

Collector: nicStatusCol
inOctets

Graphs the total number of bytes received, including framing characters.

Collector: nicStatusCol
outErrors

Graphs the number of outbound packets discarded because of errors.

Collector: nicStatusCol
outOctets

Graphs the total number of outbound bytes, including framing characters.

Collector: nicStatusCol
FW1_RULELOGS Application Class
inAcceptedLogs

Graphs the number of inbound accepted log entries for the specific rule that is being monitored.

Collector: fwdLogCol and mgmtRuleLogCol
inDroppedLogs

Graphs the number of inbound dropped log entries for the specific rule that is being monitored.

Collector: fwdLogCol and mgmtRuleLogCol
outAcceptedLogs

Graphs the number of outbound accepted log entries for the specific rule that is being monitored.

Collector: fwdLogCol and mgmtRuleLogCol
outDroppedLogs

Graphs the number of outbound dropped log entries for the specific rule that is being monitored.

Collector: fwdLogCol and mgmtRuleLogCol
sinceLastLog

Graphs the number of seconds since a log has been posted into the Check Point log for the specific rule.

Collector: fwdLogCol and mgmtRuleLogCol
FW1_SPECIFIC_CONT Application Class
specificCol

Creates and destroys the specified objects being monitored for the specific type.
InstancesCount

Displays the number of unique objects found during the last discovery cycle for the specific type.
FW1_SPECIFIC Application Class
specificLogCol

Collects the information associated with the accept and dropped log entries for the specific report.
sinceLastLog

Graphs the number of seconds since a log has been posted into the Check Point Log for the specific object being monitored.

Collector: specificLogCol
outAcceptedLogs

Graphs the number of outbound accepted log entries for the specific object being monitored.

Collector: specificLogCol
inAcceptedLogs

Graphs the number of inbound accepted log entries for the specific object that is being monitored.

Collector: specificLogCol
outDroppedLogs

Graphs the number of outbound dropped log entries for the specific object that is being monitored.

Collector: specificLogCol
inDroppedLogs

Graphs the number of inbound dropped log entries for the specific object that is being monitored.

Collector: specificLogCol
inTotalLogs

Graphs the number of total inbound log entries for the specific object that is being monitored.

Collector: specificLogCol
outTotalLogs

Graphs the number of total outbound log entries for the specific object that is being monitored.

Collector: specificLogCol















PATROL for Cisco Secure PIX Firewall 1.1.00


Table 6 PATROL for Cisco Secure PIX Firewall 1.1.00
Parameter



PIX_MODULE Application Class
DiskSpaceRemaining

Indicates the amount of disk space used on the agent machine as a percentage.
PIX_DEVICE Application Class
BufferLogging

Indicates whether buffer logging is currently on or off, at what level it is set, and the current number of messages.
ConnectionsMade

Graphs the number of connections made to the PIX device. This information is derived from the PIX log file.
ConsoleLogging

Indicates whether console logging is currently on or off, at what level it is set, and the current number of messages.
DeniedConnections

Graphs the number of connections that were derived during the current discovery cycle. This information is derived from the PIX log file.
FreeMemory

Reports total free memory space.
LINKPortStatus

Indicates the status of the COM port link or the TCP socket link (on or off). LINKPortStatus activates an alarm if the PIX device is offline (for example, because of a loss of power) or if the communication port (TCP or serial) is down.
LogExport

Displays IP addresses for log file export.
LogMessages

Graphs the number of log messages present.
MonitorLogging

Indicates whether monitor logging is currently on or off, at what level it is set, and the current number of messages.
PasswordAlert

Tracks the number of PIX_DEVICE password faults. This information is derived from the PIX log file.
SecurityAlert

Tracks the number of PIX_DEVICE security faults. This information is derived from the PIX log file.
SpoofAlert

Tracks the number of spoof attacks.
SyslogLogging

Indicates whether syslog logging is currently on or off.
TimeStampLogging

Indicates whether time stamp logging is currently on or off.
TrapLogging

Indicates whether trap logging is currently on or of, at what level it is set, and the current number of messages.
PIX_INTERFACE Application Class
Abort

Graphs the number of aborted packet errors on the interface.
Babbles

Graphs the number of babble errors on the interface.
Collisions

Graphs the number of packet-collision errors on the interface.
CRC

Graphs the number of CRCs (cyclic redundancy checks) received on the interface.
Deferred

Graphs the number of deferred delivery packet errors on the interface.
Frame

Graphs the number of frame errors received on the interface.
Giants

Graphs the number of giants received on the interface.
Ignored

Graphs the number of ignored-packet errors on the interface.
InputBroadcasts

Graphs the number of broadcasts received on the interface.
InputBytes

Graphs the number of bytes received on the interface.
InputErrors

Graphs the number of input errors occurring on the interface.
InputPackets

Graphs the number of packets received on the interface.
InterfaceResets

Graphs the number of interface-reset errors.
LateCollisions

Graphs the number of late-collision errors on the interface.
LineStatus

Displays the line status of the interface card.
LostCarrier

Graphs the number of lost-carrier errors on the interface.
NICStatus

Displays the status of the interface card.
NoBuffer

Graphs the number of no-buffer errors on the interface.
NoCarrier

Graphs the number of no-carrier errors on the interface.
OutputBytes

Graphs the number of bytes sent on the interface.
OutputErrors

Graphs the number of output errors occurring on the interface.
OutputPackets

Graphs the number of packets sent on the interface.
OverRuns

Graphs the number of overrun errors received on the interface.
Runts

Graphs the number of runts received on the interface.
UnderRuns

Graphs the number of underrun errors received on the interface.















PATROL for Compaq Insight Manager 1.5.04


Table 7 PATROL for Compaq Insight Manager 1.5.04
Parameter



PATROL_for_CIM Application Class
Connection_Errors

During pre-discovery and discovery checks will be made to see if SNMP is enabled. If SNMP is not enabled this parameter is set active and populated with a generic error message. This parameter is a text box parameter. If SNMP is functioning, the parameter is set inactive and will not appear.
CPQCLRAID Application Class
_cpqClRaidCntlrColl

Collects information for the consumer parameters in the CPQCLRAID application class.
_cpqClRaidCntlrSummColl

Collects information for the consumer parameters in the CPQCLRAID application class.
_cpqClRaidLogDrvCondColl

Collects information for the consumer parameters in the CPQCLRAID application class.
_cpqClRaidLogDrvSumColl

Collects information for the consumer parameters in the CPQCLRAID application class.
_cpqClRaidPhyDrvCondColl

Collects information for the consumer parameters in the CPQCLRAID application class.
_cpqClRaidPhyDrvSummColl

Collects information for the consumer parameters in the CPQCLRAID application class.
CPQCLRAIDCNTLR Application Class
cpqCRCondCntlr

Monitors clustered RAID array controller condition.

Collector: _cpqClRaidCntlrColl

cpqCRSumCntlr

Monitors clustered RAID summary information.

Collector: _cpqClRaidCntlrSummColl
CPQCLRAIDEMU Application Class
_cpqCLRaidEmuColl

Collects information for the consumer parameters in the CPQCLRAIDEMU application class.
cpqCREmuBoardTemp

Monitors clustered Raid EMU system board temperature (F).

Collector: _cpqCLRaidEmuColl
cpqCREmuCond

Monitors clustered Raid EMU overall condition.

Collector: _cpqCLRaidEmuColl

cpqCREmuCondFan

Monitors clustered RAID EMU primary enclosure overall fan condition.

Collector: _cpqCLRaidEmuColl

cpqCREmuCondPwrSup

Monitors clustered RAID EMU primary enclosure power supply overall condition.

Collector: _cpqCLRaidEmuColl

cpqCREmuCondTemp

Monitors clustered RAID EMU primary enclosure temperature condition.

Collector: _cpqCLRaidEmuColl

cpqCREmuEncTemp

Monitors clustered RAID EMU primary enclosure temperature (F).

Collector: _cpqCLRaidEmuColl
cpqCREmuStatusBoardTemp

Monitors clustered RAID system board temperature status.

Collector: _cpqCLRaidEmuColl
cpqCREmuStatusEncTemp

Monitors clustered RAID enclosure temperature status.

Collector: _cpqCLRaidEmuColl
cpqCREmuStatusFan

Monitors clustered RAID EMU primary enclosure fan status.

Collector: _cpqCLRaidEmuColl

cpqCREmuStatusPwrSup

Monitors clustered RAID EMU primary enclosure power supply status.

Collector: _cpqClRaidExpCabColl

cpqCREmuStatusTemp

Monitors clustered RAID EMU primary enclosure temperature status.

Collector: _cpqClRaidExpCabColl


cpqCREmuTemp

Monitors clustered RAID EMU primary enclosure temperature (C)..

Collector: _cpqCLRaidEmuColl
CPQCLRAIDEXP Application Class
_cpqClRaidExpCabColl

Collects information for the consumer parameters in the CPQCLRAIDEXP application class.
cpqCRExpCond

Monitors clustered RAID expansion cabinet overall condition.

Collector: _cpqClRaidExpCabColl

cpqCRExpCondFan

Monitors clustered RAID expansion cabinet fan condition.

Collector: _cpqClRaidExpCabColl

cpqCRExpCondPwrSup

Monitors clustered RAID expansion cabinet power supply condition.

Collector: _cpqClRaidExpCabColl

cpqCRExpCondTemp

Monitors clustered RAID expansion cabinet power supply temperature.

Collector: _cpqClRaidExpCabColl

cpqCRExpStatusFan

Monitors clustered RAID expansion cabinet fan status.

Collector: _cpqClRaidExpCabColl


cpqCRExpStatusPwrSup

Monitors clustered RAID expansion cabinet power supply status.

Collector: _cpqClRaidExpCabColl

cpqCRExpStatusTemp

Monitors clustered RAID expansion cabinet temperature status.

Collector: _cpqClRaidExpCabColl

CPQCLRAIDLOGDRV Application Class
cpqCRCondLogDrv

Monitors clustered RAID logical drive condition.

Collector: _cpqClRaidLogDrvCondColl
cpqCRStatusLogDrv

Monitors clustered RAID logical drive status.

Collector: _cpqClRaidLogDrvCondColl

cpqCRSummLogDrv

Monitors clustered RAID logical drive summary information.

Collector: _cpqClRaidLogDrvSumColl
CPQCLRAIDPARTITION Application Class
cpqCRCondPart

Monitors clustered RAID logical drive partition condition.

Collector: _cpqClRaidPhyDrvCondColl

cpqCRStatusPart

Monitors clustered RAID logical drive partition status.

Collector: _cpqClRaidPhyDrvCondColl



CPQCLRAIDPHYDRV Application Class
cpqCRCondPhyDrv

Monitors clustered RAID physical drive condition.

Collector: _cpqClRaidPhyDrvCondColl

cpqCRCondSpare

Monitors clustered RAID spare drive condition.

Collector: _cpqClRaidPhyDrvCondColl

cpqCRSumPhyDrv

Monitors clustered RAID physical drive summary information.

Collector: _cpqClRaidPhyDrvSummColl
cpqCRSumSpare

Monitors clustered RAID spare drive summary information.

Collector: _cpqClRaidPhyDrvSummColl
CPQCONFIGURATION Application Class
cpqConfigASR

Provides the settings for the Automatic Server Recovery (ASR) options as well as the fan degradation recovery actions.
cpqConfigExpBoards

Contains summary information for the expansion boards.
cpqConfigLogs

Monitors the Integrated Management Log (IML) as reported by the Compaq Insight Manager product. Part of the functionality for this parameter is to warn/alarm based on the contents of the IML. There is a built in default warn/alarm capability that may be overridden.
cpqConfigSecurity

Describes how the security features on the server are configured.
cpqConfigStorage

Contains summary information for the various storage devices on the server. This includes diskette drive size, system volume information, disk, and controller information.
cpqConfigSysInfo

Contains summary information for the system. The information is further divided into sections (System Information, ROM Information, Memory Board Information, Processor Information, and System Port Information).. If information for a particular section is absent from a server then it will not appear in the output text.
CPQCPU Application Class
_CPQCPUColl

Collects information for the consumer parameters in the CPQCPU application class.
cpqCpuUtilFiveMin

Provides the CPU utilization as a percent of the theoretical maximum during the last five minutes.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _CPQCPUColl
cpqCpuUtilThirtyMin

Provides the CPU utilization as a percent of the theoretical maximum during the last thirty minutes.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _CPQCPUColl
CPQCPUHLTH Application Class
cpqCpuHlthStatus

Monitors status of the CPU as reported by Compaq Insight Manager. If status reporting is not supported by Compaq Insight Manager this parameter will be set to OFFLINE.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _HLTHCondColl
cpqCpuHlthSummary

Provides a summary of CPU information, including CPU name, speed, designer, step, and socket.

Collector: cpqNumOfCPUs
cpqCpuHlthThreshold

Displays CPU self-correcting error threshold status. Excessive corrected internal errors can predict future hard processor failures. Compaq Insight Manager will set this attribute if an internal processor error threshold is passed. If status reporting is not supported by Compaq Insight Manager this parameter will be set to OFFLINE.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _HLTHCondColl
CPQFAN Application Class
cpqHeFanStatus

Monitors whether the fan is operating properly.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _HLTHCondColl
CPQFCAACCEL Application Class
cpqFcaAccelBatteryStatus

Monitors the status of each battery pack on the Compaq Fiber Channel Array Accelerator board. The batteries can recharge only when the system has power applied.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _FCAAccelCondColl

cpqFcaAccelCondition

Monitors the overall condition of the Compaq Fiber Channel Array Accelerator board.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _FCAAccelCondColl
cpqFcaAccelReadErrors

Provides the number of read memory parity errors that were detected while reading from the Array Accelerator board.

Collector: _FCAAccelCondColl
cpqFcaAccelWriteErrors

Provides the total number of write memory parity errors that were detected while writing to the Array Accelerator board.

Collector: _FCAAccelCondColl
cpqFcaStatusAccel

Monitors fibre channel array accelerator board status.

Collector: _FCAAccelCondColl
cpqFcaSumAccel

Monitors fibre channel array accelerator summary information.

Collector: _FCAAccelCondColl
CPQFCACHCOND Application Class
cpqFCAChChassisCond

Monitors fibre channel array overall chassis condition.

Collector: _FCAChCondColl

cpqFCAChCntlrCond

Monitors fibre channel array chassis overall controller condition.

Collector: _FCAChCondColl

cpqFCAChFanCond

Monitors fibre channel array chassis overall fan condition.

Collector: _FCAChCondColl

cpqFCAChLogDrvCond

Monitors fibre channel array chassis logical drive overall condition.

Collector: _FCAChCondColl

cpqFCAChPhyDrvCond

Monitors FCA chassis overall physical drive condition.

Collector: _FCAChCondColl

cpqFCAChPwrSupCond

Monitors fibre channel array chassis overall power supply condition.

Collector: _FCAChCondColl

cpqFCAChTempCond

Monitors fibre channel array chassis temperature condition.

Collector: _FCAChCondColl

CPQFCACHFANENTRY Application Class
cpqFCAChCondFan

Monitors fibre channel array chassis fan module condition.

Collector: _FCAChCondColl

cpqFCAChInstalledFan

Monitors fibre channel array fibre channel installed fan module.

Collector: _FCAChCondColl
cpqFCAChStatusFan

Monitors fibre channel array chassis fan module status.

Collector: _FCAChCondColl


CPQFCACHPSENTRY Application Class
cpqFCAChCondPwrSup

Monitors fibre channel array power supply condition.

Collector: _FCAChCondColl

cpqFCAChInstalledPS

Monitors fibre channel array fibre installed power supply.

Collector: _FCAChCondColl
cpqFCAChStatusPwrSup

Monitors fibre channel array power supply status.

Collector: _FCAChCondColl

cpqFCAChUpsStatusPwrSup

Monitors fibre channel uninterruptible power supply (UPS).

Collector: _FCAChCondColl


CPQFCACHTEMPENTRY Application Class
cpqFCAChCondTemp

Monitors fibre channel array chassis temperature probe condition.

Collector: _FCAChCondColl

cpqFCAChCurrTemp

Monitors fibre channel array chassis temperature probe current temperature (C).

Collector: _FCAChCondColl
cpqFCAChStatusTemp

Monitors fibre channel array chassis temperature probe status.

Collector: _FCAChCondColl

CPQFCACNTLR Application Class
cpqFcaCntlrCondition

Monitors the overall condition of a Compaq Fiber Channel Array Controller.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _FCACntlrCondColl
cpqFcaStatusCntlr

Monitors fibre channel array status controller summary.

Collector: _FCACntlrCondColl

cpqFcaSumCntlr

Monitors fibre channel array controller summary.

Collector: _FCACntlrSumColl
CPQFCAHCENTRY Application Class
cpqFCACondHCntlr

Monitors fibre channel array host controller condition.

Collector: _cpqFCAHCCondColl

cpqFCAOvCondHCntlr

Monitors fibre channel array host controller overall condition.

Collector: _cpqFCAHCCondColl

cpqFCAStatusHCntlr

Monitors fibre channel array host controller status.

Collector: _cpqFCAHCCondColl



cpqFcaSumHCntlr

Monitors fibre channel array host controller summary information.

Collector: _cpqFCAHCSumColl
CPQFCAHOSTCNTLR Application Class
_cpqFCAHCCondColl

Collects information for the consumer parameters in the CPQFCAHOSTCNTLR application class.
_cpqFCAHCSumColl

Collects information for the consumer parameters in the CPQFCAHOSTCNTLR application class.
CPQFCALOGDRV Application Class
_FCALogDrvSumColl

Collects information for the consumer parameters in the cpqFCALogDrvSummary application class.
cpqFCALogDrvCondition

Monitors fibre channel array logical drive condition.

Collector: _FCAChCondColl

cpqFCALogDrvStatus

Monitors fibre channel array logical drive status.

Collector: _FCAChCondColl











cpqFCALogDrvSummary

Monitors fibre channel array logical drive summary.

Collector: _FCALogDrvSumColl
CPQFCAPHYDRV Application Class
_FCAPhyDrvSumColl

Collects information for the consumer parameters in the CPQFCAPHYDRV application class.
cpqFCACondPhyDrv

Monitors fibre channel array physical drive condition.

Collector: _FCAChCondColl
cpqFCAFunc1PhyDrv

Provides information about a series of tests that indicate how well a physical drive works. These tests compare the current operation of the physical drive and the operation of the drive when it was new.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _FCAPhyDrvSumColl
cpqFCAFunc2PhyDrv

Provides information about a series of tests that indicate how well a physical drive works. These tests compare the current operation of the physical drive and the operation of the drive when it was new.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _FCAPhyDrvSumColl
cpqFCAFunc3PhyDrv

Provides information about a series of tests that indicate how well a physical drive works. These tests compare the current operation of the physical drive and the operation of the drive when it was new.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _FCAPhyDrvSumColl
cpqFCASpareCond

Monitors fibre channel array spare drive overall condition.

Collector: _FCAChCondColl

cpqFCASpareStatus

Monitors fibre channel array spare drive status.

Collector: _FCAChCondColl


cpqFCASpareSum

Monitors fibre channel array spare drive summary information.

Collector: _FCAPhyDrvSumColl
cpqFCAStatusPhyDrv

Monitors fibre channel array physical drive status.

Collector: _FCAChCondColl


CPQFCASTORSYS Application Class
_FCAAccelCondColl

Collects information for the consumer parameters in the CPQFCASTORSYS application class.
_FCAAccelSumColl

Collects information for the consumer parameters in the CPQFCASTORSYS application class.
_FCAChCondColl

Collects information for the consumer parameters in the CPQFCASTORSYS application class.
_FCACntlrCondColl

Collects information for the consumer parameters in the CPQFCASTORSYS application class.
_FCACntlrSumColl

Collects information for the consumer parameters in the CPQFCASTORSYS application class.
_FCALogDrvSumColl

Collects information for the cpqFCALogDrvSummary parameter.
_FCAPhyDrvSumColl

Collects information for the consumer parameters in the CPQFCAPHYDRV application class.
_FCAStorSysColl

Collects information for the consumer parameters in the CPQFCASTORSYS application class.
cpqFCAStorSysSumm

Monitors fibre channel array storage system summary.
CPQHLTH Application Class
_HLTHColl

Collects information for the consumer parameters in the CPQHLTH application class.
_HLTHCondColl

Collects information for the consumer parameters in the CPQHLTH application class.
cpqAsrCondition

Monitors the overall condition of the Automatic Server Recovery feature.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _HLTHCondColl
cpqCorrMemErrorDesc

Provides the text description of the memory error.

Collector: _HLTHColl
cpqCorrMemLogCondition

Monitors the overall condition of the correctable memory error log feature.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _HLTHCondColl
cpqCritLogCondition

Monitors the overall condition of the critical error log feature.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _HLTHCondColl
cpqCriticalErrorDesc

Provides the text description of the critical error.

Collector: _HLTHColl
cpqNumOfCPUs

Provides notification, via standard Patrol alarm actions, whenever the number of CPU's reported by CIM does not match the historical count. It allows the user to see the historical and current CPU count.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.
cpqPostMsgCondition

Monitors the overall condition of the POST error recording feature.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _HLTHCondColl
cpqPostMsgDesc

Provides the description of the POST error.

Collector: _HLTHColl
cpqThermalCondition

Monitors the overall condition of the systems thermal environment.

Collector: _HLTHCondColl

CPQHPLUGCHASSIS Application Class
hplugslot_coll

Collects information for the consumer parameters in the CPQHPLUGSLOT application class.
CPQHPLUGSLOT Application Class
cpqSiHotPlugBoardPresent

Monitors the presence of the hot plug slot.

Collector: hplugslot_coll
cpqSiHotPlugSlotBoardCondition

Monitors the condition of the hot plug slot.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: hplugslot_coll
cpqSiHotPlugSlotErrorStatus

Monitors the status of the hot plug slot.

Collector: hplugslot_coll
cpqSiHotPlugSlotPowerState

Monitors the power state of the hot plug slot.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: hplugslot_coll
CPQIDA Application Class
_IDAColl

Collects information for the consumer parameters in the CPQIDA application class.
_IDACondColl

Collects information for the consumer parameters in the CPQIDA application class.
cpqAccelBattery

Monitors the status of each battery pack on the board.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _IDACondColl

cpqAccelCondition

Monitors the overall condition of the SMART array accelerator.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _IDACondColl
cpqAccelReadErrs

Indicates the rate of accelerator read errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _IDACondColl
cpqAccelWriteErrs

Indicates the rate of accelerator write errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _IDACondColl
cpqCntlrCondition

Monitors the overall condition of the SMART array controller and any associated logical drives, physical drives, and array accelerators.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _IDACondColl
cpqSpareCondition

Provides information about the overall condition of this spare.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _IDACondColl
CPQIDALOGDRV Application Class
cpqLogDrvCondition

Monitors the overall condition of the logical drive and any associated physical drives.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
CPQIDAPHYDRV Application Class
cpqPhyDrvCondition

Monitors the overall condition of the physical drive.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvFunctTest1

Provides information about a series of tests that indicate how well a physical drive works. These tests compare the current operation of the physical drive and the operation of the drive when it was new.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvFunctTest2

Provides information about a series of tests that indicate how well a physical drive works. These tests compare the current operation of the physical drive and the operation of the drive when it was new.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvFunctTest3

Provides information about a series of tests that indicate how well a physical drive works. These tests compare the current operation of the physical drive and the operation of the drive when it was new.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvHSeeks

Provides the total number of seek operations over the scheduling interval.

Collector: _IDACondColl
cpqPhyDrvHardReadErrs

Monitors the rate of physical hard drive read errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvHardWriteErrs

Monitors the rate of physical hard drive write errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvSeekErrs

Provides the total number of times that the physical disk drive detected a seek error over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _IDACondColl
cpqPhyDrvSeeks

Provides the total number of seek operations over the scheduling interval.

Collector: _IDACondColl
CPQNET Application Class
_NetCondColl

Collects information for the consumer parameters in the CPQNET application class.
_NetSumColl

Collects information for the consumer parameters in the CPQNET application class.
cpqifCondition

Displays condition of the network interface.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _NetCondColl
cpqifInErrors

Monitors the number of errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _NetSumColl
cpqifInNUcastPkts

Monitors the number of non-unicast (subnetwork-broadcast or subnetwork-multicast) packets delivered to a higher layer protocol.

Collector: _NetSumColl
cpqifOutErrors

Monitors the number of errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _NetSumColl
cpqifOutNUcastPkts

Monitors the number of packets that higher level protocols requested be transmitted to a non-unicast (subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.

Collector: _NetSumColl
cpqifStatus

Displays status of the network interface.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _NetCondColl
CPQNIC Application Class
_NicCondColl

Collects information for the consumer parameters in the CPQNIC application class.
_NicSummColl

Collects information for the consumer parameters in the CPQNIC application class.
cpqNicCond

Displays condition of the Network Interface Card (NIC).

Recovery Actions:If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _NicCondColl
cpqNicStatus

Displays status of the Network Interface Card (NIC).

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _NicCondColl
cpqNicSummary

Contains port, role, slot, and state for the Network Interface Card (NIC).

Collector: _NicSummColl
CPQPWRSUP Application Class
_cpqFltTolPwrSupColl

Collects information for the consumer parameters in the CPQPWRSUP application class.
cpqPwrSupSysCond

Displays overall condition of the power supply sub-system as reported by Compaq Insight Manager.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _cpqFltTolPwrSupColl
CPQPWRSUPENTRY Application Class
cpqPwrSupEntryCond

Indicates the reported condition of the power supply.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _cpqFltTolPwrSupColl
cpqPwrSupEntrySummary

Reports summary information for the power supply. Information included in the summary includes the current status, voltage, used capacity, max capacity, whether or not the supply is redundant, model, and serial number.

Collector: _cpqFltTolPwrSupColl
CPQSCSI Application Class
_ScsiCondColl

Collects information for the consumer parameters in the CPQSCSI application class.
_ScsiSumColl

Collects information for the consumer parameters in the CPQSCSI application class.
CPQSCSICNTLR Application Class
cpqCntlrCondition

Monitors the overall condition of the SCSI controller and any associated logical drives and physical drives controlled by it.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiCondColl
CPQSCSIPHYDRV Application Class
cpqPhyDrvCondition

Monitors the overall condition of the SCSI physical drive.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiCondColl
cpqPhyDrvHardReadErrs

Monitors the rate of physical hard drive read errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiSumColl
cpqPhyDrvHardWriteErrs

Monitors the rate of physical hard drive write errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiSumColl
cpqPhyDrvSum

Provides summary of physical drive information.

Collector: _ScsiSumColl
CPQSCSITAPE Application Class
cpqTapeCountersTotalErrs

Monitors the rate of tape drive errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiSumColl
cpqTapeCountersTotalUnc

Monitors the rate of uncorrectable tape drive errors over the scheduling interval.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiSumColl
cpqTapeDrvCondition

Monitors the status of the physical tape drive.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _ScsiCondColl
CPQSCST Application Class
_SCSTColl

Collects information for the consumer parameters in the CPQSCST application class.
cpqBoxCondition

Provides the SCSI drive box condition.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _SCSTColl
cpqFanStatus

Monitors the status of the Compaq Drive Box Fan.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _SCSTColl
cpqSidePanelStatus

Monitors the status of the Compaq Drive Box Side Panel.

Recovery actions: If the parameter enters a warning or alarm state, a message appears in the PATROL output window and an event appears in the event log.

Collector: _SCSTColl
cpqTempStatus

Monitors the temperature of the drive system.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event

Collector: _SCSTColl
CPQSM2 Application Class
_SM2CondColl

Collects information for the consumer parameters in the CPQSM2 application class.
_SM2SUMColl

Collects information for the consumer parameters in the CPQSM2 application class.
cpqSm2BatteryPercentCharged

Monitors the charge percent of the Remote Insight battery.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _SM2CondColl
cpqSm2CntlrBatteryStatus

Monitors the status of the Remote Insight battery.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _SM2CondColl
cpqSm2CntlrInterfaceStatus

Monitors the overall status of the interface between the Remote Insight board and the host server.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _SM2CondColl
cpqSm2CntlrKeyboardCableStatus

Monitors the overall status of the keyboard interface on the Remote Insight Board.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _SM2CondColl
cpqSm2NicCond

Monitors the condition of the Remote Insight Board network interface card.

Collector: _SM2CondColl

cpqSm2NicSumm

Provides a summary of Remote Insight Board network interface card information.

Collector: _cpqSm2_coll
cpqSm2Summ

Monitors summary information for the remote insight board, including ROM date, ROM version, Video Status, Battery enabled alert status, board CIM agent location, cold reboot setting, serial number, session status, system ID, IP address, model, mouse cable status, internal and external power cable status.

Collector: _cpqSm2_coll
CPQTEMPSENSOR Application Class
_CPQTEMPSENSCONDCOLL

Collects information for the consumer parameters in the CPQTEMPSENSOR application class.
_CPQTEMPSENSORCOLL

Collects information for the consumer parameters in the CPQTEMPSENSOR application class.
CPQTEMPSENSORENTRY Application Class
cpqTempSensorActual

Displays current temperature, in degrees Celsius, reported by this sensor.

If no Border, Alarm1, or Alarm2 ranges are set for this parameter the actual value is compared to the max temperature value maintained by Compaq Insight Manager. If the actual value exceeds the max temperature value the parameter is set to the ALARM status. If the user sets the Border, Alarm1, or Alarm2 ranges those values are used to determine parameter status.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _CPQTEMPSENSCONDCOLL
cpqTempSensorSummary

Contains summary information for this sensor.

Collector: _CPQTEMPSENSORCOLL
CPQUPS Application Class
_UPSColl

Collects information for the consumer parameters in the CPQUPS application class.
cpqAutoShutdownDelay

Provides the number of minutes of battery power remaining before the UPS driver begins a graceful shutdown of the operating system.

Collector: _UPSColl
cpqEstimatedBatteryLife

Provides estimated number of minutes of battery power available. A UPS may not provide the estimated battery life when AC power is available. The parameter value will be negative one (-1) when the PATROL Agent is unable to determine the estimated battery life.

Collector: _UPSColl
cpqLinestatus

Provides the status of the AC line input to the UPS.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _UPSColl
CPQUTIL Application Class
_UTILIZATIONColl

Collects information for the consumer parameters in the CPQUTIL application class.
cpqSysUtilEISABusFiveMin

Provides the EISA bus utilization as a percent of the theoretical maximum during the last five minutes.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _UTILIZATIONColl
cpqSysUtilEISABusHour

Provides the EISA bus utilization as a percent of the theoretical maximum during the last hour.

Recovery Actions: If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _UTILIZATIONColl
cpqSysUtilEISABusThirtyMin

Provides the EISA bus utilization as a percent of the theoretical maximum during the last 30 minutes.

Recovery Actions:If the parameter enters a warning or alarm state, a message is displayed in the PATROL output window and an event is posted in the event log.

Collector: _UTILIZATIONColl

hi















PATROL for Compaq NonStop Himalaya Servers 1.2.08


Table 8 PATROL for Compaq NonStop Himalaya Servers 1.2.08
Parameter



NSK_ASYNC Application Class
Errors

Reports the number of Asynchronous communication line errors occurring each second.

Collector: HOSTlineAsyncColl
InRate

Reports the number of incoming messages per second for all device sizes.

Collector: HOSTlineAsyncColl
LineState

Indicates whether the ASYNC line is available.

Collector: HOSTlineAsyncColl
OutRate

Reports the number of incoming messages per second for all device sizes.

Collector: HOSTlineAsyncColl
NSK_BUSY Application Class
ListBusyDisks

Lists the busy disks on the system. The value is derived from a TCM connection.

Collector: HOSTbusyDiskColl
ListBusyProcesses

Lists all the busy Tandem NSK processes on the system. The value is derived from a TCM connection.

Collector: HOSTbusyProcColl
NSK_CHANNEL Application Class
ChannelActive

Indicates whether a channel is active.

This parameter is set during the execution of all collectors that use channels for communication (i.e. RCF or TCM collectors).
NSK_CP6100 Application Class
Errors

Reports the number of CP6100 communication line errors occurring each second.

Collector: HOSTlineCP6100Coll
LineState

Indicates whether the CP6100 line is available.

Collector: HOSTlineCP6100Coll
ReceiveRate

Reports the volume of incoming data per second.

Collector: HOSTlineCP6100Coll
Retries

Reports the total number of data retransmission attempts if the line is down.

Collector: HOSTlineCP6100Coll
SendRate

Reports the volume ofoutgoing data per second.

Collector: HOSTlineCP6100Coll
NSK_CPU Application Class
AverageQueueLength

Displays the average CPU queue length, which is calculated as change in queue length over the collection interval. The value is derived from an RCF connection.

Collector: HOSTcpuColl
CPUBusy

Displays the percentage of time that the processor is busy over the collection interval.
When an alarm threshold is exceeded, the data point on the CPUBusy chart will be annotated with the ListBusyProcesses parameter details from the NSK_BUSY application class.The value is derived from an RCF connection.

Collector: HOSTcpuColl
CPUstate

Indicates whether the CPU is available. The value is derived from an RCF connection.

Collector: HOSTcpuColl
DispatchRate

Displays the rate that processes are selected from the Ready list and executed. The value is derived from an RCF connection.

Collector: HOSTcpuColl
FreeLowPinPCBs

Displays the number of available low-pin process control blocks. The value is derived from an RCF connection.

Collector: HOSTcpuColl
FreePCBs

Displays the number of available process control blocks. The value is derived from an RCF connection.

Collector: HOSTcpuColl
FreeTLEs

Displays the number of unused time list elements. The value is derived from an RCF connection.

Collector: HOSTcpuColl
MemoryFreePages

Displays the number of memory pages available. The value is derived from an RCF connection.

Collector: HOSTcpuColl
MemoryPageSwapRate

Reports the memory swap rate per second. The value is derived from an RCF connection.

Collector: HOSTcpuColl
NSK_DISK Application Class
DiskRate

Displays the rate of reads and writes that are performed by the disk process per second. The value is derived from a TCM connection.

Collector: HOSTdiskColl
DiskState

Indicates the accessibility of the disk. The value is derived from an RCF connection.

Collector: HOSTdiskColl
FreeExtents

Reports the number of pages of available extents on the disk. The value is derived from an RCF connection.

Collector: HOSTdiskColl
IORequests

Displays the number of input and output requests received per second by the disk process. This parameter does not take into consideration whether the requests resulted in a successful read or write. The value is derived from a TCM connection.

Collector: HOSTdiskColl
LargestAvailableExtent

Reports the largest free contiguous extent on the disk. The value is derived from an RCF connection.

Collector: HOSTdiskColl
PercentBusy

Displays the percentage of time that the disk is busy. The value is derived from a TCM connection.

Collector: HOSTdiskColl
PercentFree

Displays the percentage of disk space that is available. The value is derived from an RCF connection.

Collector: HOSTdiskColl
PercentFull

Displays the percentage of disk space that is used. The value is derived from an RCF connection.

Collector: HOSTdiskColl
ReadBusy

Displays the percentage of time that the disk process spent reading. The value is derived from a TCM connection.

Collector: HOSTdiskColl
WriteBusy

Displays the percentage of time that the disk process spent writing. The value is derived from a TCM connection.

Collector: HOSTdiskColl
NSK_EMS Application Class
RecoveryStatus

Starts the recovery script and displays the status of an EMS recovery action. Recovery action scripts are tied to the warning value of 1. After the action runs, the status value will either become 0 if the action is successful or become 2 if it fails and enters an alarm state.

Collector: HOSTemsColl
EventDetails

Displays details for each recovery event. These stored details are used by the script to execute EMS recovery actions.

Collector: HOSTemsColl
RecovExecOutput

Displays the output of an EMS event recovery action.

Collector: HOSTemsColl
NSK_ENVOY Application Class
Errors

Reports the number of Envoy communication line errors occurring each second.

Collector: HOSTlineEnvoyColl
LineState

Indicates whether the Envoy line is available.

Collector: HOSTlineEnvoyColl
ReceiveRate

Reports the volume of incoming data per second.

Collector: HOSTlineEnvoyColl
Retries

Reports the total number of the number of data retransmission attempts if the line is down.

Collector: HOSTlineEnvoyColl
SendRate

Reports the volume ofoutgoing data per second.

Collector: HOSTlineEnvoyColl
NSK_EXPAND Application Class
Errors

Reports the number of Expand communication line errors occurring each second.

Collector: HOSTlineExpandColl
FramesDropped

Reports the number of frames dropped per second.

Collector: HOSTlineExpandColl
LineState

Indicates whether the Envoy line is available.

Collector: HOSTlineExpandColl
ReceiveDataRate

Reports the volume of incoming data per second.

Collector: HOSTlineExpandColl
ReceiveFrameRate

Reports the number of incoming frames per second.

Collector: HOSTlineExpandColl
SendDataRate

Reports the volume ofoutgoing data per second.

Collector: HOSTlineExpandColl
SendFrameRate

Reports the number ofoutgoing frames per second.

Collector: HOSTlineExpandColl
NSK_FILE Application Class
AvailableFileExtents

Reports the number of unallocated file extents. The value is derived from an RCF connection.

Collector: HOSTfileColl
BrokenState

Indicates that the file has the broken attribute. The value is derived from an RCF connection.

Collector: HOSTfileColl
CorruptState

Indicates that the file has the corrupt attribute. The value is derived from an RCF connection.

Collector: HOSTfileColl
CrashopenState

Indicates that the file has crashed while it was open. The value is derived from an RCF connection.

Collector: HOSTfileColl
FileToDiskExtentSizeRatio

Displays the ratio of the files secondary extent size to the largest disk fragment. The value is derived from an RCF connection.

Collector: HOSTfileColl
GrowthRateKb

Reports the change in file size since the last time data was collected. If the file size has been reduced, the number will be negative. If the file size is larger, the number will be positive. The value is derived from an RCF connection.

Collector: HOSTfileGrowthColl
GrowthRatePercent

Displays the percentage of file size change since the last time data was collected. If the file size has been reduced, the percent will be less than 0. If the file size is larger, the percent will be greater than 0. The value is derived from an RCF connection.

Collector: HOSTfileGrowthColl
PercentFull

Displays the percentage of the file that is full. The value is derived from an RCF connection.

Collector: HOSTfileColl
RollforwardState

Indicates that the file has been rolled forward since the last time data was collected. The value is derived from an RCF connection.

Collector: HOSTfileColl
NSK_FILE_GROUP Application Class
There are no parameters associated with the NSK_FILE_GROUP application. All monitoring occurs in the background.
NSK_HOST Application Class
HOSTbusyDiskColl

Gathers data and updates the ListBusyDisks consumer parameter for the NSK_BUSY application.
HOSTbusyProcColl

Gathers data and updates the ListBusyProcesses consumer parameter for the NSK_BUSY application.
HOSTchanColl

Monitors all channels. Blocked channels that do not respond within 3 invocations of the script will be closed and restarted. Channels with no matching instances will have instances created for them. Channel instances with no matching channels will have channels created for them.
HostConnectionState

Collector: Displays the state of the RCF connection to the host. The state is updated each time RCF data collection occurs. Also, a separate collection script periodically issues a heartbeat or echo request to check that the host is accessible and then updates the HostConnectionState parameter.
HOSTcpuColl

Gathers data and updates the consumer parameters for the instances in the NSK_CPU application.
HOSTdiskColl

Gathers data and updates the consumer parameters for the instances in the NSK_DISK application.
HOSTemsColl

Collects EMS events selected using rules and creates matching PATROL events. These events are then displayed in the Event Manager window. This parameter also creates NSK_EMS recovery instances for received EMS events that match a recovery rule and then updates NSK_EMS consumer parameters for those instances. The update will trigger the recovery action for the NSK_EMS instance.
HOSTfileColl

Gathers data and updates the consumer parameters for specific instances in the NSK_FILE application. It destroys any instance added by the HOSTfileGroupColl that no longer exceeds the threshold.
HOSTfileGroupColl

Checks each file Group for any file that exceeds a threshold. The thresholds are: Percentful, ExtentsAvailable, ExtentSizeRatio, and File state. All files that exceed these thresholds are added to the NSK_FILE application and monitored individually.
HOSTfileGrowthColl

Collects the current file size of selected files and updates GrowthRatePercent and GrowthRate KB in the NSK_FILE application.
HOSTheartBeatColl

Periodically issues a heartbeat or echo request to check that the host is accessible and then updates the HostConnectionState parameter.
HOSTipColl

Collects data and updates the consumer parameters for the IP communication line instances in the NSK_TCPIP KM under the NSK_COMM group.
HOSTlineAsyncColl

Collects data and updates the consumer parameters for the Async communication line instances in the NSK_ASYNC KM under the NSK_COMM group.
HOSTlineCP6100Coll

Collects data and updates the consumer parameters for the CP6100 communication line instances in the NSK_CP6100 KM under the NSK_COMM group.
HOSTlineEnvoyColl

Collects data and updates the consumer parameters for the Envoy communication line instances in the NSK_ENVOY KM under the NSK_COMM group.
HOSTlineExpandColl

Collects data and updates the consumer parameters for the Expand communication line instances in the NSK_EXPAND KM under the NSK_COMM group.
HOSTlineX25Coll

Collects data and updates the consumer parameters for the X25 communication line instances in the NSK_X25 KM under the NSK_COMM group.
HOSTprocBadStateColl

Gathers data for all processes that are looping, suspended, or in debug. Each instance is added to the NSK_PROCESS application.
HOSTprocColl

Gathers data and updates the consumer parameters for specific instances in the NSK_PROCESS application. It destroys any instance added by the HOSTbusyProcColl, HOSTprocGroupColl, and HOSTprocBadStateColl that no longer exceed a threshold.
HOSTprocGroupColl

Gathers data and updates the consumer parameters for the NSK_PROCESS_GROUP application.
HOSTrestartRequired

Runs a recovery action to collect the majority of the monitored NonStop HImalaya host data after the PATROL Agent initializes its memory for the NonStop KMs (if, for example, the Agent is stopped). The NSK_HOST application discovery script sets the value of this consumer parameter to start the recovery action.
HOSTspoolerColl

Gathers data and updates the consumer parameters for the instances in the NSK_SPOOLER application.
HOSTtcpColl

Gathers data and updates the consumer parameters for the TCP communication line instances in the NSK_TCPIP KM under the NSK_COMM group.
HOSTtmfAuditColl

Gathers data and updates the AudittrailPercentFull, HungTransaction, and RolloverRequired consumer parameters in the NSK_TMF application.
HOSTtmfColl

Gathers data and updates the consumer parameters for the NSK_TMF application.
HOSTudpColl

Gathers data and updates the consumer parameters for the UDP communication line instances in the NSK_TCPIP KM under the NSK_COMM group.
NSK_PROCESS Application Class
PercentBusy

Displays the percentage of time that the process is busy. The value is derived from an RCF connection.

Collector: HOSTprocColl
ProcessDesc

Displays the description of the process. The description contains the Process Identifier (PID), the Priority, Memory usage, Owner, Wait State, Hometerm, Object, Process Time, and Create Time. The value is derived from an RCF connection.

Collector: HOSTprocColl
ProcessState

Indicates the current state of a process in the process group. The value is derived from an RCF connection.

Collector: HOSTprocColl
SwapRate

Displays the memory swap faults per second for the process. The value is derived from an RCF connection.

Collector: HOSTprocColll
NSK_PROCESS_GROUP Application Class
AcceptableVolatility

Indicates whether the current volatility of the number of processes being monitored is at an acceptable level. A checkmark means okay; an X means not okay. (The current process count is measured against the number of processes when the group was first added. The difference is then compared to the Count Volatility number to determine whether the volatility is acceptable.) The value is derived from an RCF connection.

Collector: HOSTprocGroupColl
CPUUtilizationSummary

Displays the utilization of each CPU within the process group. The value is derived from an RCF connection.

Collector: HOSTprocGroupColl
CurrentProcessCount

Reports the number of processes in the process group. The value is derived from an RCF connection.

Collector: HOSTprocGroupColl
MaxProcessCount

Reports the largest number of processes that have occurred in the process group. The value is derived from an RCF connection.

Collector: HOSTprocGroupColl
ProcessCountVolatility

Reports the change in the number of processes in the process group. The value is derived from an RCF connection.

Collector: HOSTprocGroupColl
ProcessDetail

Displays memory consumption, object name, and owner for each process in the group.

Collector: HOSTprocGroupColl
SystemCPUUtilization

Displays the percentage of the system CPUs that the process group is using. The value is derived from an RCF connection.

Collector: HOSTprocGroupColl
NSK_SPOOLER Application Class
CollectorState

Indicates whether the collector is currently collecting data. The value is derived from an RCF connection.

Collector: HOSTspoolerColl
PercentFull

Displays the percentage of the spooler collector that is used. The value is derived from an RCF connection.

Collector: HOSTspoolerColl
TotalNumberOfJobs

Reports the total number of jobs in the spooler collector.

Collector: HOSTspoolerColl
NSK_TCPIP Application Class
IPPacketsBad

Reports the number of IP packet errors occurring per second.

Collector: HOSTipColll
IPPacketsIn

Reports the number of incoming IP packets per second.

Collector: HOSTipColl
IPPacketsOut

Reports the number of outgoing IP packets per second.

Collector: HOSTipColl
TCPPacketsDropped

Reports the number of TCP connections dropped per second.

Collector: HOSTtcpColl
TCPPacketsIn

Reports the number of incoming TCP packets per second.

Collector: HOSTtcpColl
TCPPacketsOut

Reports the number of outgoing TCP packets per second.

Collector: HOSTtcpColl
TCPPacketsRetransmitted

Reports the number of TCP packets that have been retransmitted per second.

Collector: HOSTtcpColl
UDPPacketsBad

Reports the number of UDP packet errors occurring per second.

Collector: HOSTudpColl
UDPPacketsDropped

Reports the number of UDP connections dropped per second.

Collector: HOSTudpColl
UDPPacketsIn

Reports the number of incoming UDP packets per second.

Collector: HOSTudpColl
UDPPacketsOut

Reports the number of outgoing UDP packets per second.

Collector: HOSTudpColl
NSK_TMF Application Class
AudittrailPercentFull

Displays the percent full for the current audit trail file.

Collector: HOSTtmfColl
HungTransaction

Displays whether or not a TMF transaction is hung.

Collector: HOSTtmfColl
LocalTransRate

Displays the number of local transactions generated per second. The value is derived from a TCM connection.

Collector: HOSTtmfColl
NetworkTransRate

Displays the number of network transactions occurring each second. The value is derived from a TCM connection.

Collector: HOSTtmfColl
RemoteTransRate

Displays the number of remote transactions occurring each second. The value is derived from a TCM connection.

Collector: HOSTtmfColl
RolloverRequired

Indicates if the TMF audit trail file needs to be rolled over to the next audit trail file.

Collector: HOSTtmfColl
TMFstate

Indicates whether the TMF has been started. The value is derived from a TCM connection.

Collector: HOSTtmfColl
TotalTransRate

Displays the total number of transactions processed per second. The value is derived from a TCM connection.

Collector: HOSTtmfColl
NSK_X25 Application Class
InvalidPackets

Reports the number of invalid X25 packets received each second.

Collector: HOSTlineX25Coll
LineState

Indicates whether the X25 line is available.

Collector: HOSTlineX25Coll
PacketReceivedRate

Reports the number of incoming X25 packets per second.

Collector: HOSTlineX25Coll
PacketSentRate

Reports the number of outgoing X25 packets per second.

Collector: HOSTlineX25Coll

    















PATROL for DB2 Universal Database 6.4.20


Table 9 PATROL for DB2 Universal Database 6.4.20
Parameter



DB2_AGENT Application Class in DB2 UDB EE

DB2EEE_AGENT_PARAM and DB2EEE_SUBAGENT Application Classes in DB2 UDB EEE
ApplCommitsAttempted

Indicates the average number of SQL COMMIT statements that have been attempted for a particular application.

Collector: CollAgent
ApplDDLExec

Indicates the average number of SQL Data Definition Language (DDL) statements that have been executed for a particular application.

Collector: CollAgent
ApplIdleTime

(in DB2_AGENT and DB2EEE_AGENT only)

Indicates application idling time in minutes. Requires the STATEMENT monitor switch to be turned on.

Collector: CollAgent
ApplIntDeadlockRollbacks

Indicates the number of rollbacks that were initiated by the database manager because of deadlock for the selected application.

Collector: CollAgent
ApplRollbacksAttempted

Indicates the average number of SQL ROLLBACK statements that have been attempted for a particular application.

Collector: CollAgent
ApplSelectsExec

Indicates the average number of SQL SELECT statements that have been executed for a particular application.

Collector: CollAgent
ApplTotThroughput

Indicates the number of successful SQL statements processed for the selected application.

Collector: CollAgent
ApplTotUOW

Indicates the number of units of work for the selected application.

Collector: CollAgent
ApplUpdInsDelExec

Indicates the average number of SQL UPDATE, INSERT, and DELETE statements that have been executed for a particular application.

Collector: CollAgent
AveApplSortTime

Indicates the average time required for each sort that has been executed on behalf of the selected application.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
AveApplWaitForLock

Indicates the average amount of time that the selected application waited for locks.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
CpuUtilPct

Indicates the percentage of total CPU time used by the database manager agent process associated with the selected application.



Collector: CollAgent
CtlgCacheHitRatio

(in UDB-EEE only)

Indicates the percentage of catalog references that did not require a catalog access.

Collector: CollAgent
CurrLockWaitTime

Indicates the amount of time that has passed since the selected application began waiting on a lock.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

(*No default thresholds are set for DB2EEE-SUBAGENT.)

Collector: CollAgent
DurationCurrUOW

Indicates the length of time the current unit of work (UOW) has been running for the selected application.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
DurationMostRecentUOW

Indicates the length of time it took the most recent unit of work to complete for the selected application.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
NumApplDeadlocks

Indicates the number of deadlocks that have occurred for the selected application.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
NumApplExclLockEscals

Indicates the number of times that several row locks have been escalated to one exclusive table lock, or the number of times an exclusive row lock forced the table lock to become an exclusive lock for the selected application.

Collector: CollAgent
NumApplLockEscals

Indicates the number of times that several row locks have been escalated to a table lock for the selected application.

Collector: CollAgent
NumApplLockTimeouts

Indicates the number of times that a lock request on behalf of the selected application timed out.

Collector: CollAgent
PctApplmaxlocksHeld

Indicates the percentage of allowed locks that the selected application is holding.

Collector: CollAgent
PctApplOverflowSortReqs

Indicates the percentage of sorts for the selected application that ran out of sort heap and required disk space for temporary storage purposes.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
PctBlkOpenLocCursors

Indicates the percentage of local blocking cursors currently open for a particular application.

Collector: CollAgent
PkgCacheHitRatio

(in DB2 UDB EEE only)

Indicates the percentage of times an application found a section or package in the package cache without causing it to be loaded.

Collector: CollAgent
RowsReadByAppl

Indicates the average number of data rows read for the selected application.

Collector: CollAgent
RowsWrittenByAppl

Indicates the average number of data rows that have been written by the selected application.

Collector: CollAgent
SystemCPUTimebyAgent

Indicates the total system CPU time used by the database manager agent process associated with the selected application.

Collector: CollAgent
SystemCPUTimebyStmt

Indicates the total system CPU time used by the statement currently executing.

The STATEMENT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
TimeBtwnRecentCommRbkPts

Indicates the total elapsed time between the most recent COMMIT/ROLLBACK points for the selected application.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
UOWLockWaitTime

Indicates the total amount of time the current unit of work has spent waiting for locks.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
UOWLogSpaceUsed

Indicates the amount of log space the current unit of work is using.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
UserCPUTimebyAgent

Indicates the total user CPU time used by the database manager agent process associated with the selected application.

Collector: CollAgent
UserCPUTimebyStmt

Indicates the total user CPU time used by the current statement for the selected application.

The STATEMENT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
DB2_DIAGLOG Application Class in DB2 UDB EE

DB2EEE_DIAGLOG Application Class in DB2 UDB EEE
DiagLogFSFreeSpace

Indicates the amount of free space that is available on the file system where the DB2 diagnostic logs reside.

Collector: CollDiaglog
DiagLogFSPctUsed

Indicates the percentage of the file system used where the DB2 diagnostic logs reside.

Collector: CollDiaglog
DiagLogOK

Determines whether any configured keywords have been written to the diagnostic log.

Collector: CollDiaglog
DiagLogSize

Indicates the current size of the DB2 diagnostic log.

Collector: CollDiaglog
DiagLogTime

Indicates the number of minutes since the DB2 diagnostic log was last updated.

Collector: CollDiaglog
DB2_DB_CMDS Application Class in DB2 UDB EE

DB2EEE_DB_CMDS Application Class in DB2 UDB EEE
CommandInfo

This is a text parameter that is used to inform the user about an in-progress activity taking place with the database.
DB2_PARAM Application Class in DB2 UDB EE

DB2EEE_PARAM and DB2EEE_NODE Application Classes in DB2 UDB EEE
AgentsRegd

Indicates the number of agents the monitored instance of the DBM currently has registered (includes coordinator agents and subagents). This parameter, along with the MaxagentsRegd parameter, can be used to determine the proper setting of the MAXAGENTS configuration parameter.

Collector: CollInstance
ARATest

Tests the recovery action configuration. This parameter does not monitor or measure anything on a DB2 instance. The test automatically resets ARATest to an OK status.
ChannelFailures

Indicates the number of consecutive channel failures through the local channel that have occurred for a particular PATROL for DB2 channel associated with a selected DB2 instance.

Collector: CollInstance
CheckConfig

(in DB2_PARAM and DB2EEE_PARAM only)

Monitors default account user name and password information for a DB2 instance. All parameters monitoring the DB2 instance use the default account information to discover and monitor DB2 resources.

Warning: If an alarm occurs because of invalid account information, the parameters will not collect data and PATROL for DB2 UDB will not monitor your DB2 instance.
CommittedPrivateMem

Indicates the amount of private virtual memory currently committed by an instance of the database manager.

Collector: CollInstance
DB2AllServersOK

(in DB2EEE_PARAM only)

Indicates whether all database managers for the instance on all nodes are running.

Collector: CollInstance
DB2ServerOK

(in DB2_PARAM and DB2EEE_NODE only)

Indicates the state of the DB2 main server process; optionally notifies a user when this process is terminated.

Collector: CollInstance
FCMBufferPoolUtil

(in DB2 UDB EEE only)

Indicates the percentage of buffers being used by databases to communicate internally on the node.

Collector: CollInstance
FCMConnEntryUtil

(in DB2 UDB EEE only)

Indicates the percentage of FCM connection entries being used at the node.

Collector: CollInstance
FCMMsgAnchorUtil

(in DB2 UDB EEE only)

Indicates the percentage of FCM message anchors being used by Agents to exchange messages.

Collector: CollInstance
FCMReqBlockUtil

(in DB2 UDB EEE only)

Indicates the percentage of Fast Communication Manager (FCM) request blocks being used.

Collector: CollInstance
KMSocketsOK

(in DB2EEE_PARAM only)

Indicates whether the sockets communications the KM uses to communicate to all the DB2 nodes are running successfully.

Collector: CollInstance
LocConnExecInDBM

Indicates the number of local applications that are currently connected to a local database (within the monitored DB2 DBM instance) that are currently processing a unit of work.

Collector: CollInstance
LocConnectsToDBM

Indicates the number of local applications that are currently connected to a local database within the database instance that is being monitored.

Collector: CollInstance
MaxAgentsRegd

Indicates the maximum number of agents that the monitored instance of the Database Manager has registered concurrently since it was started.

Collector: CollInstance
MaxAgentsWaiting

Indicates the maximum number of database agents that have been waiting for a token at the same time since the monitored instance of the Database Manager was started.

Collector: CollInstance
MaxCoordAgents

(in DB2 UDB EEE only)

Indicates the maximum number of coordinating agents that can exist at one time on the node.

Collector: CollInstance
NumIdleAgents

Indicates the number of database agents in the agent pool associated with the monitored DB2 DBM instance that are currently unassigned to an application.

Collector: CollInstance
PctActiveFCMConns

(in DB2EEE_NODE only)

Indicates the percentage of nodes with an active communication connection.

Collector: CollInstance
PctAgentsFromPool

(in DB2EEE_NODE only)

Indicates the percentage of agents assigned from the agent pool.

Collector: CollInstance
PctAgentsIdle

Indicates the percentage of idle agents in the monitored instance of the DBM. This parameter, along with the NumIdleAgents parameter, can be used to determine the proper setting of the Num_PoolAgents configuration parameter.



Collector: CollInstance
PctAgentsRegd

Indicates the percentage of registered agents in the monitored instance of the DBM. This parameter, along with the MaxagentsRegd and AgentsRegd parameter, can be used to determine the proper settins of the MAXAGENTS configuration parameter.



Collector: CollInstance
PctAgentsWaitForTkn

Indicates the percentage of database agents waiting for a token before executing a transaction in the database manager.

Collector: CollInstance
PctPipedSortReqsAcc

Indicates the percentage of piped sort requests that have been accepted since the database instance started or since the last time the DB2 monitor was reset.

Collector: CollInstance
PostThreshSorts

Indicates the number of sorts that have requested heaps after the sort heap threshold has been reached.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollInstance
ProblemDB2Agents

(in DB2_PARAM and DB2EEE_PARAM only)

Indicates the status of all agents and subagents running in an instance and provides annotated data identifying any agent or subagent in an alert state.



Collector: CollAgent
RemConnectsToDBM

Indicates the total number of current connections initiated from remote clients to the database instance that is being monitored.

Collector: CollInstance
RemConnExecInDBM

Indicates the number of remote applications that are currently connected to a database within the database instance being monitored and that are currently processing a unit of work.

Collector: CollInstance
TotSortHeapAlloc

Indicates the total number of memory pages allocated for all sorts in progress for the selected database instance.

Collector: CollInstance
UpdateAgentAppFiles

(in DB2_PARAM and DB2EEE_PARAM only)

Collects information that correlates each DB2 application with the DB2 agent or agents monitoring that application.

Collector: CollInstance
DB2_TSP Application Class in DB2 UDB EE

DB2EEE_TSP Application Class in DB2 UDB EEE
PctPagesUsed

Indicates the percentage of tablespace pages that are used. For DMS tablespaces, the parameter calculates the percentage of preallocated space that is used. For SMS tablespaces, the parameter calculates the percentage of space used by the tablespace containers on the filesystems. Recovery action upon alarm is available.

Collector: CollTablespace
PhyReads

Reports the total number of physical reads performed per second on the monitored table space during the previous polling interval.

Collector: CollTablespace
PhyWrites

Reports the total number of physical writes performed per second on the monitored table space during the previous polling interval.

Collector: CollTablespace
SpaceLeft

Indicates the amount of free space in the selected table space.

Collector: CollTablespace
TblspState

Indicates the state of the selected table space as a numerically hexadecimal number (where 0 Indicates a normal state).

Collector: CollTablespace
DB2UDB_BUFFERPOOL Application Class in DB2 UDB EE

DB2EEE_BP_NODE and DB2EEE_BUFFERPOOL (where noted) Application Class in DB2 UDB EEE
AveDirReadTime

Indicates the average amount of time required to read a sector of data from disk at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveDirWriteTime

Indicates the average amount of time required to write a sector of data to disk at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveNumPgsReadPerAsyncReq

Indicates the average number of data pages that have been read by asynchronous read requests at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveNumSectorsRead

Indicates the average number of sectors read by a direct read request at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveNumSectorsWritten

Indicates the average number of sectors written by a direct write request at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePgCleanWriteTime

Indicates the average asynchronous write time that is required by the Database Manager page cleaners each time data is written from the buffer pool to disk.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePgReadTime

Indicates the average amount of time required to read a data or index page from the physical disk to the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePgWriteTime

Indicates the average amount of time required to write a data or index page from the buffer pool to the physical disk.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePrefetchReadTime

Indicates the average asynchronous read time required by the Database Manager prefetchers each time data is read from disk into the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveSyncBPReadTime

Indicates the average amount of time that is required for a particular synchronous read of data from the disk to the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPDataPgCleanEff

Indicates the ratio of asynchronous data writes to synchronous data writes.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPDataWriteReadRatio

Indicates the number of data reads requiring page-ins to the buffer pool that cause writes (page-outs) to disk.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPIndxPgCleanEff

Indicates the ratio of asynchronous index writes to synchronous index writes.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPIndxWriteReadRatio

Indicates the ratio of the number of times a buffer pool index page is physically written to disk to the number of read requests required to read index pages into the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BufferPoolHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of data and index reads that did not require access to the physical disk because the data was already loaded in the cached memory buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
DataPgHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of data reads that did not require physical disk access.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
DBPrefetchEffRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the ratio of asynchronous data reads to synchronous data reads.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollInstance
IndxPgHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of index reads that did not require physical disk access.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
SyncBPHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of synchronous buffer pool accesses which resulted in requests for data which did not require a disk access.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
DB2UDB_COLLECTORS Application Class in DB2 UDB EE

DB2EEE_COLLECTORS Application Class in DB2 UDB EEE
CollAgent

Collects information and provides the values to the consumer parameters for monitoring DB2 agents and applications associated with those agents.
CollBufferpool

Collects information and provides the values to the consumer parameters for monitoring DB2 buffer pools.
CollConnToDB

Collects information for the ConnToDBOK parameter.
CollDatabase

Collects information and provides the values to the consumer parameters for monitoring DB2 databases.
CollDiaglog

Collects information and provides the values to the consumer parameters for monitoring the DB2 diagnostic log.
CollInstance

Collects information and provides the values to the consumer parameters for monitoring DB2 instances.
CollPerformance

Collects performance data for monitoring databases and provides the values to the consumer parameters in the DB2DB_PERFORMANCE (or DB2EEE_PERFORMANCE) application class that are activated when Advanced Performance Monitoring is configured.
CollTablespace

Collects information and provides the values to the consumer parameters for monitoring DB2 table spaces.
DB2DB_CAPACITY Application Class in DB2 UDB EE

DB2EEEDB_NODE_CAPACITY and DB2EEE_DB_PARAM Application Classes (where noted) in DB2 UDB EEE
AppsConnToDB

(also in DB2EEE_DB_PARAM)

Indicates the number of applications that are currently connected to the monitored database.

Collector: CollAgent
AveSortHeapUsed

(also in DB2EEE_DB_PARAM)

Indicates the average number of sort heap pages allocated for each currently active sort.

Collector: CollDatabase
ConnToDBOK

The ConnToDBOK parameter attempts to connect to the database. If the connection is unsuccessful, DB2 returns an SQL message. The value fo ConnToDBOK is set toeither WARN or ALARM depending on the SQL message returned. By default, the parameter warns on the following messages: SQL1116N, SQL1032N, SQL1035N.

Collector:CollConnToDB
DatabaseSize

(also in DB2EEE_DB_PARAM)

In DB2DB_CAPACITY, DatabaseSize is a standard parameter and indicates the sum of used pages by all the tablespace containers for the database. Poll time is 3 hours. In DB2EEE_DB_PARAM, DatabaseSize is a standard parameter and indicates the size of the database for all nodes. Poll time is 3 hours. In DB2EEEDB_NODE_CAPACITY, DatabaseSize is a consumer parameter and indicates the size of the database of the current node. Poll time is not applicable.
DBSortHeapAlloc

(also in DB2EEE_DB_PARAM)

Indicates the total number of memory pages currently allocated for the sort heap for all sorts in the selected database.

Collector: CollDatabase
MaxDBHeapAlloc

Indicates the largest portion of database heap that has been allocated and used by the database since the first application connection. Not available for versions later than 6.1 of DB2 Universal Database.

Collector: CollDatabase
MaxNumConcDBConns

(also in DB2EEE_DB_PARAM)

Indicates the maximum number of simultaneous connections that have occurred to the monitored database since the first application connected to it.

Collector: CollDatabase
MaxPctDBHeapUsed

Indicates the largest percentage of database heap used by the database since the first application connected to the database. Not available

for versions later than 6.1 of DB2 Universal Database.

Collector: CollPerformance
PctAppsConnUsed

Indicates the percentage of applications that are connected to the database being monitored.

Collector: CollDatabase
DB2DB_LOCK Application Class in DB2 UDB EE

DB2EEEDB_NODE_LOCK and DB2EEE_DB_PARAM Application Classes (where noted) in DB2 UDB EEE
AveWaitForLock

(also in DB2EEE_DB_PARAM)

Indicates the average amount of time that any application running against the database spent waiting before a lock request was granted.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
Deadlocks

(in DB2DB_LOCK and DB2EEE_DB_PARAM only)

Displays information about the deadlocks that have occurred for the database being monitored. You cannot monitor this parameter for a remote database.
NumDeadlocks

(also in DB2EEE_DB_PARAM)

Indicates the total number of deadlocks that have occurred since the first application connected to the database being monitored.

Collector: CollDatabase
NumExclLockEscals

Indicates the number of times that row locks have been escalated to one exclusive table lock, or the number of times an exclusive row lock forced a table lock to become an exclusive lock.

Collector: CollDatabase
NumLockEscals

Indicates the number of times that row locks have been escalated to a table lock, including exclusive lock escalations.

Collector: CollDatabase
NumLocksHeld

Indicates the number of locks held by all applications in a particular database.

Collector: CollDatabase
NumLocksRemaining

Indicates the total number of locks remaining to be granted to applications connected to the database being monitored.

Collector: CollDatabase
NumLockTimeouts

Indicates the number of times a request to lock a database object timed out instead of being granted.

Collector: CollDatabase
PctAppsWaitingOnLocks

Indicates the percentage of applications currently waiting on locks that are connected to the database being monitored.

Collector: CollDatabase
PctDBLocklistUsed

(also in DB2EEE_DB_PARAM)

Indicates the percentage of the monitored databases locklist memory currently in use.

Collector: CollDatabase
PctLockedOutDBConns

Indicates the percentage of applications that are currently waiting on locks. This parameter indicates the degree of lock concurrency for the current set of applications and therefore can help determine the correct setting for the maxcagents DBM configuration parameter as well as the locklist and maxlocks DB configuration parameters.

Collector: CollDatabase
DB2DB_LOG Application Class in DB2 UDB EE

DB2EEEDB_NODE_LOG Application Class in DB2 UDB EEE
LogFSFreeSpace

Indicates the amount of free space that is available on the file system where the DB2 logs reside. You cannot monitor this paramter for a remote database.

Collector: CollDatabase
LogFSPctUsed

Indicates the percentage of the file system used where the DB2 logs reside. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
MaxPrimaryLogSpUsed

Indicates the maximum amount of primary log space being used.

Collector: CollDatabase
MaxSecLogSpaceUsed

Indicates the maximum amount of secondary log space being used.

Collector: CollDatabase
MaxTotLogSpaceUsed

Indicates the maximum amount of total log space being used, including both primary and secondary log files.

Collector: CollDatabase
PctPrmryLogSpUsed

Indicates the largest percentage of the monitored databases primary log space that is being used.

Collector: CollDatabase
PctSecLogsAlloc

Indicates the percentage of the monitored databases secondary log space currently being used.

Collector: CollDatabase
PctTotalLogSpUsed

Indicates the percentage of active log space in the database that is used. Not valid for DB2 v 5.0.

Collector: CollDatabase
PrimaryLogSpaceAlloc

Indicates the amount of the monitored databases primary log space that is currently allocated.

Collector: CollDatabase
SecLogSpaceAlloc

Indicates the amount of the monitored databases secondary log space that is currently allocated.

Collector: CollDatabase
TotalLogSpAvail

Indicates the total amount of active log space in the database that is not being used. Not valid for DB2 v 5.0.

Collector: CollDatabase
TotalLogSpUsed

Indicates the total amount of active log space in the database that is currently being used.

Collector: CollDatabase
DB2DB_PERFORMANCE Application Class in DB2 UDB EE

DB2EEEDB_NODE_PERFORMANCE and DB2EEE_DB_PARAM Application Classes (where noted) in DB2 UDB EEE
AveDirReadTime

(also in DB2EEE_DB_PARAM)

Indicates the average amount of time required to read a sector of data from disk at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveDirWriteTime

(also in DB2EEE_DB_PARAM)

Indicates the average amount of time required to write a sector of data to disk at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveElapsedTime

(also in DB2EEE_DB_PARAM)

Indicates the running average of elapsed CPU time during SQL processing for a monitored database. Advanced Performance Monitoring must be configured. You cannot monitor this parameter for a remote database.

Collector: CollPerformance
AveNumSectorsRead

Indicates the average number of sectors read by a direct read request at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveNumSectorsWritten

Indicates the average number of sectors written by a direct write request at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveSortTime

(also in DB2EEE_DB_PARAM)

Indicates the average elapsed time spent per database sort.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
CtlgCacheHitRatio

Indicates the percentage of catalog references that did not require a catalog access (has a default value of 100).

Collector: CollAgent
DBFilesClosed

Indicates the total number of database files closed. The actual number of files opened may not equal the number of files that were closed. The BUFFERPOOL DB2 Monitor Switch must be set to ON to make this paramter active and collect data.

Collector: CollDatabase
ElapsedTime

(also in DB2EEE_DB_PARAM)

Indicates the amount of elapsed time during SQL processing associated with a selected database. Advanced Performance Monitoring must be configured. You cannot monitor this parameter for a remote database.

Collector: CollPerformance
PkgCacheHitRatio

Indicates the percentage of times an application found a section or package in the package cache without causing it to be loaded.

Collector: CollAgent
PctOverflowSortReqs

(also in DB2EEE_DB_PARAM)

Indicates the percentage of sorts for the selected database that did not have enough sort heap allocated and that required temporary disk space for storage purposes.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
ResponseExecTime

(also in DB2EEE_DB_PARAM)

Reports the amount of time required to execute the response.sql file located in the $PATROL_HOME/../db2 directory. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
TableSpaceIO

Monitors I/O time for a specified list of table spaces, indicating which table spaces are busier than others.

TableSpaceIO needs to be configured and started. TableSpaceIO also requires that the BUFFERPOOL monitoring switch be ON and table space discovery enabled.

The parameter value is text annotated with each data point. The text contains a sorted list of table space names and their associated I/O times, with the busiest table space being at the top.

Collector: CollTablespace
TotThroughput

Indicates the total number of SQL statements that have been performed successfully against the selected database.

Collector: CollDatabase
TotUOW

(also in DB2EEE_DB_PARAM)

Indicates the total number of commits and rollbacks, including internal commits and rollbacks, that have been attempted against the selected database.

Collector: CollDatabase
DB2DB_RECOVERY Application Class in DB2 UDB EE

DB2EEEDB_NODE_RECOVERY Application Class in DB2 UDB EEE
BackupCount

Indicates the number of backups in the backup directory for a database. The backup directory is the physical file where backups are stored. This parameter does not work if backups are not stored on a file system (for example, TSM backups). Multiple backups taken on the same day count as one backup. The backup directory name is set by the Configure Backup Directory Menu command which can be executed from the DB2DB_RECOVERY/ DB2EEEDB_NODE_RECOVERY application class under Backup. The parameter value is useful in determining how many backups have been taken for a database. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
BackupTime

Indicates the number of hours from the last time a backup was taken on the database. This parameter value is useful in determining the age and time of backups. As a backup ages, the value of this parameter increases with time. When a new backup is taken, the graph will show a decrease in the value. You can use the annotated data point to find out the time of the last backup.

Collector: CollDatabase
HistFSFreeSpace

Indicates the amount of free space that is available on the file system where the history logs reside. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
HistFSPctUsed

Indicates the percentage of the file system used where the history logs reside. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
IndoubtTrans

Indicates the existence of indoubt transactions in a database. This parameter receives its collected value when Indoubt Transaction Monitoring is turned ON using the menu command Start Indoubt Trans Monitor. Collecting will become inactive if the menu command Stop Indoubt Trans is issued. In addition, you can use the menu command Ack Indoubt Trans Alarm to acknowledge an active alarm indicating the existence of indoubt transactions in the database. An annotated data point is plotted with information about the transactions when indoubt transactions are detected. Start Indoubt Trans Monitor, Stop Indoubt Trans Monitor, and Ack Indoubt Trans Alarm are available from the DB2_RECOVERY/ DB2EEEDB_NODE_RECOVERY application class under Indoubt Transaction.

Collector: CollDatabase
ReorgCheck

Detects tables that are candidates for reorganization.

This parameter has a value of zero when no table needs to be reorganized. It goes into alarm with the value of 1 when there are tables that are candidates for reorganization. An annotated data point is then plotted with DB2's reorgchk information on these tables.

Collector: CollDatabase
DB2DB_SQL Application Class in DB2 UDB EE

DB2EEEDB_NODE_SQL Application Class in DB2 UDB EEE
DDLTotStmts

Indicates the ratio of SQL DDL statements to total SQL statements that have been attempted against the selected database.

Collector: CollDatabase
IntAutoRebindTotStmts

Indicates the ratio of the total number of automatic rebinds or recompiles that have been attempted to the total SQL statements attempted against the selected database.

Collector: CollDatabase
SelectTotStmts

Indicates the ratio of SQL SELECT statements to the total SQL statements that have been attempted against the selected database.

Collector: CollDatabase
UpdInsDelTotStmts

Indicates the ratio of SQL UPDATE, INSERT, and DELETE statements to total SQL statements that have been attempted against the selected database.

Collector: CollDatabase
SPACE_EXPERT_DB2 Application Class

SPACE_EXPERT_DB2_TS Application Class

SPACE_EXPERT_DB2_OBJ Application Class
find_problems

(SPACE_EXPERT_DB2 application)

Collects the information fro the parameters in the SPACE_EXPERT_DB2_OBJ and the SPACE_EXPERT_DB2_TS applications. The SPACE_EXPERT_DB2 application requires that Space Expert be installed and configured on the monitored instance. If the SPACE_EXPERT_DB2 icon is dimmed, Space Expert is not installed on the instance.
StorageProblems

(SPACE_EXPERT_DB2_OBJ application)

Lists any medium or high problems found in a table or index on the monitored instance. Low problems are included in the text of the parameter if medium or high problems are also found.
StorageProblems

(SPACE_EXPERT_DB2_TS application)

Lists any medium or high problems found in a tablespace on the monitored instance. Low problems are included in the text of the paramter if medium or high problems are also found.
StorageProblemsCnt

(SPACE_EXPERT_DB2_OBJ application)

Displays the number of tables or indexes in the configured instance with a medium or high problem.
StorageProblemsCnt

(SPACE_EXPERT_DB2_TS application)

Displays the number of tablespaces in the configured instance with a medium or high problem.















PATROL for DB2 Universal Database 6.4.20


Table 9 PATROL for DB2 Universal Database 6.4.20
Parameter



DB2_AGENT Application Class in DB2 UDB EE

DB2EEE_AGENT_PARAM and DB2EEE_SUBAGENT Application Classes in DB2 UDB EEE
ApplCommitsAttempted

Indicates the average number of SQL COMMIT statements that have been attempted for a particular application.

Collector: CollAgent
ApplDDLExec

Indicates the average number of SQL Data Definition Language (DDL) statements that have been executed for a particular application.

Collector: CollAgent
ApplIdleTime

(in DB2_AGENT and DB2EEE_AGENT only)

Indicates application idling time in minutes. Requires the STATEMENT monitor switch to be turned on.

Collector: CollAgent
ApplIntDeadlockRollbacks

Indicates the number of rollbacks that were initiated by the database manager because of deadlock for the selected application.

Collector: CollAgent
ApplRollbacksAttempted

Indicates the average number of SQL ROLLBACK statements that have been attempted for a particular application.

Collector: CollAgent
ApplSelectsExec

Indicates the average number of SQL SELECT statements that have been executed for a particular application.

Collector: CollAgent
ApplTotThroughput

Indicates the number of successful SQL statements processed for the selected application.

Collector: CollAgent
ApplTotUOW

Indicates the number of units of work for the selected application.

Collector: CollAgent
ApplUpdInsDelExec

Indicates the average number of SQL UPDATE, INSERT, and DELETE statements that have been executed for a particular application.

Collector: CollAgent
AveApplSortTime

Indicates the average time required for each sort that has been executed on behalf of the selected application.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
AveApplWaitForLock

Indicates the average amount of time that the selected application waited for locks.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
CpuUtilPct

Indicates the percentage of total CPU time used by the database manager agent process associated with the selected application.



Collector: CollAgent
CtlgCacheHitRatio

(in UDB-EEE only)

Indicates the percentage of catalog references that did not require a catalog access.

Collector: CollAgent
CurrLockWaitTime

Indicates the amount of time that has passed since the selected application began waiting on a lock.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

(*No default thresholds are set for DB2EEE-SUBAGENT.)

Collector: CollAgent
DurationCurrUOW

Indicates the length of time the current unit of work (UOW) has been running for the selected application.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
DurationMostRecentUOW

Indicates the length of time it took the most recent unit of work to complete for the selected application.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
NumApplDeadlocks

Indicates the number of deadlocks that have occurred for the selected application.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
NumApplExclLockEscals

Indicates the number of times that several row locks have been escalated to one exclusive table lock, or the number of times an exclusive row lock forced the table lock to become an exclusive lock for the selected application.

Collector: CollAgent
NumApplLockEscals

Indicates the number of times that several row locks have been escalated to a table lock for the selected application.

Collector: CollAgent
NumApplLockTimeouts

Indicates the number of times that a lock request on behalf of the selected application timed out.

Collector: CollAgent
PctApplmaxlocksHeld

Indicates the percentage of allowed locks that the selected application is holding.

Collector: CollAgent
PctApplOverflowSortReqs

Indicates the percentage of sorts for the selected application that ran out of sort heap and required disk space for temporary storage purposes.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
PctBlkOpenLocCursors

Indicates the percentage of local blocking cursors currently open for a particular application.

Collector: CollAgent
PkgCacheHitRatio

(in DB2 UDB EEE only)

Indicates the percentage of times an application found a section or package in the package cache without causing it to be loaded.

Collector: CollAgent
RowsReadByAppl

Indicates the average number of data rows read for the selected application.

Collector: CollAgent
RowsWrittenByAppl

Indicates the average number of data rows that have been written by the selected application.

Collector: CollAgent
SystemCPUTimebyAgent

Indicates the total system CPU time used by the database manager agent process associated with the selected application.

Collector: CollAgent
SystemCPUTimebyStmt

Indicates the total system CPU time used by the statement currently executing.

The STATEMENT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
TimeBtwnRecentCommRbkPts

Indicates the total elapsed time between the most recent COMMIT/ROLLBACK points for the selected application.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
UOWLockWaitTime

Indicates the total amount of time the current unit of work has spent waiting for locks.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
UOWLogSpaceUsed

Indicates the amount of log space the current unit of work is using.

The UOW DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
UserCPUTimebyAgent

Indicates the total user CPU time used by the database manager agent process associated with the selected application.

Collector: CollAgent
UserCPUTimebyStmt

Indicates the total user CPU time used by the current statement for the selected application.

The STATEMENT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollAgent
DB2_DIAGLOG Application Class in DB2 UDB EE

DB2EEE_DIAGLOG Application Class in DB2 UDB EEE
DiagLogFSFreeSpace

Indicates the amount of free space that is available on the file system where the DB2 diagnostic logs reside.

Collector: CollDiaglog
DiagLogFSPctUsed

Indicates the percentage of the file system used where the DB2 diagnostic logs reside.

Collector: CollDiaglog
DiagLogOK

Determines whether any configured keywords have been written to the diagnostic log.

Collector: CollDiaglog
DiagLogSize

Indicates the current size of the DB2 diagnostic log.

Collector: CollDiaglog
DiagLogTime

Indicates the number of minutes since the DB2 diagnostic log was last updated.

Collector: CollDiaglog
DB2_DB_CMDS Application Class in DB2 UDB EE

DB2EEE_DB_CMDS Application Class in DB2 UDB EEE
CommandInfo

This is a text parameter that is used to inform the user about an in-progress activity taking place with the database.
DB2_PARAM Application Class in DB2 UDB EE

DB2EEE_PARAM and DB2EEE_NODE Application Classes in DB2 UDB EEE
AgentsRegd

Indicates the number of agents the monitored instance of the DBM currently has registered (includes coordinator agents and subagents). This parameter, along with the MaxagentsRegd parameter, can be used to determine the proper setting of the MAXAGENTS configuration parameter.

Collector: CollInstance
ARATest

Tests the recovery action configuration. This parameter does not monitor or measure anything on a DB2 instance. The test automatically resets ARATest to an OK status.
ChannelFailures

Indicates the number of consecutive channel failures through the local channel that have occurred for a particular PATROL for DB2 channel associated with a selected DB2 instance.

Collector: CollInstance
CheckConfig

(in DB2_PARAM and DB2EEE_PARAM only)

Monitors default account user name and password information for a DB2 instance. All parameters monitoring the DB2 instance use the default account information to discover and monitor DB2 resources.

Warning: If an alarm occurs because of invalid account information, the parameters will not collect data and PATROL for DB2 UDB will not monitor your DB2 instance.
CommittedPrivateMem

Indicates the amount of private virtual memory currently committed by an instance of the database manager.

Collector: CollInstance
DB2AllServersOK

(in DB2EEE_PARAM only)

Indicates whether all database managers for the instance on all nodes are running.

Collector: CollInstance
DB2ServerOK

(in DB2_PARAM and DB2EEE_NODE only)

Indicates the state of the DB2 main server process; optionally notifies a user when this process is terminated.

Collector: CollInstance
FCMBufferPoolUtil

(in DB2 UDB EEE only)

Indicates the percentage of buffers being used by databases to communicate internally on the node.

Collector: CollInstance
FCMConnEntryUtil

(in DB2 UDB EEE only)

Indicates the percentage of FCM connection entries being used at the node.

Collector: CollInstance
FCMMsgAnchorUtil

(in DB2 UDB EEE only)

Indicates the percentage of FCM message anchors being used by Agents to exchange messages.

Collector: CollInstance
FCMReqBlockUtil

(in DB2 UDB EEE only)

Indicates the percentage of Fast Communication Manager (FCM) request blocks being used.

Collector: CollInstance
KMSocketsOK

(in DB2EEE_PARAM only)

Indicates whether the sockets communications the KM uses to communicate to all the DB2 nodes are running successfully.

Collector: CollInstance
LocConnExecInDBM

Indicates the number of local applications that are currently connected to a local database (within the monitored DB2 DBM instance) that are currently processing a unit of work.

Collector: CollInstance
LocConnectsToDBM

Indicates the number of local applications that are currently connected to a local database within the database instance that is being monitored.

Collector: CollInstance
MaxAgentsRegd

Indicates the maximum number of agents that the monitored instance of the Database Manager has registered concurrently since it was started.

Collector: CollInstance
MaxAgentsWaiting

Indicates the maximum number of database agents that have been waiting for a token at the same time since the monitored instance of the Database Manager was started.

Collector: CollInstance
MaxCoordAgents

(in DB2 UDB EEE only)

Indicates the maximum number of coordinating agents that can exist at one time on the node.

Collector: CollInstance
NumIdleAgents

Indicates the number of database agents in the agent pool associated with the monitored DB2 DBM instance that are currently unassigned to an application.

Collector: CollInstance
PctActiveFCMConns

(in DB2EEE_NODE only)

Indicates the percentage of nodes with an active communication connection.

Collector: CollInstance
PctAgentsFromPool

(in DB2EEE_NODE only)

Indicates the percentage of agents assigned from the agent pool.

Collector: CollInstance
PctAgentsIdle

Indicates the percentage of idle agents in the monitored instance of the DBM. This parameter, along with the NumIdleAgents parameter, can be used to determine the proper setting of the Num_PoolAgents configuration parameter.



Collector: CollInstance
PctAgentsRegd

Indicates the percentage of registered agents in the monitored instance of the DBM. This parameter, along with the MaxagentsRegd and AgentsRegd parameter, can be used to determine the proper settins of the MAXAGENTS configuration parameter.



Collector: CollInstance
PctAgentsWaitForTkn

Indicates the percentage of database agents waiting for a token before executing a transaction in the database manager.

Collector: CollInstance
PctPipedSortReqsAcc

Indicates the percentage of piped sort requests that have been accepted since the database instance started or since the last time the DB2 monitor was reset.

Collector: CollInstance
PostThreshSorts

Indicates the number of sorts that have requested heaps after the sort heap threshold has been reached.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollInstance
ProblemDB2Agents

(in DB2_PARAM and DB2EEE_PARAM only)

Indicates the status of all agents and subagents running in an instance and provides annotated data identifying any agent or subagent in an alert state.



Collector: CollAgent
RemConnectsToDBM

Indicates the total number of current connections initiated from remote clients to the database instance that is being monitored.

Collector: CollInstance
RemConnExecInDBM

Indicates the number of remote applications that are currently connected to a database within the database instance being monitored and that are currently processing a unit of work.

Collector: CollInstance
TotSortHeapAlloc

Indicates the total number of memory pages allocated for all sorts in progress for the selected database instance.

Collector: CollInstance
UpdateAgentAppFiles

(in DB2_PARAM and DB2EEE_PARAM only)

Collects information that correlates each DB2 application with the DB2 agent or agents monitoring that application.

Collector: CollInstance
DB2_TSP Application Class in DB2 UDB EE

DB2EEE_TSP Application Class in DB2 UDB EEE
PctPagesUsed

Indicates the percentage of tablespace pages that are used. For DMS tablespaces, the parameter calculates the percentage of preallocated space that is used. For SMS tablespaces, the parameter calculates the percentage of space used by the tablespace containers on the filesystems. Recovery action upon alarm is available.

Collector: CollTablespace
PhyReads

Reports the total number of physical reads performed per second on the monitored table space during the previous polling interval.

Collector: CollTablespace
PhyWrites

Reports the total number of physical writes performed per second on the monitored table space during the previous polling interval.

Collector: CollTablespace
SpaceLeft

Indicates the amount of free space in the selected table space.

Collector: CollTablespace
TblspState

Indicates the state of the selected table space as a numerically hexadecimal number (where 0 Indicates a normal state).

Collector: CollTablespace
DB2UDB_BUFFERPOOL Application Class in DB2 UDB EE

DB2EEE_BP_NODE and DB2EEE_BUFFERPOOL (where noted) Application Class in DB2 UDB EEE
AveDirReadTime

Indicates the average amount of time required to read a sector of data from disk at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveDirWriteTime

Indicates the average amount of time required to write a sector of data to disk at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveNumPgsReadPerAsyncReq

Indicates the average number of data pages that have been read by asynchronous read requests at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveNumSectorsRead

Indicates the average number of sectors read by a direct read request at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveNumSectorsWritten

Indicates the average number of sectors written by a direct write request at the buffer pool level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePgCleanWriteTime

Indicates the average asynchronous write time that is required by the Database Manager page cleaners each time data is written from the buffer pool to disk.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePgReadTime

Indicates the average amount of time required to read a data or index page from the physical disk to the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePgWriteTime

Indicates the average amount of time required to write a data or index page from the buffer pool to the physical disk.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AvePrefetchReadTime

Indicates the average asynchronous read time required by the Database Manager prefetchers each time data is read from disk into the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveSyncBPReadTime

Indicates the average amount of time that is required for a particular synchronous read of data from the disk to the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPDataPgCleanEff

Indicates the ratio of asynchronous data writes to synchronous data writes.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPDataWriteReadRatio

Indicates the number of data reads requiring page-ins to the buffer pool that cause writes (page-outs) to disk.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPIndxPgCleanEff

Indicates the ratio of asynchronous index writes to synchronous index writes.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BPIndxWriteReadRatio

Indicates the ratio of the number of times a buffer pool index page is physically written to disk to the number of read requests required to read index pages into the buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
BufferPoolHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of data and index reads that did not require access to the physical disk because the data was already loaded in the cached memory buffer pool.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
DataPgHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of data reads that did not require physical disk access.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
DBPrefetchEffRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the ratio of asynchronous data reads to synchronous data reads.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollInstance
IndxPgHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of index reads that did not require physical disk access.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
SyncBPHitRatio

(also in DB2EEE_BUFFERPOOL)

Indicates the percentage of synchronous buffer pool accesses which resulted in requests for data which did not require a disk access.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
DB2UDB_COLLECTORS Application Class in DB2 UDB EE

DB2EEE_COLLECTORS Application Class in DB2 UDB EEE
CollAgent

Collects information and provides the values to the consumer parameters for monitoring DB2 agents and applications associated with those agents.
CollBufferpool

Collects information and provides the values to the consumer parameters for monitoring DB2 buffer pools.
CollConnToDB

Collects information for the ConnToDBOK parameter.
CollDatabase

Collects information and provides the values to the consumer parameters for monitoring DB2 databases.
CollDiaglog

Collects information and provides the values to the consumer parameters for monitoring the DB2 diagnostic log.
CollInstance

Collects information and provides the values to the consumer parameters for monitoring DB2 instances.
CollPerformance

Collects performance data for monitoring databases and provides the values to the consumer parameters in the DB2DB_PERFORMANCE (or DB2EEE_PERFORMANCE) application class that are activated when Advanced Performance Monitoring is configured.
CollTablespace

Collects information and provides the values to the consumer parameters for monitoring DB2 table spaces.
DB2DB_CAPACITY Application Class in DB2 UDB EE

DB2EEEDB_NODE_CAPACITY and DB2EEE_DB_PARAM Application Classes (where noted) in DB2 UDB EEE
AppsConnToDB

(also in DB2EEE_DB_PARAM)

Indicates the number of applications that are currently connected to the monitored database.

Collector: CollAgent
AveSortHeapUsed

(also in DB2EEE_DB_PARAM)

Indicates the average number of sort heap pages allocated for each currently active sort.

Collector: CollDatabase
ConnToDBOK

The ConnToDBOK parameter attempts to connect to the database. If the connection is unsuccessful, DB2 returns an SQL message. The value fo ConnToDBOK is set toeither WARN or ALARM depending on the SQL message returned. By default, the parameter warns on the following messages: SQL1116N, SQL1032N, SQL1035N.

Collector:CollConnToDB
DatabaseSize

(also in DB2EEE_DB_PARAM)

In DB2DB_CAPACITY, DatabaseSize is a standard parameter and indicates the sum of used pages by all the tablespace containers for the database. Poll time is 3 hours. In DB2EEE_DB_PARAM, DatabaseSize is a standard parameter and indicates the size of the database for all nodes. Poll time is 3 hours. In DB2EEEDB_NODE_CAPACITY, DatabaseSize is a consumer parameter and indicates the size of the database of the current node. Poll time is not applicable.
DBSortHeapAlloc

(also in DB2EEE_DB_PARAM)

Indicates the total number of memory pages currently allocated for the sort heap for all sorts in the selected database.

Collector: CollDatabase
MaxDBHeapAlloc

Indicates the largest portion of database heap that has been allocated and used by the database since the first application connection. Not available for versions later than 6.1 of DB2 Universal Database.

Collector: CollDatabase
MaxNumConcDBConns

(also in DB2EEE_DB_PARAM)

Indicates the maximum number of simultaneous connections that have occurred to the monitored database since the first application connected to it.

Collector: CollDatabase
MaxPctDBHeapUsed

Indicates the largest percentage of database heap used by the database since the first application connected to the database. Not available

for versions later than 6.1 of DB2 Universal Database.

Collector: CollPerformance
PctAppsConnUsed

Indicates the percentage of applications that are connected to the database being monitored.

Collector: CollDatabase
DB2DB_LOCK Application Class in DB2 UDB EE

DB2EEEDB_NODE_LOCK and DB2EEE_DB_PARAM Application Classes (where noted) in DB2 UDB EEE
AveWaitForLock

(also in DB2EEE_DB_PARAM)

Indicates the average amount of time that any application running against the database spent waiting before a lock request was granted.

The LOCK DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
Deadlocks

(in DB2DB_LOCK and DB2EEE_DB_PARAM only)

Displays information about the deadlocks that have occurred for the database being monitored. You cannot monitor this parameter for a remote database.
NumDeadlocks

(also in DB2EEE_DB_PARAM)

Indicates the total number of deadlocks that have occurred since the first application connected to the database being monitored.

Collector: CollDatabase
NumExclLockEscals

Indicates the number of times that row locks have been escalated to one exclusive table lock, or the number of times an exclusive row lock forced a table lock to become an exclusive lock.

Collector: CollDatabase
NumLockEscals

Indicates the number of times that row locks have been escalated to a table lock, including exclusive lock escalations.

Collector: CollDatabase
NumLocksHeld

Indicates the number of locks held by all applications in a particular database.

Collector: CollDatabase
NumLocksRemaining

Indicates the total number of locks remaining to be granted to applications connected to the database being monitored.

Collector: CollDatabase
NumLockTimeouts

Indicates the number of times a request to lock a database object timed out instead of being granted.

Collector: CollDatabase
PctAppsWaitingOnLocks

Indicates the percentage of applications currently waiting on locks that are connected to the database being monitored.

Collector: CollDatabase
PctDBLocklistUsed

(also in DB2EEE_DB_PARAM)

Indicates the percentage of the monitored databases locklist memory currently in use.

Collector: CollDatabase
PctLockedOutDBConns

Indicates the percentage of applications that are currently waiting on locks. This parameter indicates the degree of lock concurrency for the current set of applications and therefore can help determine the correct setting for the maxcagents DBM configuration parameter as well as the locklist and maxlocks DB configuration parameters.

Collector: CollDatabase
DB2DB_LOG Application Class in DB2 UDB EE

DB2EEEDB_NODE_LOG Application Class in DB2 UDB EEE
LogFSFreeSpace

Indicates the amount of free space that is available on the file system where the DB2 logs reside. You cannot monitor this paramter for a remote database.

Collector: CollDatabase
LogFSPctUsed

Indicates the percentage of the file system used where the DB2 logs reside. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
MaxPrimaryLogSpUsed

Indicates the maximum amount of primary log space being used.

Collector: CollDatabase
MaxSecLogSpaceUsed

Indicates the maximum amount of secondary log space being used.

Collector: CollDatabase
MaxTotLogSpaceUsed

Indicates the maximum amount of total log space being used, including both primary and secondary log files.

Collector: CollDatabase
PctPrmryLogSpUsed

Indicates the largest percentage of the monitored databases primary log space that is being used.

Collector: CollDatabase
PctSecLogsAlloc

Indicates the percentage of the monitored databases secondary log space currently being used.

Collector: CollDatabase
PctTotalLogSpUsed

Indicates the percentage of active log space in the database that is used. Not valid for DB2 v 5.0.

Collector: CollDatabase
PrimaryLogSpaceAlloc

Indicates the amount of the monitored databases primary log space that is currently allocated.

Collector: CollDatabase
SecLogSpaceAlloc

Indicates the amount of the monitored databases secondary log space that is currently allocated.

Collector: CollDatabase
TotalLogSpAvail

Indicates the total amount of active log space in the database that is not being used. Not valid for DB2 v 5.0.

Collector: CollDatabase
TotalLogSpUsed

Indicates the total amount of active log space in the database that is currently being used.

Collector: CollDatabase
DB2DB_PERFORMANCE Application Class in DB2 UDB EE

DB2EEEDB_NODE_PERFORMANCE and DB2EEE_DB_PARAM Application Classes (where noted) in DB2 UDB EEE
AveDirReadTime

(also in DB2EEE_DB_PARAM)

Indicates the average amount of time required to read a sector of data from disk at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveDirWriteTime

(also in DB2EEE_DB_PARAM)

Indicates the average amount of time required to write a sector of data to disk at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
AveElapsedTime

(also in DB2EEE_DB_PARAM)

Indicates the running average of elapsed CPU time during SQL processing for a monitored database. Advanced Performance Monitoring must be configured. You cannot monitor this parameter for a remote database.

Collector: CollPerformance
AveNumSectorsRead

Indicates the average number of sectors read by a direct read request at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveNumSectorsWritten

Indicates the average number of sectors written by a direct write request at the database level.

The BUFFERPOOL DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollBufferpool
AveSortTime

(also in DB2EEE_DB_PARAM)

Indicates the average elapsed time spent per database sort.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
CtlgCacheHitRatio

Indicates the percentage of catalog references that did not require a catalog access (has a default value of 100).

Collector: CollAgent
DBFilesClosed

Indicates the total number of database files closed. The actual number of files opened may not equal the number of files that were closed. The BUFFERPOOL DB2 Monitor Switch must be set to ON to make this paramter active and collect data.

Collector: CollDatabase
ElapsedTime

(also in DB2EEE_DB_PARAM)

Indicates the amount of elapsed time during SQL processing associated with a selected database. Advanced Performance Monitoring must be configured. You cannot monitor this parameter for a remote database.

Collector: CollPerformance
PkgCacheHitRatio

Indicates the percentage of times an application found a section or package in the package cache without causing it to be loaded.

Collector: CollAgent
PctOverflowSortReqs

(also in DB2EEE_DB_PARAM)

Indicates the percentage of sorts for the selected database that did not have enough sort heap allocated and that required temporary disk space for storage purposes.

The SORT DB2 Monitor Switch must be set ON to make this parameter active and collect data.

Collector: CollDatabase
ResponseExecTime

(also in DB2EEE_DB_PARAM)

Reports the amount of time required to execute the response.sql file located in the $PATROL_HOME/../db2 directory. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
TableSpaceIO

Monitors I/O time for a specified list of table spaces, indicating which table spaces are busier than others.

TableSpaceIO needs to be configured and started. TableSpaceIO also requires that the BUFFERPOOL monitoring switch be ON and table space discovery enabled.

The parameter value is text annotated with each data point. The text contains a sorted list of table space names and their associated I/O times, with the busiest table space being at the top.

Collector: CollTablespace
TotThroughput

Indicates the total number of SQL statements that have been performed successfully against the selected database.

Collector: CollDatabase
TotUOW

(also in DB2EEE_DB_PARAM)

Indicates the total number of commits and rollbacks, including internal commits and rollbacks, that have been attempted against the selected database.

Collector: CollDatabase
DB2DB_RECOVERY Application Class in DB2 UDB EE

DB2EEEDB_NODE_RECOVERY Application Class in DB2 UDB EEE
BackupCount

Indicates the number of backups in the backup directory for a database. The backup directory is the physical file where backups are stored. This parameter does not work if backups are not stored on a file system (for example, TSM backups). Multiple backups taken on the same day count as one backup. The backup directory name is set by the Configure Backup Directory Menu command which can be executed from the DB2DB_RECOVERY/ DB2EEEDB_NODE_RECOVERY application class under Backup. The parameter value is useful in determining how many backups have been taken for a database. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
BackupTime

Indicates the number of hours from the last time a backup was taken on the database. This parameter value is useful in determining the age and time of backups. As a backup ages, the value of this parameter increases with time. When a new backup is taken, the graph will show a decrease in the value. You can use the annotated data point to find out the time of the last backup.

Collector: CollDatabase
HistFSFreeSpace

Indicates the amount of free space that is available on the file system where the history logs reside. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
HistFSPctUsed

Indicates the percentage of the file system used where the history logs reside. You cannot monitor this parameter for a remote database.

Collector: CollDatabase
IndoubtTrans

Indicates the existence of indoubt transactions in a database. This parameter receives its collected value when Indoubt Transaction Monitoring is turned ON using the menu command Start Indoubt Trans Monitor. Collecting will become inactive if the menu command Stop Indoubt Trans is issued. In addition, you can use the menu command Ack Indoubt Trans Alarm to acknowledge an active alarm indicating the existence of indoubt transactions in the database. An annotated data point is plotted with information about the transactions when indoubt transactions are detected. Start Indoubt Trans Monitor, Stop Indoubt Trans Monitor, and Ack Indoubt Trans Alarm are available from the DB2_RECOVERY/ DB2EEEDB_NODE_RECOVERY application class under Indoubt Transaction.

Collector: CollDatabase
ReorgCheck

Detects tables that are candidates for reorganization.

This parameter has a value of zero when no table needs to be reorganized. It goes into alarm with the value of 1 when there are tables that are candidates for reorganization. An annotated data point is then plotted with DB2's reorgchk information on these tables.

Collector: CollDatabase
DB2DB_SQL Application Class in DB2 UDB EE

DB2EEEDB_NODE_SQL Application Class in DB2 UDB EEE
DDLTotStmts

Indicates the ratio of SQL DDL statements to total SQL statements that have been attempted against the selected database.

Collector: CollDatabase
IntAutoRebindTotStmts

Indicates the ratio of the total number of automatic rebinds or recompiles that have been attempted to the total SQL statements attempted against the selected database.

Collector: CollDatabase
SelectTotStmts

Indicates the ratio of SQL SELECT statements to the total SQL statements that have been attempted against the selected database.

Collector: CollDatabase
UpdInsDelTotStmts

Indicates the ratio of SQL UPDATE, INSERT, and DELETE statements to total SQL statements that have been attempted against the selected database.

Collector: CollDatabase
SPACE_EXPERT_DB2 Application Class

SPACE_EXPERT_DB2_TS Application Class

SPACE_EXPERT_DB2_OBJ Application Class
find_problems

(SPACE_EXPERT_DB2 application)

Collects the information fro the parameters in the SPACE_EXPERT_DB2_OBJ and the SPACE_EXPERT_DB2_TS applications. The SPACE_EXPERT_DB2 application requires that Space Expert be installed and configured on the monitored instance. If the SPACE_EXPERT_DB2 icon is dimmed, Space Expert is not installed on the instance.
StorageProblems

(SPACE_EXPERT_DB2_OBJ application)

Lists any medium or high problems found in a table or index on the monitored instance. Low problems are included in the text of the parameter if medium or high problems are also found.
StorageProblems

(SPACE_EXPERT_DB2_TS application)

Lists any medium or high problems found in a tablespace on the monitored instance. Low problems are included in the text of the paramter if medium or high problems are also found.
StorageProblemsCnt

(SPACE_EXPERT_DB2_OBJ application)

Displays the number of tables or indexes in the configured instance with a medium or high problem.
StorageProblemsCnt

(SPACE_EXPERT_DB2_TS application)

Displays the number of tablespaces in the configured instance with a medium or high problem.















PATROL KM for Event Management 2.6.00


Table 11 PATROL KM for Event Management 2.6
Parameter



AS_AVAILABILITY Application Class
AlertTest

Tests the notification systems and rules without forcing a parameter into an alarm state.

Collector: NA
AgentPingFailures

Indicates the availability of the PATROL Agent. This parameter is displayed only if you have configured availability monitoring.

Collector: AvailabilityMonitorColl
AvailabilityMonitorColl

Checks the availability of monitored agents and sets the value of the HostPingFailures parameter, the AgentPingFailures parameter, and the SnmpPingFailures parameter.
HostPingFailures

Indicates the availability of the PATROL Agent host using an ICMP ping.

Collector: AvailabilityMonitorColl
SnmpPingFailures

Indicates the availability of the SNMP agent.

Collector: AvailabilityMonitorColl
AS_EVENTSPRING Application Class
AlertTest

Tests the notification systems and rules, without forcing a parameter into an alarm state.

Collector: NA
AgentLoginDenied

Monitors failed login attempts to the agent. This parameter alarms immediately upon a failed login.

Collector: NA
BlackoutEvents

The number of blackout NOTIFY events processed by PATROL KM for Event Management during the collection cycle.

Collector: EventCollector
EscalatedEvents

The number of escalated NOTIFY events processed by the PATROL KM for Event Management during the collection cycle.

Collector: EventCollector
EventCollector

Collects the NOTIFY events on the monitored agent and sets the value of the NotifiedEvents parameter, the EscalatedEvents parameter, and the BlackoutEvents parameter.
NotifiedEvents

The number of OK, ALARM, and WARN NOTIFY events processed by the PATROL KM for Event Management during the collection cycle.

Collector: EventCollector
RefreshParamSettings

Updates parameter settings as required.
ResendAlertQueue

The number of alerts that had been resent during the previous polling cycle because the parameters remain in an ALARM or WARN state in consecutive polling periods.
RetriggerEventQueue

Retriggers events that failed to be sent to a notification server.















PATROL for Informix 9.1.10


Table 12 PATROL for Informix 9.1.10
Parameter



Informix Component 9.1.10
IFMXDS_AVAILABILITY Application Class
ArchiveLevel0

Appears only when your environment uses Ontape to backup the server.

Displays the number of days since the last level 0 archive.

Collector: ArchiveMonitor
ArchiveLevel1

Appears only when your environment uses Ontape to backup the server.

Displays the number of days since the last level 1 archive.

Collector: ArchiveMonitor
ArchiveLevel2

Appears only when your environment uses Ontape to backup the server.

Displays the number of days since the last level 2 archive.

Collector: ArchiveMonitor
CheckpointDuration

Displays the check point interval for Checkpoint Completed messages. These messages are written to the Informix Dynamic Server error log that is defined by the MSGPATH configuration parameter. This instance must exceed thresholds 5 times before the alarms or warnings are activated.

Collector: ErrorLogMonitor
CheckpointFrequency

Displays the number of minutes between checkpoints using the timestamp for Checkpoint Completed messages. These messages are written to the error log that is defined by the MSGPATH configuration parameter.

Collector: ErrorLogMonitor
ChunkDown

Displays the number of chunks that are down for the server.

Collector: Onstat_dMonitor
DbsLevel0

Appears only when your environment uses OnBar to backup the server.

Displays the number of days since the last level zero archive.

Collector: OnbarMonitor
DbsLevel1

Appears only when your environment uses OnBar to backup the server.

Displays the number of days since the last level one archive.

Collector: OnbarMonitor
DbsLevel2

Appears only when your environment uses OnBar to backup the server.

Displays the number of days since the last level two archive.

Collector: OnbarMonitor
EventSeverity

Captures and displays the severity rating for each event reported to the message log, and annotates the events that are given a severity level of 3, 4, or 5 with the error message.

Collector: ErrorLogMonitor
FullestChunk

Displays the percent full for the fullest chunk on the server.

Collector: Onstat_dMonitor
FullestDbs

Displays the percent full for the fullest dbspace on the server.

Collector: Onstat_dMonitor
FullestMetadata

Displays the percent full for the fullest metadata on the server.

Collector: Onstat_dMonitor
InstanceStatus

Displays status changes for the server instance.

Collector: InstanceStatusMonitor
LogSpace

Displays the percentage of the total logical log space that is used for the server.

Collector: Onstat_dMonitor
OnBarActivityStatus

Displays the percentage of warnings and errors found in the Informix ON-Bar Activity Log for each server.
OnBarFailures

Displays only when your environment uses OnBar to backup the server.

Displays the number of failures found in the backup and recovery error log.
UsedSpace

Displays the percentage of total space used for each dbspace on the server.

Collector: Onstat_dMonitor
VPList

Displays a list of virtual processors for the server.

Collector: VPMonitor
VPTotal

Displays the total number of virtual processors on the server.

Collector: VPMonitor
IFMXDS_CAPACITY Application Class
ActiveLocks

Displays the percentage of total locks that are active for the server.

Collector: OnstatMonitor
BufferOverflow

Displays the number of attempts made to exceed the shared memory buffer limit (buffer overflows) for the server.

Collector: OnstatMonitor
BufferWaits

Displays the number of buffer waits for the selected server.

Collector: OnstatMonitor
CheckpointWaits

Displays the number of check point waits for the selected server.

Collector: OnstatMonitor
Deadlock_Timeout

Displays the number of times that a dead lock time out value was exceeded for the selected server.

Collector: OnstatMonitor
Deadlocks

Displays the number of potential dead locks that were detected and prevented for the selected server.

Collector: OnstatMonitor
LatchWaits

Displays the number of times a thread waits to access shared memory for the selected server.

Collector: OnstatMonitor
LockOverflow

Displays the number of times an attempt was made to exceed the locks limit for the selected server.

Collector: OnstatMonitor
LockWaits

Displays the number of times a thread waits for a lock for the selected server.

Collector: OnstatMonitor
PhysicalLogSize

Displays the size of the physical log buffers for the selected server.

Collector: Onstat_IMonitor
TableOverflow

Displays the number of attempts to exceed the table space (tblspace) limits for the selected server.

Collector: OnstatMonitor
UserOverflow

Displays the total number of attempts to exceed the user limit on the selected server.

Collector: OnstatMonitor
IFMXDS_COLLECTORS Application Class
ArchiveMonitor

Appears only when Ontape is used to backup the server.

Gathers the archive information by using the results from oncheck-pr and by checking the sysutils database.
DBSpaceMonitor

Monitors the dbspaces selected for monitoring using the Monitor by Dbspace menu command. For the selected dbspaces, it reports the space used versus the space allocated for each dbspace and the reads, the writes, the page reads, and the page writes for each chunk.
ERMonitor

Discovers and creates the Informix Enterprise Replication instances. The ER database must exist.
ErrorLogMonitor

Monitors the Informix Dynamic Server error log, as defined by the MSGPATH configuration parameter, and displays the diagnostic and status messages written during operation by the selected server.
FragChecker

Monitors the number of fragments for each monitored table and determines whether the number of fragments for a table exceeds the user-defined threshold. If the number of fragments for a table exceeds the threshold, then the IFMXDS_FRAG instances created for those fragments are deleted and replaced by IFMXDS_FRAG_SUM instances.
FragMonitor

Monitors the logically fragmented tables listed by the FragChecker parameter for the selected server. Creates and destroys the Frag and Frag_Ext application instances.
OnbarMonitor

Appears only when OnBar is used to backup the server.

Uses the Informix OnBar utility to monitor the status of the level0, level1, and level2 backups for each instance.
Onstat_dMonitor

Uses the onstat -d utility to monitor the chunks and dbspaces for the selected server.This collector also monitors the smart blob or metadata spaces.
Onstat_FMonitor

Uses the onstat -F utility to monitor the page cleaners and foreground writes for the selected server.
Onstat_IMonitor

Uses the onstat -l utility to monitor the information on the physical and logical logs on the selected server.
OnstatMonitor

Uses the onstat -p utility to monitor the profile counts for the selected server.
PDQMonitor

Monitors the resources used by the Decision Support feature when it is activated.
SesMonitor

Monitors the active user sessions on the selected server.
SQLViewerMonitor

Captures the SQL statements that are processed by the Informix Dynamic Server database engines for the selected server and writes them to a flat file of the users choosing. This parameter does not display the sql statements directly; you can view the sql statements through the SQL Viewer menu selections.
TblMonitor

Monitors the active tables in sysptprof for the selected server.
TBSMonitor

Monitors the active tables by specified table or criteria for the selected server.
TempDBSMonitor

Monitors the dbspaces and chunks as defined in the DPSPACETEMP parameter in the ONCONFIG file, for the selected server, when there are Temp DBSpaces in the ONCONFIG file. This parameter reports the space used versus the space allocated for each dbspace, and reports the reads, writes, page reads, and page writes for each chunk. It does not report on temp dbspaces if the value for DBSPACETEMP is set to ALL or NOTCRITICAL. This parameter is inactive if there are no temp dbspaces to monitor.
UserMonitor

Monitors the active user sessions by specified user, criteria, or session ID for the selected server. This standard parameter with collector properties creates the instances found under the IFMXDS_USER application.
VPMonitor

Monitors the virtual processors on the selected server. This collector sets the values for the VPList and VPTotal consumer parameters.
IFMXDS_DBS Application Class
DBSpaceAllocated

Displays the percentage of total space in each dbspace that is allocated for the selected server.

Collector: DBSpaceMonitor
DBSpaceUsed

Displays the percentage of total space on each dbspace that was used as of the last high water mark for the selected server.

Collector: DBSpaceMonitor
MetadataUsed

Displays the percentage of used metadata for each blob space for each instance.

Collector: Onstat_dMonitor
IFMXDS_DBS_CHK Application Class
PageRead

Displays the number of page reads for each chunk for the selected server.

Collector: DBSpaceMonitor
PageWrite

Displays the number of page writes for each chunk for the selected server.

Collector: DBSpaceMonitor
Read

Displays the number of reads for each chunk for the selected server.

Collector: DBSpaceMonitor
Write

Displays the number of writes for each chunk for the selected server.

Collector: DBSpaceMonitor
IFMXDS_DBSTEMP Application Class
TempDBSpaceAllocated

Displays the percentage of total space in each temporary dbspace that is allocated for the selected server.

Collector: TempDBSMonitor
TempDBSpaceUsed

Displays the percentage of total space on each temporary dbspace that was used as of the last water mark for the selected server.

Collector: TempDBSMonitor
IFMXDS_DBSTEMP_CHK Application Class
TempPageRead

Displays the number of page reads for each chunk for the selected server.

Collector: TempDBSMonitor
TempPageWrite

Displays the number of page writes for each chunk for the selected server.

Collector: TempDBSMonitor
TempRead

Displays the number of reads for each chunk for the selected server.

Collector: TempDBSMonitor
TempWrite

Displays the number of writes for each chunk for the selected server.

Collector: TempDBSMonitor
IFMXDS_FRAG_EXT Application Class
FragDeadLocks

Displays the number of deadlocks for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragDeletes

Displays the number of deletes for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragLockRequests

Displays the number of lock requests for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragLockWaits

Displays the number of lock waits for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragPageReads

Displays the number of page reads for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragPageWrites

Displays the number of page writes for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSeqScans

Displays the number of sequential scans for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
IFMXDS_FRAG_SUM Application Class
FragSDeadLocks

Displays a summary of the number of deadlocks for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
FragSDeletes

Displays a summary of the number of deletes for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
FragSLockRequests

Displays a summary of the number of lock requests for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
FragSLockWaits

Displays a summary of the number of lock waits for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
FragSPageReads

Displays a summary of the number of page reads for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
FragSPageWrites

Displays a summary of the number of page writes for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
FragSSeqScans

Displays a summary of the number of sequential scans for the logically fragmented tablespaces (partitions) for each instance.

Collector: FragMonitor
IFMXDS_PDQ Application Class
CpuVpUsage

Displays the percentage used of the CPU allocated to virtual processes (VPs).

Collector: PDQMonitor
MemoryUsage

Displays the percentage used of the memory allocated to Decision Support.

Collector: PDQMonitor
ScanThreadUsage

Displays the percentage used of the scan threads allocated to Decision Support.

Collector: PDQMonitor
ScanThreadsAvailable

Displays the number of times the maximum number of scan threads is less than the maximum number of fragments found in any table in the instance.

Collector: PDQMonitor
IFMXDS_PERFORMANCE Application Class
CleanersDown

Displays the percentage of page cleaners that are down for the selected server.

Collector: Onstat_FMonitor
DataDistribution

Displays the percentage of difference between the least accessed chunk and the most accessed chunk for the selected server.
FgWrites

Displays the number of foreground writes for the selected server.

Collector: Onstat_FMonitor
IOQueue

Displays the maximum length of the I/O queue for the selected server.
LogicalLogBufSize

Displays the percentage of the total logical log buffer size pages used by each I/O for the selected server.

Collector: Onstat_IMonitor
PhysicalLogBufSize

Displays the percentage of the total physical log buffer size pages used for each I/O for the selected server.

Collector: Onstat_IMonitor
PhysicalLogUsed

Displays the number of pages in the physical log that are used for the selected server.

Collector: Onstat_IMonitor
ReadAhead

Displays the ratio of page reads to pages used for the selected server.

Collector: OnstatMonitor
ReadCache

Displays the percentage of read requests that were satisfied from the memory buffers for the selected server.

Collector: OnstatMonitor
ReadyQueue

Displays the maximum length of the ready queue for the selected server.
ResponseTime

Displays the response time in seconds for the selected server.
SysCpu

Displays the total CPU time used by all user threads on the selected server.

Collector: OnstatMonitor
TabExtents

Displays the number of table extents for each active table on the selected server.
TableScans

Displays the total number of table sequential scans on the selected server.

Collector: OnstatMonitor
TblDeadLocks

Displays the total number of table dead locks for the selected server.

Collector: TblMonitor
TblLockWaits

Displays the total number of table lock waits for the selected server.

Collector: TblMonitor
TblSeqScans

Displays the number of sequential scans for each active table on the selected server.

Collector: TblMonitor
UserCpu

Displays the percentage of total CPU usage by all user threads for the selected server.

Collector: OnstatMonitor
WriteCache

Displays the percentage of write requests that were satisfied from memory buffers for the selected server.

Collector: OnstatMonitor
IFMXDS_TBS Application Class
TBSDeadLks

Displays the number of dead locks for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSDeletes

Displays the number of deletes for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSLockReqs

Displays the number of lock requests for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSLockWts

Displays the number of lock waits for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSPageReads

Displays the number of page reads for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSPageWrites

Displays the number of page writes for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSSeqScans

Displays the number of sequential scans for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
IFMXDS_USER Application Class
UserCurrLogspace

Displays the amount of log space used by the current transaction in this user session since the last polling cycle.

Collector: UserMonitor
UserDeadLocks

Displays the number of times a deadlock was detected in this user session since the last polling cycle.

Collector: UserMonitor
UserDiskSorts

Displays the number of sorts performed on disk instead of in memory by this user session since the last polling cycle

Collector: UserMonitor
UserLocksHeld

Displays the number of locks held by this user session since the last polling cycle.

Collector: UserMonitor
UserLockTimeouts

Displays the number of dead lock timeouts that occurred in this user session since the last polling cycle.

Collector: UserMonitor
UserLogRecords

Displays the number of log records written in this user session since the last polling cycle.

Collector: UserMonitor
UserLongTrans

Displays the number of long transactions that occurred in this session since the last polling cycle.

Collector: UserMonitor
UserMaxLogSpace

Displays the percentage of the total log space that was used by any one transaction in this user session since the last polling cycle.

Collector: UserMonitor
UserMaxResourceWait

Displays the maximum amount of time this user session had to wait for resources since the last polling cycle.

Collector: UserMonitor
UserPageReads

Displays the number of page reads that occurred in this user session since the last polling cycle.

Collector: UserMonitor
UserPageWrites

Displays the number of page writes that occurred in this user session since the last polling cycle.

Collector: UserMonitor
UserSeqScans

Displays the number of sequential scans that occurred in this user session since the last polling cycle.

Collector: UserMonitor
IFMXDS_USERS Application Class
LicensesUsed

Displays the percentage of the total number of licenses available that are currently in use for user sessions, according to onstat u.

Collector: SesMonitor
ProblemSessions

Displays the percentage of the total active sessions that belong to users.

Collector: SesMonitor
ProblemUsers

Displays the percentage of the total I/O that is attributable to users.

Collector: SesMonitor
SesDeadlocks

Displays the number of user session dead locks for the selected server.

Collector: SesMonitor
SesDeletes

Displays the number of user sessions deletes for the selected server.

Collector: SesMonitor
SesHeldResources

Displays the longest amount of time a user session waited for a resource for the selected server.

Collector: SesMonitor
SesLocksHeld

Displays the number of locks held for user sessions for the selected server.

Collector: SesMonitor
SesLongTxs

Displays the number of long transactions caused by user sessions for the selected server.

Collector: SesMonitor
SesSeqScans

Displays the number of sequential scans for user sessions for the selected server.

Collector: SesMonitor
INFORMIX Application Class
InstanceStatusMonitor

Gathers information on the status changes for the Informix IDS and XPO servers by using the results from onstat. This parameter does not appear as an icon..
Extended Parallel Option (XPO) Component 9.1.00
IFMXPO_AVAILABILITY Application Class
CheckpointTime

Displays the average check point interval for Checkpoint completed messages written to the Informix error log, as defined by the MSGPATH configuration path.

Collector: ErrorLogMonitor
ChunkDown

Displays information on the chunks that are down.

Collector: Onstat_dMonitor
EventSeverity

Captures and displays the severity rating for each event reported to the message log, and annotates the events that are given a severity level of 3, 4, or 5 with the error message.

Collector: ErrorLogMonitor
FullestChunk

Displays the percent full for the fullest chunk on the server.

Collector: Onstat_dMonitor
FullestDbs

Displays the percent full for the fullest dbspace on the server.

Collector: Onstat_dMonitor
InstanceStatus

If Instance Always On Line was selected when the instance was configured, and the instance goes down without good cause or it is placed in Quiescent Mode, then this parameter goes into an alarm state.

If Instance Always On Line was NOT selected, then this parameter does not go into an alarm state when the server goes off line, no matter the cause.

Collector: InstanceStatusMonitor
LogSpace

Displays the percentage of the total logical log space that is used for the server.

Collector: Onstat_dMonitor
UsedSpace

Displays the percentage of total space used for each dbspace on the server.

Collector: Onstat_dMonitor
VPList

Displays a list of virtual processors for the server.

Collector: VPMonitor
VPTotal

Displays the total number of virtual processors on the server.

Collector: VPMonitor
IFMXPO_CAPACITY Application Class
ActiveLocks

Displays the number of total locks that are active.

Collector: OnstatMonitor
BufferOverflow

Displays the number of attempts made to exceed the shared memory buffer limit (buffer overflows) for the server.

Collector: OnstatMonitor
BufferWaits

Displays the number of buffer waits for the selected server.

Collector: OnstatMonitor
CheckpointWaits

Displays the number of check point waits for the selected server.

Collector: OnstatMonitor
Deadlock_Timeout

Displays the number of times that a dead lock time out value was exceeded for the selected server.

Collector: OnstatMonitor
Deadlocks

Displays the number of potential dead locks that were detected and prevented for the selected server.

Collector: OnstatMonitor
LatchWaits

Displays the number of times a thread waits to access shared memory for the selected server.

Collector: OnstatMonitor
LockOverflow

Displays the number of times an attempt was made to exceed the locks limit for the selected server.

Collector: OnstatMonitor
LockWaits

Displays the number of times a thread waits for a lock for the selected server.

Collector: OnstatMonitor
PhysicalLogSize

Displays the size of the physical log buffers for the selected server.

Collector: Onstat_IMonitor
TableOverflow

Displays the number of attempts to exceed the table space (tblspace) limits for the selected server.

Collector: OnstatMonitor
UserOverflow

Displays the total number of attempts to exceed the user limit on the selected server.

Collector: OnstatMonitor
IFMXPO_COLLECTORS Application Class
CollectorStatus

Displays error messages produced by any of the collector or standard parameters that issue collection commands.
DBSpaceMonitor

Monitors the Informix dbspaces and chunks for each coserver and then reports the space used versus the space allocated for each dbspace and the reads, the writes, the page reads, and the page writes for each chunk.
ErrorLogMonitor

Monitors the Informix XPO or XPS error log, as defined by the MSGPATH configuration parameter, and records the diagnostic and status messages.
FragChecker

Monitors the number of fragments for each monitored table and determines whether the number of fragments for a table exceeds the user-defined threshold set using the Set Fragment hreshholdmenu command. If the number exceeds the threshold, the the IFMXPO_FRAG instances created for those fragments are deleted and replaced by IFMXPO_FRAG_SUM instances.
FragMonitor

This parameter is not available for INFORMIX-OnLine XPS 8.11.

Monitors for each coserver the Informix logically fragmented tables listed by the FragChecker parameter. Creates and destroys the Frag and Frag_Ext instances.
Onstat_dMonitor

Uses the onstat -d utility to monitor the chunks and dbspaces for each coserver.
Onstat_FMonitor

Uses the onstat -F utility to monitor the INFORMIX-Online XPS 8.11 or 8.21 page cleaners and foreground writes for each coserver.
Onstat_IMonitor

Uses the onstat -l utility to monitor the INFORMIX-Online XPS 8.11 or 8.21 for information on the physical and logical logs.
OnstatMonitor

Uses the onstat -p utility to monitor the INFORMIX-Online XPS 8.11 or 8.21 profile counts.
SesMonitor

Monitors the INFORMIX-Online XPS 8.11 or 8.21 active user sessions on each coserver.
SQLViewerMonitor

Captures the SQL statements that are processed by the Informix database engines and writes them to a flat file of the users choosing. The SQLViewerMonitor parameter does not display the sql statements directly; you can view the sql statements through the SQL Viewer menu selections.
TblMonitor

This parameter is not available for INFORMIX-OnLine XPS 8.11.

Monitors the active tables in sysptprof for each coserver.
TBSMonitor

This parameter is not available for INFORMIX-OnLine XPS 8.11.

Monitors the active tables by specified table or criteria.
TempDBSMonitor

Monitors the INFORMIX-Online XPS 8.11 or 8.21 dbspaces and chunks as defined in the ONCONFIG file parameter DBSPACETEMP, reports the space used versus the space allocated for each dbspace, and reports the reads, writes, page reads, and page writes for each chunk.

It does not report on temp dbspaces if the value for DBSPACETEMP in the ONCONFIG file is set to ALL or NOTCRITICAL.
UserMonitor

Monitors the Informix XPS or XPO active user sessions by specified user, criteria, or session ID for each coserver and creates the instances found under the IFMXPO_USER application.
VPMonitor

Monitors the INFORMIX-Online XPS 8.11 or 8.21 virtual processors on each coserver.
IFMXPO_CORRELATORS Application Class
CoserverCorrelator

Compares the coserver instances with the coserver definitions in the ONCONFIG file and if they do not match, the value in the graph is set to 1, which triggers a warning alarm.
DbsAllocCorrelator

Monitors the distribution of allocated dbspaces in dbslices across coservers. This parameter calculates and displays the percentage of difference between the lowest amount of dbspace allocated by a coserver and the highest amount of dbspace allocated by a coserver.
DbsUsedCorrelator

Monitors the distribution of used dbspaces in dbslices across the coservers. This parameter calculates and displays the percentage of difference between the three lowest amounts of dbspace used by a coserver and the highest amount of dbspace used by a coserver.
VPCorrelator

Compares the number of virtual processors (vps) on the root node (coserver.1) with the number of vps on each coserver node. If any node has more or fewer vps than the root node, the value in the graph is set to 1, which triggers a warning.
IFMXPO_DBS Application Class
DBSpaceAllocated

Displays the percentage of total space in each dbspace that is allocated for each coserver.

Collector: DBSpaceMonitor
DBSpaceUsed

Displays the percentage of total space on each dbspace that was used for each coserver.

Collector: DBSpaceMonitor
IFMXPO_DBS_CHK Application Class
PageRead

Displays the number of page reads for each chunk for the selected server.

Collector: DBSpaceMonitor
PageWrite

Displays the number of page writes for each chunk for the selected server.

Collector: DBSpaceMonitor
Read

Displays the number of reads for each chunk for the selected server.

Collector: DBSpaceMonitor
Write

Displays the number of writes for each chunk for the selected server.

Collector: DBSpaceMonitor
IFMXPO_DBSTEMP Application Class
TempDBSpaceAllocated

Displays the percentage of total space in each temporary dbspace that is allocated for the selected server.

Collector: TempDBSMonitor
TempDBSpaceUsed

Displays the percentage of total space on each temporary dbspace that was used.

Collector: TempDBSMonitor
IFMXPO_DBSTEMP_CHK Application Class
TempPageRead

Displays the number of page reads for each chunk for the selected server.

Collector: TempDBSMonitor
TempPageWrite

Displays the number of page writes for each chunk for the selected server.

Collector: TempDBSMonitor
TempRead

Displays the number of reads for each chunk for the selected server.

Collector: TempDBSMonitor
TempWrite

Displays the number of writes for each chunk for the selected server.

Collector: TempDBSMonitor
IFMXPO_FRAG_EXT Application Class
FragDeadLks

Displays the number of deadlocks for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragDeletes

Displays the number of deletes for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragLockReqs

Displays the number of lock requests for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragLockWts

Displays the number of lock waits for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragPageReads

Displays the number of page reads for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragPageWrites

Displays the number of page writes for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSeqScans

Displays the number of sequential scans for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
IFMXPO_FRAG_SUM Application Class
FragSDeadLocks

Displays the number of deadlocks for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSDeletes

Displays the number of deletes for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSLockRequests

Displays the number of lock requests for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSLockWaits

Displays the number of lock waits for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSPageReads

Displays the number of page reads for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSPageWrites

Displays the number of page writes for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
FragSSeqScans

Displays the number of sequential scans for each of the logically fragmented tblspaces (partitions) for the selected server.

Collector: FragMonitor
IFMXPO_PERFORMANCE Application Class
CleanersDown

Displays the percentage of page cleaners that are down for the selected server.

Collector: Onstat_FMonitor
DataDistribution

Displays the percentage of difference between the least accessed chunk and the most accessed chunk for the selected server.
FgWrites

Displays the number of foreground writes for the selected server.

Collector: Onstat_FMonitor
IOQueue

Displays the maximum length of the Informix XPO or XPS I/O queue.
LogicalLogBufSize

Displays the percentage of the total logical log buffer size pages used by each I/O for the selected server.

Collector: Onstat_IMonitor
PhysicalLogBufSize

Displays the percentage of the total physical log buffer size pages used for each I/O for the selected server.

Collector: Onstat_IMonitor
PhysicalLogUsed

Displays the number of pages in the physical log that are used for the selected server.

Collector: Onstat_IMonitor
ReadAhead

Displays the ratio of page reads to pages used for the selected server.

Collector: OnstatMonitor
ReadCache

Displays the percentage of read requests that were satisfied from the memory buffers for the selected server.

Collector: OnstatMonitor
ReadyQueue

Displays the maximum length of the ready queue for the selected server.
ResponseTime

Displays the response time in seconds for the selected server.
SysCpu

Displays the total CPU time used by all user threads on the selected server.

Collector: OnstatMonitor
TabExtents

Displays the number of table extents for each active table on the selected server.
TableScans

Displays the total number of table sequential scans on the selected server.

Collector: OnstatMonitor
TblDeadLocks

Displays the total number of table dead locks for the selected server.

Collector: TblMonitor
TblLockWaits

Displays the total number of table lock waits.

Collector: TblMonitor
TblSeqScans

Displays the number of sequential scans for each active table on the selected server.

Collector: TblMonitor
UserCpu

Displays the percentage of total CPU usage by all user threads for the selected server.

Collector: OnstatMonitor
WriteCache

Displays the percentage of write requests that were satisfied from memory buffers for the selected server.

Collector: OnstatMonitor
IFMXPO_TBS Application Class
TBSDeadLks

Displays the number of dead locks for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSDeletes

Displays the number of deletes for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSLockReqs

Displays the number of lock requests for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSLockWts

Displays the number of lock waits for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSPageReads

Displays the number of page reads for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
TBSSeqScans

Displays the number of sequential scans for each of the monitored tblspaces (partitions) for the selected server.

Collector: TBSMonitor
IFMXPO_USERS Application Class
SesDeadlocks

Displays the number of user session dead locks for the selected server.

Collector: SesMonitor
SesDeletes

Displays the number of user sessions deletes for the selected server.

Collector: SesMonitor
SesHeldResources

Displays the longest amount of time a user session waited for a resource for the selected server.

Collector: SesMonitor
SesLocksHeld

Displays the number of locks held for user sessions for the selected server.

Collector: SesMonitor
SesLongTxs

Displays the number of long transactions caused by user sessions for the selected server.

Collector: SesMonitor
SesSeqScans

Displays the number of sequential scans for user sessions for the selected server.

Collector: SesMonitor
Enterprise Replication (ER) Component 9.1.00
IFMXER Application Class
ERATSSpace

Monitors the space in the file system where the aborted transaction spooling (ATS) files are located.

Collector: ERSpoolMonitor
ERATSSpool

Monitors the aborted transaction spooling (ATS) directory and issues an alarm if one or more aborted transaction files are created.

Collector: ERSpoolMonitor
ERConnectState

Monitors the state of the connection for the server.

Collector: ERServerMonitor
ERError

Monitors the number of errors that have occurred since the last polling cycle.

Collector: ERErrorMonitor
ERReceiveQueue

Monitors the percentage of dbspace used by the receive queue.

Collector: ERQueueMonitor
ERRISSpace

Monitors the space in the file system where the row information spooling (RIS) files are located.

Collector: ERSpoolMonitor
ERRISSpool

Monitors the row information spooling (RIS) directory and goes into an alarm state if one or more files are sent to the directory.

Collector: ERSpoolMonitor
ERSendQueue

Monitors the percentage of dbspace used by the send queue.

Collector: ERQueueMonitor
ERServerState

Monitors the state of the replicate server.

Collector: ERServerMonitor
IFMXER_COLLECTORS Application Class
ERErrorMonitor

Collects data from the error log and sends the data on new errors to the ERError consumer parameter.
ERQueueMonitor

Monitors the status of the receive queue and the send queue. Collects data on how the send and receive queues are utilizing dbspace and sends the data to the ERSendQueue and ERReceiveQueue consumer parameters. Also creates the IFMXER_QUEUE application instances.
ERReplicateMonitor

Collects data on all of the replicates you have defined and creates the IFMXER_Replicate, the IFMXER_Participant, and the IFMXER_REPLGRP application instances, populates the IFMXER_Replicate, the IFMXER_Participant, and the IFMXER_REPLGRP application InfoBoxes, and provides the data for the report on Replicates.
ERServerMonitor

Collects data on the servers defined in the PATROL KM for Informix ER and sends the data to the ERConnectState and ERServerState consumer parameters. Also creates the IFMXER_SERVERGRP instances.
ERSpoolMonitor

Monitors the aborted-transaction spooling (ATS) and the row-information spooling (RIS) processes and the ATS and RIS spooling file directories.
ERThreadMonitor

Monitors the status of all of the threads related to the enterprise replication process.















PATROL Integration for DashBoard 1.2.00

    


Table 13 PATROL Integration for DashBoard 1.2.00
Parameter



DASH_host Application Class

(You can only customize the Reachability parameter in this application class in PATROL. You must change all other values in the PATROL DashBoard product.)
Drops

Indicates the overall percent of dropped packets for the device.

Collector: Status (DASH_host)
CPU_load

Indicates the percentage of the CPU being used by that monitored device.

Collector: Status (DASH_host)
Memory_Usage

Indicates the memory usage for the currently monitored device.

Collector: Status (DASH_host)
Reachability

Indicates whether the device is accessible from the computer where PATROL Integration for DashBoard is processing.

Collector: Status (DASH_host)
Server_CPU_Load

Indicates the percentage of the CPU being used by a monitored server.

Collector: Status (Dash_host)
Status

Reports the status of communication with DashBoard and collects data form DashBoard. Uses gathered data to set the values for all the other parameters in the DASH_host and DASH_interface application classes.
Unavailability

Reports the percentage of down time for each discovered device. The percentage is determined only for those devices that are active, or those that are supposed to be monitored. For all of the devices that are active, Unavailability is defined as a relative portion of cases where there was no communication from all the monitored devices.

Collector: Status (Dash_host)
Workload

Indicates the total number of packets per second that are processed by the router or switch.

Collector: Status (Dash_host)
DASH_interface Application Class

(You can only customize the Non_Unicast_Proportion parameter in this application class in PATROL. You must change all other values in the PATROL DashBoard product.)
Drops

Indicates the percent of dropped packets for the current interface.

Collector: Status (Dash_host)
Collisions

Indicates the number of collisions per hour for an interface. Not all interfaces allow for collisions, so some instances of DASH_interface will not have this parameter.

Collector: Status (Dash_host)
Errors

Indicates the number of packet errors.

Collector: Status (Dash_host)
Input

Indicates the speed of the input bit stream for the current interface.

Collector: Status (Dash_host)
Non_Unicast

Indicates the overall input and output non-unicast (multicast and braodcast) packet rate for each interface.

Collector: Status (Dash_host)
Non_Unicast_Proportion

Indicates whether the percentage of all packets that are multicast and broadcast is acceptable considering the total traffic of the interface by applying the following rules:


If the total traffic is less than the minimum network utilization to apply thresholds, then the value of the Non_Unicast_Proportion parameter is OK.

Otherwise:

If the Non_Unicast parameter value is less than the warning threshold, the status of the parameter is OK.

If the Non_Unicast parameter value is greater than or equal to the warning threshold, but less than the alarm threshold, the status of the parameter is warning.

If the Non_Unicast parameter value is greater than or equal to the alarm threshold, the status of the parameter is alarm.

Collector: Status (DASH_host)
Output

Indicates the speed of the output bit stream for the current interface.

Collector: Status (Dash_host)
Unavailability

Indicates the percentage of down time for each discovered interface. The percentage is determined only for those interfaces that are active, or those that are supposed to be monitored. For all the interfaces that are active, Unavailability is defined as a relative portion of cases where there was no communication from all the monitored interfaces. This percent is later joined with all the other interface percentages to determine the percentage of unavailability for each device.

Collector: Status (Dash_host)
DASH_server Application Class

(You cannot customize any parameters of PATROL Integration for DashBoard in PATROL. You must change the values in the DashBoard product.)
Status

Reports on the status of communication with PATROL DashBoard, collects data from PATROL DashBoard, and creates all known host instances based on your selections from the Edit Object Filter command.















PATROL Internet Server Manager 6.2.00


Table 14 PATROL Internet Server Manager 6.2.00
Parameter



INET_Dns_Application Application Class
dnsCheckContent

Contains the text result of a DNS query.

Collector: dnsMonitor
dnsCheckContentStatus

Indicates whether the DNS query was answered successfully according to the content check definitions.

Collector: dnsMonitor
dnsCheckDownTime

Indicates the amount of time in seconds the query has not met the desired outcome.

Collector: dnsMonitor
dnsCheckResponseTime

Indicates the amount of time in milliseconds for the query to complete with a successful response. If the query returns an unexpected reply, this consumer parameter is still populated. If there is no reply from the DNS server, this parameter is not populated.

Collector: dnsMonitor
dnsCheckResponseTimeStdDev

Standard deviation of response time for the DNS record request. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: dnsMonitor
dnsCheckStatus

Indicates the availability status of a specific DNS Query request.

Collector: dnsMonitor
INET_Dns_Domain Application Class
domainContent

Indicates the content of the domain record for the monitored domain.

Collector: domainDaysLeft
domainContentStatus

Represents the success or failure of the content check operation on the domain record.

Collector: domainDaysLeft
domainDaysLeft

Contains the number of days remaining until a registered domain name expires with Internet naming authorities (for example, InterNic).
In some cases, this parameter may not contain correct information, usually because invalid results were obtained from the domain registrar. Check the content of whois queries to your registrar to verify results.
INET_Dns_Remote Application Class
remoteDnsDownTime

Shows the downtime for a remote DNS service.

Collector: dnsMonitor
remoteDnsResponseTime

Shows the response time for a remote DNS service.

Collector: dnsMonitor
remoteDnsResponseTimeStdDev

Standard deviation of response time for the remote DNS service. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: dnsMonitor
remoteDnsStatus

Shows the status for a remote DNS service.

Collector: dnsMonitor
INET_Dns_Server Application Class
A_requestRate

Displays the rate of Type A DNS requests.
This parameter is available only on Unix systems that are Bind-variant DNS servers.

Collector: dnsStatsMonitor
ANY_requestRate

Shows the number of Any DNS requests per minute.
This parameter is available only on Unix systems that are Bind-variant DNS servers.

Collector: dnsStatsMonitor
CNAME_requestRate

Shows the number of CNAME DNS requests per minute.

Collector: dnsStatsMonitor
configureLocal

Configures local server settings for a monitored DNS server. These settings include the process monitoring definitions, as well as commands for administering the server.
dnsDownTime

Shows the downtime for a DNS server or service.

Collector: dnsMonitor
dnsMonitor

Shows the status of a dnsMonitor operation. Any errors are annotated on the dnsMonitor graph plot points.
dnsResponseTime

Shows the response time, in milliseconds, for a DNS request.

Collector: dnsMonitor
dnsResponseTimeStdDeviation

Standard deviation of response time for the DNS server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: dnsMonitor
dnsStatsMonitor

Shows the status of the dnsStatsMonitor operation.
dnsStatus

Shows the status for this domain name service.

Collector: dnsMonitor
MX_requestRate

Shows the number of MX DNS requests per minute.
This parameter is available only on Unix systems that are Bind-variant DNS servers.

Collector: dnsStatsMonitor
processMonitor

Records the description of the errors generated in processMonitor.
PTR_requestRate

Shows the rate of PTR DNS requests.
This parameter is available only on Unix systems that are Bind-variant DNS servers.

Collector: dnsStatsMonitor
requestRate

Indicates the number of requests per minute.
This parameter is available only on Unix systems that are Bind-variant DNS servers.

Collector: dnsStatsMonitor
INET_Ftp_Server Application Class
configureLocal

Configures local server settings for a monitored FTP server. These settings include the process monitoring definitions, as well as commands for administering the server.
ftpDownTime

Indicates the downtime for the FTP server.

Collector: ftpMonitor
ftpLoginStatus

Reports the login status from the FTP server.

Collector: ftpMonitor
ftpMonitor

Performs client connections to an FTP server.
ftpResponseTime

Indicates the response time for the FTP request.

Collector: ftpMonitor
ftpResponseTimeStdDeviation

Standard deviation of response time for the FTP server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: ftpMonitor
ftpStatus

Indicates the connection status from the FTP server.

Collector: ftpMonitorr
ftpStatusCode

Indicates the connection status code from the FTP server.

Collector: ftpMonitor
processMonitor

Records process metrics for a monitored FTP server.
INET_Imap_Server Application Class
configureLocal

Configures local server settings for a monitored IMAP server. These settings include the process monitoring definitions, as well as commands for administering the server.
imapDownTime

Indicates the number of seconds of current down time for the IMAP server.

Collector: imapMonitor
imapMonitor

Performs client connections to an IMAP server.
imapResponseTime

Shows the response time for an IMAP request.

Collector: imapMonitor
imapResponseTimeStdDeviation

Standard deviation of response time for the IMAP server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: imapMonitor
imapStatus

Shows the connection status from the IMAP server.

Collector: imapMonitor
processMonitor

Records process metrics for a monitored IMAP server.
INET_Ldap_Server Application Class
configureLocal

Configures local server settings for a monitored LDAP server. These settings include the process monitoring definitions, as well as commands for administering the server.
ldapDownTime

Indicates the downtime for the LDAP server.

Collector: ldapMonitor
ldapMonitor

Performs client connections to an LDAP server.
ldapResponseTime

Indicates the response time for an LDAP request.

Collector: ldapMonitor
ldapResponseTimeStdDeviation

Standard deviation of response time for the LDAP server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: ldapMonitor
ldapStatus

Indicates the connection status from the LDAP server.

Collector: ldapMonitor
ldapStatusCode

Indicates the connection status code from the LDAP server.

Collector: ldapMonitor
processMonitor

Records process metrics for a monitored LDAP server.
INET_Mail_Remote Application Class
deferredMsgs

Shows the number of messages deferred to the mail hub from a mail server.

Collector: mailQueueMonitor
INET_Mail_Server Application Class
activeMsgs

Indicates the number of active messages in the mail queue.

Collector: mailQueueMonitor
bytesInRate

Indicates the rate of inbound messages in kilobytes per minute.

Collector: mailStatsMonitor
bytesOutRate

Indicates the rate of outbound messages in kilobytes per minute.

Collector: mailStatsMonitor
configureLocal

Configures local server settings for a monitored mail server. These settings include the process monitoring definitions, as well as commands for administering the server.
deferredMsgs

Shows the number of deferred messages in the mail queue.

Collector: mailQueueMonitor
mailQueueLength

Shows the number of requests in the mail queue in a Unix-based Netscape mail server or sendmail daemon.

Collector: mailQueueMonitor
mailQueueMonitor

Indicates the status of mailQueueMonitor operation.
mailStatsMonitor

Indicates the status of the mailStatsMonitor operation.
msgInRate

Indicates the number of inbound messages per minute.

Collector: mailStatsMonitor
msgOutRate

Indicates the number of outbound messages per minute.

Collector: mailStatsMonitor
processMonitor

Records process metrics for a monitored mail server.
smtpDownTime

Reports the downtime in seconds for the SMTP server.

Collector: smtpMonitor
smtpMonitor

Performs client connections to a SMTP-based mail server.
smtpResponseTime

Indicates the response time for the SMTP request.

Collector: smtpMonitor
smtpResponseTimeStdDeviation

Standard deviation of response time for the Mail server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: smtpMonitor
smtpStatus

Indicates the connection status from the mail server.

Collector: smtpMonitor
smtpStatusCode

Indicates the connection status code from the mail server.

Collector: smtpMonitor
INET_MS_ASP Application Class
AspCompilerErrorRate

Reports the rate at which ASP script compiler errors were generated.

Collector: AspMonitor
AspMemoryAllocated

Displays the total amount of memory, in kilobytes, currently allocated by ASP.

Collector: AspMonitor
AspMonitor

Discovers client connections to an ASP server and populates the ASP consumer parameters.
AspRqtFailedRate

Reports the number of ASP requests per minute that failed due to errors, authorization failures, and rejections.

Collector: AspMonitor
AspRqtQueued

Reports ASP requests queued as a percentage of all requests made.

Collector: AspMonitor
AspRqtTimedOutRate

Reports the ASP requests per minute that have timed out.

Collector: AspMonitor
AspRuntimeErrorRate

Reports ASP script runtime errors per minute.

Collector: AspMonitor
AspSessionCurrent

Displays the current number of sessions being serviced.

Collector: AspMonitor
AspSessionTimedOut

Displays the number of ASP sessions that have timed out.

Collector: AspMonitor
INET_MS_Ftp Application Class
connectionMaxPercent

Reports the percentage of connections compared to the maximum connections possible.

Collector: msPerfMonitor (INET_MS_Ftp)
connectionRate

Reports the number connections that are attempted per minute.

Collector: msPerfMonitor (INET_MS_Ftp)
dataRcvdRate

Reports the rate at which data is received by the server in kilobytes per minute.

Collector: msPerfMonitor (INET_MS_Ftp)
dataSentRate

Reports the rate at which data is sent by the server in kilobytes per minute.

Collector: msPerfMonitor (INET_MS_Ftp)
filesRcvdRate

Indicates the rate at which files are received.

Collector: msPerfMonitor (INET_MS_Ftp)
filesSentRate

Indicates the rate at which files are sent.

Collector: msPerfMonitor (INET_MS_Ftp)
msPerfMonitor

Records performance counters for a Microsoft FTP server.
INET_MS_Index Application Class
cachedQueries

Reports the number of completed queries in the cache.

Collector: msPerfMonitor (INET_MS_Index)
cacheHitPercent

Indicates the percentage of queries found in the query cache.

Collector: msPerfMonitor (INET_MS_Index)
cacheMissPercent

Reports the percentage of queries not found in the query cache.

Collector: msPerfMonitor (INET_MS_Index)
cacheUsedPercent

Indicates the percentage of maximum shared memory cache currently containing cached data.

Collector: msPerfMonitor (INET_MS_Index)
msPerfMonitor

Records performance counters for a Microsoft Index server.
pendingQueries

Indicates the number of queued queries.

Collector: msPerfMonitor (INET_MS_Index)
queryRate

Indicates the number of queries per minute.

Collector: msPerfMonitor (INET_MS_Index)
INET_MS_ISA Application Class
BWC_InboundBytes

Reports the current inbound bandwidth, in bytes per seconds, for the Web proxy service.

Collector: msPerfMonitor (INET_MS_ISA)
BWC_OutboundBytes

Reports the current outbound bandwidth, in bytes per second, for the Web proxy service.

Collector: msPerfMonitor (INET_MS_ISA)
msPerfMonitor

Gathers performance counter data for the Microsoft ISA 2000 server. If the msPerfMonitor parameter encounters an error warning, the textual description of the problem is set as the parameters value. The parameter then issues an alarm or warning for the duration of the problem.
PROXY_CacheRunningHitRatio

Reports the percent of Web proxy client request that have been served, using cached data from the total number of Web proxy client requests over the last 10,000 requests serviced.

Collector: msPerfMonitor (INET_MS_ISA)
PROXY_CurrentUsers

Reports the number of current users currently connected to the Web Proxy service.

Collector: msPerfMonitor (INET_MS_ISA)
PROXY_TotalFailRequests

Reports the total number of requests that have failed to be processed due to errors on the Web Proxy service. Errors can be a result of the Web Proxy service failing to locate a requested server URL on the Internet. Errors can also occur if the Web Proxy client is denied access to the requested URL.

Collector: msPerfMonitor (INET_MS_ISA)
PROXY_TotalRequests

Reports the total number of request made to the Web proxy service since the last polling cycle.

Collector: msPerfMonitor (INET_MS_ISA)
PROXY_TotalSitesDenied

Reports the total number of Internet sites that the Web Proxy service has denied access.

Collector: msPerfMonitor (INET_MS_ISA)
INET_MS_lis Application Class
asyncIoAllowPercent

Indicates the percentage of asynchronous input/output requests that were allowed to process by the bandwidth throttler.

Collector: msPerfMonitor (INET_MS_lis)
asyncIoBlockPercent

Indicates the percentage of asynchronous input/output requests that were blocked by the bandwidth throttler.

Collector: msPerfMonitor (INET_MS_lis)
asyncIoRate

Reports the number of asynchronous input/output requests per minute.

Collector: msPerfMonitor (INET_MS_lis)
asyncIoRejectPercent

Indicates the percentage of asynchronous input/output requests that were rejected by the bandwidth throttler.

Collector: msPerfMonitor (INET_MS_lis)
cacheHitPercent

Reports the ratio of the number of hits to the number of cache requests.

Collector: msPerfMonitor (INET_MS_lis)
msPerfMonitor

Records performance counters for all services running under a Microsoft Internet Information server.
INET_MS_Locator Application Class
ilsAppsRegisterRate

Reports the number of registrations per minute for the ILS application.

Collector: msPerfMonitor (INET_MS_Locator)
ilsAppsUnRegisterRate

Reports the number of unregistrations per minute for the ILS application.

Collector: msPerfMonitor (INET_MS_Locator)
ilsDirectoryRequestRate

Reports the number of requests per minute for the ILS directory.

Collector: msPerfMonitor (INET_MS_Locator)
ilsUserRegisterMaxPercent

Reports the percentage of ILS registered users (the ratio of current ILS registered users to the ILS server registration limit).

Collector: msPerfMonitor (INET_MS_Locator)
ldapConnectMaxPercent

Reports the percentage used of the maximum LDAP server connections (the ratio of current client connections to the concurrent client connection limit).

Collector: msPerfMonitor (INET_MS_Locator)
ldapConnectRate

Indicates the number of LDAP server connections per minute.

Collector: msPerfMonitor (INET_MS_Locator)
msPerfMonitor

Records performance counters for a Microsoft Internet Locator server.
queueLength

Reports the number of requests waiting in the ILS server queue.

Collector: msPerfMonitor (INET_MS_Locator)
whitePageAuthFailRate

Indicates number of white-page authorization failures per minute.

Collector: msPerfMonitor (INET_MS_Locator)
INET_MS_News Application Class
articlePostRate

Reports the rate at which news articles were posted.

Collector: msPerfMonitor (INET_MS_News)
articleRecvRate

Reports the rate at which news articles were received by the server.

Collector: msPerfMonitor (INET_MS_News)
articleSentRate

Reports the rate at which news articles were sent by the server.

Collector: msPerfMonitor (INET_MS_News)
cntlMsgFailPercent

Reports the percentage of received control messages that failed.

Collector: msPerfMonitor (INET_MS_News)
inboundConnectMaxPercent

Reports the ratio of current inbound connections to the concurrent inbound connection limit.

Collector: msPerfMonitor (INET_MS_News)
inboundConnectRate

Reports the number of inbound news server connections per minute.

Collector: msPerfMonitor (INET_MS_News)
logonAttemptFailPercent

Indicates the percentage of login attempts that failed.

Collector: msPerfMonitor (INET_MS_News)
logonAttemptRate

Indicates the number of logo attempts per minute.

Collector: msPerfMonitor (INET_MS_News)
msPerfMonitor

Records performance counters for a Microsoft News server.
outboundConnectErrorPercent

Reports the percentage of outbound server connections that failed.

Collector: msPerfMonitor (INET_MS_News)
INET_MS_Web Application Class
dataRcvdRate

Reports the rate at which data is received by the server in kilobytes per minute.

Collector: msPerfMonitor (INET_MS_Web)
dataSentRate

Reports the rate at which data is sent by the server in kilobytes per minute.

Collector: msPerfMonitor (INET_MS_Web)
filesRcvdRate

Indicates the rate at which files are received.

Collector: msPerfMonitor (INET_MS_Web)
filesSentRate

Indicates the rate at which files are sent.

Collector: msPerfMonitor (INET_MS_Web)
msPerfMonitor

Records performance counters for the Web server portion of a Microsoft Internet Information server.
INET_News_Server Application Class
configureLocal

Configures local server settings for a monitored news server. These settings include the process monitoring definitions, as well as commands for administering the server.
nntpDownTime

Reports the downtime in seconds for the NNTP server.

Collector: nntpMonitor
nntpMonitor

Performs client connections to a NNTP-based news server.
nntpResponseTime

Indicates the response time for the NNTP request.

Collector: nntpMonitor
nntpResponseTimeStdDeviation

Standard deviation of response time for the NNTP news server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: nntpMonitor
nntpStatus

Indicates the connection status from the news server.

Collector: nntpMonitor
nntpStatusCode

Indicates the connection status code from the news server.

Collector: nntpMonitor
processMonitor

Records process metrics for a monitored news server.
INET_Pop3_Server Application Class
configureLocal

Configures local server settings for a monitored server. These settings include the process monitoring definitions, as well as commands for administering the server.
pop3DownTime

Reports the downtime in seconds for the POP3 server.

Collector: pop3Monitor
pop3Monitor

Records client connections to a POP3-based mail server.
pop3ResponseTime

Indicates the response time for the POP3 request.

Collector: pop3Monitor
pop3ResponseTimeStdDeviation

Standard deviation of response time for the POP3 server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: pop3Monitor
pop3Status

Indicates the connection status from the POP3 server.

Collector: pop3Monitor
pop3StatusCode

Indicates the connection status code from the POP3 server.

Collector: pop3Monitor
processMonitor

Records process metrics for a monitored POP3 server.
INET_Portmon_Inst Application Class
portContent

Indicates the contents returned from the monitored port.

Collector: portMonitor
portContentStatus

Indicates the content status of the monitored port. This parameter measures the result of the content check operation for the monitored port.

Collector: portMonitor
portDownTime

Indicates the downtime, in seconds, for the monitored port.

Collector: portMonitor
portMonitor

Collector parameter that performs client connections for each monitored port instance. If the portMonitor parameter encounters an error or warning, the textual description of the problem is set as the parameters value. The parameter then issues an alarm or warning for the duration of the problem.
portResponseTime

Indicates the response time, in milliseconds, for the monitored port.

Collector: portMonitor
portResponseTimeStdDeviation

Standard deviation of response time for the port monitor. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: portMonitor
portStatus

Indicates the status of th monitored ports.
INET_Process Application Class
childProcesses

Reports the number of child processes running on the server.

Collector:
cpuUsage

Reports the percentage of CPU usage by server/children processes.

Collector: processMonitor
downTime

Indicates the time the process has been down.

Collector: processMonitor
idleTime

Reports the number of minutes that the process has been idle.

Collector: processMonitor
memoryUsage

Indicates the memory usage by the server/child processes.

Collector: processMonitor
processCount

Indicates the number of processes running on the server.

Collector: processMonitor
INET_Protocol_Tcp Application Class
numStateClose_Wait

Indicates the number of connections in CLOSE_WAIT state.

Collector: tcpMonitor
numStateClosed

Indicates the number of connections in CLOSED state.

Collector: tcpMonitor
numStateClosing

Indicates the number of connections in CLOSING state.

Collector: tcpMonitor
numStateEstablished

Indicates the number of connections in ESTABLISHED state.

Collector: tcpMonitor
numStateFin_Wait_1

Indicates the number of connections in FIN_WAIT_1 state.

Collector: tcpMonitor
numStateFin_Wait_2

Indicates the number of connections in FIN_WAIT_2 state.

Collector: tcpMonitor
numStateLast_Ack

Indicates the number of connections in LAST_ACK state.

Collector: tcpMonitor
numStateListen

Indicates the number of connections in LISTEN state.

Collector: tcpMonitor
numStateSyn_Received

Indicates the number of connections in SYN_RECEIVED state.

Collector: tcpMonitor
numStateSyn_Sent

Indicates the number of connections in SYN_SENT state.

Collector: tcpMonitor
numStateTime_Wait

Indicates the number of connections in TIME_WAIT state.

Collector: tcpMonitor
tcpIn

Indicates the rate of incoming TCP data.

Collector: tcpMonitor
tcpMonitor

Collects TCP protocol statistics.
tcpOut

Indicates the rate of outgoing TCP data.

Collector: tcpMonitor
tcpRetran

Indicates the absolute delta value of retransmissions bytes/segments from one collection cycle to the next.

Collector: tcpMonitor
INET_Proxy_Server Application Class
configureFilesys

Configures the associated file system settings for a monitored server. These settings include the locations of the directories or log files.
configureLocal

Configures local server settings for a monitored server. These settings include the process monitoring definitions, as well as commands for administering the server.
httpDownTime

Indicates the downtime, in seconds, for the HTTP server.

Collector: httpMonitor (INET_Proxy_Server)
httpResponseTime

Reports the response time for the request.

Collector: httpMonitor (INET_Proxy_Server)
httpResponseTimeStdDeviation

Standard deviation of response time for the proxy server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: httpMonitor (INET_Proxy_Server)
httpMonitor

Performs client connections to an HTTP-based proxy server.
httpStatus

Indicates the connection status from the proxy server.

Collector: httpMonitor (INET_Proxy_Server)
httpStatusCode

Indicates the connection status code from the proxy server.

Collector: httpMonitor (INET_Proxy_Server)
processMonitor

Records process metrics for a monitored proxy server.
INET_Servers Application Class
addServers

Adds servers that are not auto discovered to be monitored.
INET_Services Application Class
confInst

Runs each time the PATROL agent is started and discovers Internet servers available for monitoring on the local system.
baseMon

Gathers CPU and memory usage values to create a baseline matrix of the local systems performance. This matrix is used to investigate the role of CPU or memory usage as a probable cause in case of a server failure. For Windows, this parameter depends on the PATROL Perform Agent running on the system.
enterKeyPass

Periodically prompts you for the key store password if you are using client side certificates. If you do not use client side certificates, or if you use client side certificates and the password has been provided, this parameter is inactive.
INET_Web_AccLog Application Class
accessLogMonitor

Analyzes the access log and populates the accessLogSize and accessLogUpdateTime parameters. Sets parameters in the other access log application classes.
accLogPctRead

Reports the percentage of log read during the interval. This can be used by the user in conjunction with the governor value to tune the operation of the accessLogMonitor collector.

Collector: accessLogMonitor
accessLogSize

Indicates the size of the proxy server's Access Log in megabytes.

Collector: accessLogMonitor
accessLogUpdateTime

Indicates the time since the last Access Log file update.

Collector: accessLogMonitor
INET_Web_AccLogStat Application Class
procTime

Reports the total processing time of all requests matching this access log statistic.

Collector: accessLogMonitor
procTimeAverage

Reports the average processing time of all requests matching this access log statistic.

Collector: accessLogMonitor
procTimePercent

Reports the percentage of the processing time for all requests matching this access log statistic.

Collector: accessLogMonitor
requests

Indicates the total requests processed by the server during the interval.

Collector: accessLogMonitor
requestRatePerHour

Indicates the rate at which requests were received by the server during a one-hour interval.
requestRatePerMinute

Indicates the rate at which requests were received by the server during a one-minute interval.

Collector: accessLogMonitor
requestRatePerSec

Indicates the rate at which requests were received by the server during a one-second interval.

Collector: accessLogMonitor
requestRateStdDev

Deviation of requestRatePerMin from the average value over the previous 40 polling cycles. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: accessLogMonitor
requestsPeak

Indicates the peak rate at which requests were received by the server during a one-minute collection interval, based on the peak interval setting.

Collector: accessLogMonitor
requestsPeakPercent

Reports the ratio of the rate of requests (requests parameter) to the peak rate of requests (requestsPeak parameter).

Collector: accessLogMonitor
requestsPercent

Reports the ratio of the number of requests for this request instance to the number of all requests.

Collector: accessLogMonitor
responseSize

Indicates the size of the responses processed by the server in kilobytes per minute.

Collector: accessLogMonitor
responseSizeAverage

Indicates the average size of the responses processed by the server during a one-minute interval.

Collector: accessLogMonitor
responseSizePeak

Indicates the peak size of the responses in kilobytes per minute during a one-minute collection interval.

Collector: accessLogMonitor
responseSizePeakPercent

Indicates the ratio of the size of this response instance (responseSize parameter) to the peak size of all responses (responseSizePeak parameter).

Collector: accessLogMonitor
responseSizePercent

Indicates the ratio of the size of this response instance to the size of all responses.

Collector: accessLogMonitor
INET_Web_Application Application Class
badLinks

Displays the number of bad links for this URL. To view the results of a Link Check operation, double-click the parameter's annotation point.

Collector: httpMonitor (INET_Web_server)
pageApplicationsTime

Reports the total response time, in milliseconds, for all application elements. This parameter is inactive by default. To activate this parameter, use the Page response time preference option in the URL Monitoring dialog box.

Collector: httpMonitor (INET_Web_server)
pageContent

Indicates the contents of the URL.

Collector: httpMonitor (INET_Web_server)
pageContentStatus

Indicates the content status of the URL.

Collector: httpMonitor (INET_Web_server)
pageDownTime

Indicates the downtime for the URL.

Collector: httpMonitor (INET_Web_server)
pageImagesTime

Reports the total response time, in milliseconds, for all image elements. This parameter is inactive by default. To activate this parameter, use the Page response time preference option in the URL Monitoring dialog box.

Collector: httpMonitor (INET_Web_server)
pageResponseTime

Indicates the response time (in milliseconds) for the URL.

Collector: httpMonitor (INET_Web_server)
pageResponseTimeStdDeviation

Standard deviation of average URL response time. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: httpMonitor (INET_Web_server)
pageStatus

Indicates the connection status from the URL.

Collector: httpMonitor (INET_Web_server)
pageStatusCode

Indicates the connection status code from the URL.

Collector: httpMonitor (INET_Web_server)
pageTextTime

Reports the total response time, in milliseconds, for all text elements. This parameter is inactive by default. To activate this parameter use the Page Response time preferences option in the URL Monitoring dialog box.

Collector: httpMonitor (INET_Web_server)
linkMonitor

Indicates the status of the linkMonitor operation for this URL. Any errors encountered by the linkMonitor will be annotated onto data points in the linkMonitor graph.
INET_Web_ClientHost Application Class
procTime

Reports the total processing time of the request.

Collector: accessLogMonitor
procTimeAverage

Reports the average processing time of the requests.

Collector: accessLogMonitor
procTimePercent

Reports the percentage of the processing time of all requests matching this access log statistic.

Collector: accessLogMonitor
requests

Totals all requests processed by the server in the interval.

Collector: accessLogMonitor
requestRatePerHour

Indicates the rate at which requests were received by the server during a one-hour interval.
requestRatePerMinute

Indicates the rate at which requests were received by the server during a one-minute interval.

Collector: accessLogMonitor
requestRatePerSec

Indicates the rate at which requests were received by the server during a one-second interval.

Collector: accessLogMonitor
requestsPeak

Indicates the peak rate at which requests were received by the server during a one-minute collections interval.

Collector: accessLogMonitor
requestsPeakPercent

Reports the ratio of the rate of requests (requests parameter) to the peak rate of requests (requestsPeak parameter).

Collector: accessLogMonitor
requestsPercent

Reports the ratio of the number of requests for this request instance to the number of all requests.

Collector: accessLogMonitor
responseSize

Indicates the size of responses processed by the server in kilobytes per minute.

Collector: accessLogMonitor
responseSizeAverage

Indicates the average size of responses processed by the server during a one-minute interval.

Collector: accessLogMonitor
responseSizePeak

Indicates the peak rate of responses during a one-minute collection interval.

Collector: accessLogMonitor
responseSizePeakPercent

Indicates the ratio of the size of this response instance (responseSize parameter) to the peak size of all responses (responseSizePeak parameter).

Collector: accessLogMonitor
responseSizePercent

Indicates the ratio of the size of this response instance to the size of all responses.

Collector: accessLogMonitor
INET_Web_ErrLog
errorLogMonitor

Performs error log analysis and populates the consumer parameters of the INET_Web_ErrLogStat application class. It also sets the values of the errorLogSize and errorLogUpdateTime parameters in the INET_Proxy_Server application class. If the parameter encounters an error or warning, the textual description of the problem is set as the parameters value, and the errorLogMonitor parameter then issues an alarm or warning for the duration of the problem.
errorLogSize

Indicates the size of the error log file.

Collector: errorLogMonitor
errorLogUpdateTime

Indicates the number of minutes since the last Error Log File update.

Collector: errorLogMonitor
INET_Web_ErrLogStat Application Class
errorPercent

Reports errors of a given type as a percentage of the total errors that occurred during a poll period.

Collector: errorLogMonitor
errorRate

Indicates the number of errors per minute for a given error type.

Collector: errorLogMonitor
errors

Indicates the number of errors.

Collector: errorLogMonitor
INET_Web_Server Application Class
certChain

Displays information about each certificate in the chain.

Collector: httpMonitor (INET_Web_Server)
certDaysLeft

Indicates the number of days left until the certificate expires. If there is more than one component in the certificate chain, this parameter indicates the minimum number of days until one of the components expires.

Collector: httpMonitor (INET_Web_Server)
configureFilesys

Configures the associated file system settings for a monitored server. These settings include the locations of the directories or log files.
configureLocal

Configures local server settings for a monitored server. These settings include the process monitoring definitions, as well as commands for administering the server.
httpBusyThreads

Indicates the number of busy threads. For Apache, this corresponds to BusyWorkers. For Sun ONE, it corresponds to ActiveThreads.

Collector: httpMonitor (INET_Web_Server)
httpDownTime

Indicates the downtime for the Web server.

Collector: httpMonitor (INET_Web_Server)
httpIdleThreads

Indicates the number of idle threads. For Apache, this corresponds to IdleWorkers. For Sun ONE, it corresponds to WaitingThreads.

Collector: httpMonitor (INET_Web_Server)
httpMonitor

Performs client connections to a Web server.
httpRemoteResponseTime

Reports the remote response time for the monitored Web server.

Collector: httpMonitor (INET_Web_Server)
httpResponseTime

Reports the response time for the requested URL.

Collector: httpMonitor (INET_Web_Server)
httpResponseTimeStdDeviation

Standard deviation of response time for the web application server. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: httpMonitor (INET_Web_server)
httpStatus

Indicates the connection status from the Web server.

Collector: httpMonitor (INET_Web_Server)
httpStatusCode

Indicates the connection status code from the Web server.

Collector: httpMonitor (INET_Web_Server)
httpThreadSlotsLeft

Indicates the number of thread slots remaining for creation of new threads. For Apache, this corresponds to the number of open slots identified by the . character in the stats page. For Sun ONE, it corresponds to ThreadLimits.

Collector: httpMonitor (INET_Web_Server)
processMonitor

Records process metrics for a monitored Web server.
INET_Web_Url Application Class
procTime

Reports the total processing time of the request.

Collector: accessLogMonitor
procTimeAverage

Reports the average processing time of requests.

Collector: accessLogMonitor
procTimePercent

Reports the percentage of the processing time of requests.

Collector: accessLogMonitor
requests

Indicates the number of requests to the server in a one-minute interval.

Collector: accessLogMonitor
requestRatePerHour

Indicates the rate at which requests were received by the server during a one-hour interval.

Collector: accessLogMonitor
requestRatePerMinute

Indicates the rate at which requests were received by the server during a one-minute interval.

Collector: accessLogMonitor
requestRatePerSec

Indicates the rate at which requests were received by the server during a one-second interval.

Collector: accessLogMonitor
requestsPeak

Indicates the peak rate at which requests were received by the server during a one-minute collections interval.

Collector: accessLogMonitor
requestsPeakPercent

Reports the ratio of the rate of requests (requests parameter) to the peak rate of requests (requestsPeak parameter).

Collector: accessLogMonitor
requestsPercent

Reports the ratio of the number of requests for this request instance to the number of all requests.

Collector: accessLogMonitor
responseSize

Indicates the size of responses processed by the server in kilobytes per minute.

Collector: accessLogMonitor
responseSizeAverage

Indicates the average size of responses processed by the server during a one-minute interval.

Collector: accessLogMonitor
responseSizePeak

Indicates the peak rate of responses in kilobytes per minute during a one-minute collection interval.

Collector: accessLogMonitor
responseSizePeakPercent

Indicates the ratio of the size of this response instance (responseSize parameter) to the peak size of all responses (responseSizePeak parameter).

Collector: accessLogMonitor
responseSizePercent

Indicates the ratio of the size of this response instance to the size of all responses.

Collector: accessLogMonitor
INET_Web_User Application Class
procTime

Reports the total processing time of the request.

Collector: accessLogMonitor
procTimeAverage

Reports the average processing time of requests.

Collector: accessLogMonitor
procTimePercent

Reports the percentage of the processing time of ALL requests.

Collector: accessLogMonitor
requestRatePerHour

Indicates the rate at which requests were received by the server during a one-hour interval.

Collector: accessLogMonitor
requestRatePerMinute

Indicates the rate at which requests were received by the server during a one-minute interval.

Collector: accessLogMonitor
requestRatePerSec

Indicates the rate at which requests were received by the server during a one-second interval.

Collector: accessLogMonitor
requests

Indicates the number of requests to the server in a one-minute interval.

Collector: accessLogMonitor
requestsPeak

Indicates the peak rate at which requests were received by the server during a one-minute collections interval.

Collector: accessLogMonitor
requestsPeakPercent

Reports the ratio of the rate of requests (requests parameter) to the peak rate of requests (requestsPeak parameter).

Collector: accessLogMonitor
requestsPercent

Reports the ratio of the number of requests for this request instance to the number of all requests.

Collector: accessLogMonitor
responseSize

Indicates the size of responses processed by the server in kilobytes per minute.

Collector: accessLogMonitor
responseSizeAverage

Indicates the average size of responses processed by the server during a one-minute interval.

Collector: accessLogMonitor
responseSizePeak

Indicates the peak size of responses in kilobytes per minute during a one-minute collection interval.

Collector: accessLogMonitor
responseSizePeakPercent

Indicates the ratio of the size of this response instance (responseSize parameter) to the peak size of all responses (responseSizePeak parameter).

Collector: accessLogMonitor
responseSizePercent

Indicates the ratio of the size of this response instance to the size of all responses.

Collector: accessLogMonitor
INET_Web_VirtualServer Application Class
procTime

Reports the total processing time of the request.

Collector: accessLogMonitor
procTimeAverage

Reports the average processing time of requests.

Collector: accessLogMonitor
procTimePercent

Reports the percentage of the processing time of requests.

Collector: accessLogMonitor
requestRatePerHour

Indicates the rate at which requests were received by the server during a one-hour interval.

Collector: accessLogMonitor
requestRatePerMinute

Indicates the rate at which requests were received by the server during a one-minute interval.

Collector: accessLogMonitor
requestRatePerSec

Indicates the rate at which requests were received by the server during a one-second interval.

Collector: accessLogMonitor
requests

Indicates the number of requests to the server in a one-minute interval.

Collector: accessLogMonitor
requestsPeak

Indicates the peak rate at which requests were received by the server during a one-minute collections interval.

Collector: accessLogMonitor
requestsPeakPercent

Reports the ratio of the rate of requests (requests parameter) to the peak rate of requests (requestsPeak parameter).

Collector: accessLogMonitor
requestsPercent

Reports the ratio of the number of requests for this request instance to the number of all requests.

Collector: accessLogMonitor
responseSize

Indicates the size of responses processed by the server in kilobytes per minute.

Collector: accessLogMonitor
responseSizeAverage

Indicates the average size of responses processed by the server during a one-minute interval.

Collector: accessLogMonitor
responseSizePeak

Indicates the peak rate of responses in kilobytes per minute during a one-minute collection interval.

Collector: accessLogMonitor
responseSizePeakPercent

Indicates the ratio of the size of this response instance (responseSize parameter) to the peak size of all responses (responseSizePeak parameter).

Collector: accessLogMonitor
responseSizePercent

Indicates the ratio of the size of this response instance to the size of all responses.

Collector: accessLogMonitor
INET_Websvc_Inst Application Class
wsvcAvailability

Displays the percentage of the Web services operations with an OK state.

Collector: wsvcMonitor
wsvcMonitor

Collects all availability and performance data for Web services consumer parameters in the Websvc_Inst and Websvc_Operation application classes.
wsvcResponseTime

Displays the average response time of the Web services operations.

Collector: wsvcMonitor
wsvcResponseTimeStdDeviation

Standard deviation of response time for the Web service. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: wsvcMonitor
wsvcStatus

Indicates the availability of all operations in a Web service. This parameter reflects the worst status among all operations in a monitored Web service. If any one operation is unavailable, this parameter will show a status of unavailable.

Collector: wsvcMonitor
INET_Websvc_Operation Application Class
wsvcOpContent

Displays response content from the Web service operation.

Collector: wsvcMonitor
wsvcOpContentStatus

Indicates whether a response meets criteria defined by the Content Check menu command. If the response meets criteria, it has a status of OK. if it does not, it has a status of ALARM. This parameter is inactive until the Content Check is enabled for the monitored Web service operation.

Collector: wsvcMonitor
wsvcOpDownTime

Displays the number of seconds that a Web service was available.

Collector: wsvcMonitor
wsvcOpResponseTime

Displays the response time of a Web service operation.

Collector: wsvcMonitor
wsvcOpResponseTimeStdDeviation

Standard deviation of response time for the Web service operation. This parameter contains the number of standard deviations above the average for the current value. This parameter is not populated (has no value) if there are less than 40 historical data points. The alarm is triggered only if the standard deviation is above the threshold for 3 or more consecutive collection cycles.

Collector: wsvcMonitor
wsvcOpStatus

Indicates the availability of the Web service operation. This parameter indicates whether the operation is responding (OK state) or not (Alarm state). SOAP fault code is provided in annotations, if available.

Collector: wsvcMonitor
INET_Websvc_Top Application Class
wsvcCollectorStatus

Indicates the status of communication between KM scripts (discovery and collectors) and the tomcat web server. The parameter is set by INET_Websvc_Top.km discovery and is annotated with any error messages produced by tomcat.

Collector: discovery















PATROL for iSeries 3.2.10


Table 15 PATROL for iSeries 3.2.10
Parameter



OS400_ACTJOBS Application Class
_Nbr_Above_CPU

Displays the number of active jobs above the CPU threshold.

Collector: OS400ACTJOBSCol
_Nbr_Act_Jobs

Displays the number of active jobs.

Collector: OS400ACTJOBSCol
_Nbr_Matching_Status

Displays the number of active jobs with matching status.

Collector: OS400ACTJOBSCol
OS400_ASP Application Class
Avg_Arm_Util

Indicates the average percentage of unit processor utilization.

Collector: OS400ASPCol
IO_Size

Indicates the average size of I/O requests.

Collector: OS400ASPCol
Nbr_Busy_Arms

Displays the number of disk arms with processor utilization above the user-specified threshold.

Collector: OS400ASPCol
Nbr_Failed_Arms

Displays the number of disk arms reporting failure.

Collector: OS400ASPCol
Nbr_IOs

Displays the total number of I/O requests.

Collector: OS400ASPCol
Nbr_Reads

Indicates the number of read requests.

Collector: OS400ASPCol
Nbr_Writes

Displays the number of write requests.

Collector: OS400ASPCol
Read_Size

Displays the average size of the read requests.

Collector: OS400ASPCol
Space_Used

Displays the percentage of space used.

Collector: OS400ASPCol
Write_Size

Displays the average size of the write requests.

Collector: OS400ASPCol
OS400_BATCH Application Class
Num_Batch_Ending

Displays the number of batch jobs ending.

Collector: OS400BATCHCol
Num_Batch_Held_onQ

Displays the number of batch jobs held on a job queue.

Collector: OS400BATCHCol
Num_Batch_Held_Run

Displays the number of batch jobs held while running.

Collector: OS400BATCHCol
Num_Batch_Msg_Wait

Displays the number of batch jobs waiting for messages.

Collector: OS400BATCHCol
Num_Batch_on_HeldQ

Displays the number of batch jobs waiting on a held job queue.

Collector: OS400BATCHCol
Num_Batch_on_UnassignedQ

Displays the number of batch jobs waiting on an unassigned job queue.

Collector: OS400BATCHCol
Num_Batch_Running

Displays the number of running batch jobs.

Collector: OS400BATCHCol
Num_Batch_Waiting_to_Run

Displays the number of batch jobs waiting to run.

Collector: OS400BATCHCol
OS400_CFGDESC Application Class
There are no parameters associated with the OS400_CFGDESC Application Class.
OS400_CFGREPORTS Application Class
Report_cfg_count

Displays the number of report items.

Collector: OS400_CFGDESC discovery
OS400_CONNECTION Application Class
_ConnectionCol

Collects connection information.
_Nbr_Connections

Displays the total number of connections to the system.

Collector: _ConnectionCol
OS400_CONNECTIONID Application Class
Bytes_Sent

Displays the total number of bytes sent to the remote host by all qualifying connections since they were established.

Collector: _ConnectionCol
Bytes_Received

Displays the total number of bytes received from the remote host by all qualifying connections since they were established.

Collector: _ConnectionCol
Max_Idle_Time

Displays the idle time, in seconds, of the qualifying connection that has been idle for the longest time.

Collector: _ConnectionCol
Max_State_Code

Displays the maximum status code for the qualifying connections.

Collector: _ConnectionCol
Nbr_Connections

Displays the number of connections that match the criteria entered for this connection ID.

Collector: _ConnectionCol
OS400_DCM Application Class
DCM_Alert

Indicates whether the DCM is active.

Collector: OS400DCMCol
OS400ACTJOBSCol

Gathers all of the parameters and variables for active and monitored jobs (in the Active Jobs application class) and some of the parameters and variables for the System application class.
OS400ASPCol

Gathers all of the parameters and variables for the ASP application class.
OS400BATCHCol

Gathers all of the parameters and variables for the Batch application class.
OS400DCMCol

Starts the DCM and establishes communication with the resulting process.
OS400POOLCol

Gathers all of the parameters and variables for the Main Storage Pools application class.
OS400SUBSYSCol

Gathers all of the parameters and variables for the Subsystem application class.
OS400SYSTEMCol

Gathers the majority of the parameters and variables for the System application class.
OS400USERCol

Gathers all of the parameters and variables for the User application class.
OS400_IFS Application Class
There are no parameters associated with the OS400_IFS Application Class.
OS400_INTERFACE Application Class
_InterfaceCol

Collects interface information.
_Nbr_Act_Interfaces

Displays the number of interfaces found on the system with a status of Active or Starting.

Collector: _InterfaceCol
OS400_JOBID Application Class
CPU

Displays the total CPU utilization for all active jobs matching the selection criteria for this job ID.

Collector: OS400ACTJOBSCol
IO

Displays the total I/O for all active jobs matching the selection criteria for this job ID

Collector: OS400ACTJOBSCol
Max_status_code

Displays the maximum status code found among all the active jobs matching the monitoring criteria. This parameter is not updated when there are no jobs matching the monitoring criteria.

Collector: OS400ACTJOBSCol
Min_status_code

Displays the minimum status code found among all the active jobs matching the monitoring criteria. This parameter is not updated when there are no jobs matching the monitoring criteria.

Collector: OS400ACTJOBSCol
Nbr_Act_Jobs

Displays the number of active jobs matching the selection criteria for this job ID.

Collector: OS400ACTJOBSCol
Resp

Displays the average interactive response time for all interactive jobs, matching the selection criteria for this job ID.

Collector: OS400ACTJOBSCol
Trans

Displays the total number of transactions for all interactive jobs matching the selection criteria for this job ID.

Collector: OS400ACTJOBSCol
OS400_JOBQ Application Class
_Nbr_HeldQs_wJobs

Displays the number of held job queues with jobs.

Collector: OS400_JOBQ discovery
_Nbr_JobQs_wJobs

Displays the number of job queues with jobs.

Collector: OS400_JOBQ discovery
_Nbr_UnassignQs_wJobs

Displays the number of job queues not assigned to an active subsystem with jobs.

Collector: OS400_JOBQ discovery
OS400_LIBRARY Application Class
There are no parameters associated with the OS400_LIBRAR Application Class.
OS400_MONIFS Application Class
_IFSCol

Collects the size and count information for this path entry.
IFS_Nbr_Objects

Displays the total number of monitored objects in this path.

Collector: _IFSCol
IFS_Nbr_Large_Objects

Displays the total number of monitored objects in this path that are larger than the specified threshold.

Collector: _IFSCol
IFS_Size

Displays the cumulative size of the monitored objects in this path.

Collector: _IFSCol
OS400_MONINTERFACE Application Class
Bytes_Sent

Displays the number of bytes transmitted out of the interface since the last interval, including framing characters.

Collector: _InterfaceCol
Bytes_Received

Displays the number of bytes received on the interface since the last interval, including framing characters.

Collector: _InterfaceCol
Interface_Out_Pax_Disc

Displays the number of outbound packets which were chosen to be discarded since the last interval even though no errors had been detected to prevent their being transmitted.

Collector: _InterfaceCol
Interface_In_Pax_Disc

Displays the number of inbound packets which were chosen to be discarded since the last interval even though no errors had been detected to prevent their being delivered to a higher-layer protocol.

Collector: _InterfaceCol
Interface_Pax_Sent

Displays the total number of packets that higher-level protocols requested to be transmitted to a unicast (broadcast or multicast) address since the last interval, including those that were discarded or not sent.

Collector: _InterfaceCol
Interface_Pax_Received

Displays the number of unicast and non-unicast (broadcast or multicast) packets delivered to a higher-layer protocol since the last interval.

Collector: _InterfaceCol
Interface_Phy_Status_Code

Displays the status code value representing the current operational state of the physical interface (line).

Collector: _InterfaceCol



Interface_Lgl_Status_Code

Displays the current status of the logical interface.

Collector: _InterfaceCol




OS400_MONITOREDCFG Application Class
Status_Code

Displays the status code for the configuration description.

Collector: OS400_CFGDESC discovery
OS400_MONITOREDJOBQ Application Class
Nbr_Jobs

Displays the number of jobs in the job queue.

Collector: OS400_JOBQ discovery
Status_Code

Displays the status of the job queue.

Collector: OS400_JOBQ discovery
OS400_MONITOREDJOBS Application Class
CPU

Displays the percentage of the CPU used by the job.

Collector: OS400ACTJOBSCol
Elapsed_Seconds

Displays the number of seconds since the job began running on the system. The number resets to 0 when the job becomes inactive.

Collector: OS400ACTJOBSCol
IO

Displays the number of I/Os for the job during the interval. This parameter is for monitored jobs only.

Collector: OS400ACTJOBSCol
Resp

Displays the average interactive response time for the job during the interval.This parameter is for interactive jobs only.

Collector: OS400ACTJOBSCol
Status_Code

Displays the status code for the job. This parameter is for monitored jobs only.

Collector: OS400ACTJOBSCol
Trans

Displays the number of transactions for the job during the interval. This parameter is for interactive jobs only.

Collector: OS400ACTJOBSCol
OS400_MONITOREDLIBS Application Class
Number_objects

Displays the number of objects in the library.

Collector: OS400_MONITOREDLIBS discovery
Size

Displays the size of the library, in megabytes.

Collector: OS400_MONITOREDLIBS discovery
OS400_MONITOREDMSG Application Class
Match_msgs

Displays the number of new messages that satisfy the user-specified message selection criteria.

Collector: OS400_MSG discovery
New_msgs

Displays the number of new messages that arrived in the queue during the interval.

Collector: OS400_MSG discovery
Replies_sent

Displays the number of replies sent automatically.

Collector: OS400_MSG discovery
Reply_msgs

Displays the number of messages waiting for a reply.

Collector: OS400_MSG discovery
OS400_MONITOREDOBJS Application Class
Size

Displays the size of the object.

Collector: OS400_OBJECTS discovery
Status code

Displays the status of the object.

Collector: OS400_OBJECTS discovery
OS400_MSG Application Class
There are no parameters associated with the OS400_MSG Application Class.
OS400_NETSTAT Application Class
There are no parameters associated with the OS400_NETSTAT Application Class.
OS400_OBJECTID Application Class
Average_Size

Displays the average size (in kilobytes) of all objects matching the selection criteria.

Collector: OS400_OBJECTS discovery
Count

Displays the number of objects matching the selection criteria.

Collector: OS400_OBJECTS discovery
Maximum_Size

Displays the size (in kilobytes) of the largest object that matches the selection criteria for this ID, with a status of OK.

Collector: OS400_OBJECTS discovery
Minimum_Size

Displays the size (in kilobytes) of the smallest object that matches the selection criteria for this ID, with a status of OK.

Collector: OS400_OBJECTS discovery
Total_Size

Displays the total size of all objects matching the selection criteria.

Collector: OS400_OBJECTS discovery
Worst Status Code

Displays the worst (greatest) status code found among the objects that match the selection criteria for this ID. This parameter is not updated when there are no jobs matching the monitoring criteria.

Collector: OS400_OBJECTS discovery
OS400_OBJECTS Application Class
There are no parameters associated with the OS400_OBJECTS Application Class.
OS400_POOL Application Class
Active_to_Inel

Displays the number of active-to-ineligible transitions.

Collector: OS400POOLCol
Active_to_Wait

Displays the number of active-to-wait transitions.

Collector: OS400POOLCol
DB_Faults

Displays the number of database faults.

Collector: OS400POOLCol
DB_Pages

Displays the number of database pages.

Collector: OS400POOLCol
NonDB_Faults

Displays the number of non-database faults.

Collector: OS400POOLCol
NonDB_Pages

Displays the number of non-database pages.

Collector: OS400POOLCol
Size

Displays the pool size, in kilobytes.

Collector: OS400POOLCol
Wait_to_Inel

Displays the number of wait-to-ineligible transitions.

Collector: OS400POOLCol
OS400_QHST Application Class
_Nbr_Abend_Jobs

Displays the number of abnormally ended jobs found during this collection interval. A job is considered to have ended abnormally if its End Code is at least greater than or equal to the threshold specified on the Track Abnormally Ended Jobs dialog box.

Collector: _QHSTCol
_Nbr_Critical_Abend_Jobs

Displays the number of abnormally ended critical jobs as specified as part of the Track Abnormally Ended Jobs KM command as specified on the Track Abnormally Ended Jobs dialog box.

Collector: _QHSTCol
_Nbr_SysVal_Changes

Displays the number of system value changes detected during the interval.

Collector: _QHSTCol
_QHSTCol

Processes history log messages.
OS400_QHSTID Application Class
Nbr_Match_Msgs

Displays the number of new messages that satisfy the user-specified selection criteria for this history log ID.

Collector: _QHSTCol
OS400_ROUTE Application Class
_Nbr_Avail_Routes

Displays the number of currently available routes on the system.

Collector: _RouteCol
_RouteCol

Collects route information.
OS400_ROUTEv4 Application Class
Route_Interface_Status_Code

Displays the status code of the logical interface to which this route is bound.

Collector: _RouteCol





Route_v4_Status_Code

Displays the status code of the route.

Collector: _RouteCol
OS400_SUBSYS Application Class
Active_Jobs

Displays the number of active jobs in the subsystem.

Collector: OS400SUBSYSCol
Status_Code

Displays the status of the subsystem.

Collector: OS400SUBSYSCol
OS400_SYSTEM Application Class
CPU_Util

Displays the total percentage of CPU utilization.

Collector: OS400SYSTEMCol
Inter_resp

Displays the average internal interactive response time.

Collector: OS400SYSTEMCol
Inter_trans

Displays the number of interactive transactions.

Collector: OS400SYSTEMCol
Inter_util

Displays the percentage of CPU utilization due to interactive work.

Collector: OS400SYSTEMCol
Perc_Perm_Addr_Used

Displays the percentage used of maximum possible addresses for permanent objects.

Collector: OS400SYSTEMCol
Perc_Tmp_Addr_Used

Displays the percentage used of maximum possible addresses for temporary objects.

Collector: OS400SYSTEMCol
Tot_ASP_Stg_Used

Displays the percentage of the system ASP storage used.

Collector: OS400SYSTEMCol
Tot_Jobs_in_System

Displays the total number of jobs in the system.

Collector: OS400SYSTEMCol
OS400_USER Application Class
Num_Jobs_Group_Susp

Displays the number of suspended group jobs.

Collector: OS400USERCol
Num_Jobs_Off_wPrint

Displays the number of jobs signed off with print pending.

Collector: OS400USERCol
Num_Jobs_Suspended

Displays the number of jobs suspended.

Collector: OS400USERCol
Num_Jobs_SysReq_Susp

Displays the number of jobs suspended by System Request.

Collector: OS400USERCol
Num_Temp_Signed_Off

Displays the number of users temporarily signed off.

Collector: OS400USERCol
Num_Users_Signed_On

Displays the number of users signed on.

Collector: OS400USERCol















PATROL KM for Log Management 2.0.01


Table 16 PATROL KM for Log Management 2.0.01
Parameter



LOG Application Class
LOGMainColl

Parameter has no icon and is used internally by the PATROL KM for LOG Management application.
LOGMainCollP2

Parameter has no icon and is used internally by the PATROL KM for LOG Management application.
LOGMainCollP3

Parameter has no icon and is used internally by the PATROL KM for LOG Management application.
LOGMON Application Class
LOGErrorLvl

Displays the alert severity of a monitored log file when its specified search string is found.

Collector: NA

LOGFileSize

Displays the size of the log file that you are monitoring. This is an important parameter to monitor because log files usually grow continuously and can often grow large enough to cause problems before you remember to purge old log data.

Collector: NA
LOGGrowthRate

Displays the growth rate of the log file to graph changes in the size of the log file over time. PATROL determines the LOGGrowthRate by calculating the change of the LOGFileSize parameter over time. If the LOGFileSize parameter is inactive, the value of LOGGrowthRate will be inaccurate.

Collector: NA
LOGMatchString

Displays the string that matched the regular expression defined in the log search.

Collector: NA
LOGMONRecoveryColl

Parameter has no icon and is used internally by the PATROL KM for LOG Management application.

Collector: NA
LOGSearchString

Displays the number of search string matches found during the last scanning cycle.

Collector: NA
LOGStatus

Displays the status of the monitored log.

Collector: LOGMainColl


















PATROL for Lotus Domino 4.5.00


Table 17 PATROL for Lotus Domino 4.5.00
Parameter



NOTES_DB Application Class
ACLMonitor

Indicates the number of changes in the Access Control List (ACL).

Collector: NOTES_DB/Discovery
CONFIGURATION

Loads database configuration information.
DBContent

Scans matching databases and all documents within them for a given regular expression and displays the content search results in the System Output Window. This parameter takes a long time to run, especially on large databases, because it opens every database document and scans all its fields to discover instances of the given words.


DBLoad

Indicates whether the response time of the server is fast or slow (unusable). The administrator can define what response time is fast and at what point the database becomes unusable. This parameter derives a database load figure based on the defined response time. This figure ensures that responses from 0 to fast are mapped at 0 to 70 percent, and that responses from fast to unusable are mapped at 70 to 100 percent.

Collector: NOTES_DB/Discovery
DBQuota

Checks that the database size is within a percentage of its quota.

Collector: NOTES_DB/Discovery
DBResponse

Reports the response time to open the instances database on the server. Response times are plotted at one-minute intervals, displaying a positive value that indicates the response time in seconds.


LNDBSize

Displays the size of the NSF database.

Collector: NOTES_DB/Discovery
NumDataNotes

Indicates the number of data notes or documents in each database.

Collector: NOTES_DB/Discovery
NumNonDataNotes

Indicates the number of non-data (design) notes or documents in each database.

Collector: NOTES_DB/Discovery
NumViews

Indicates the number of views (indexes) in each database (includes hidden views).

Collector: NOTES_DB/Discovery
ReplConflicts

Displays the total replication conflicts in each database.


WeeklyUse

Indicates the number of weekly hits against each database by all users and servers. The data displayed by this parameter depends on the server executing statlog at regular intervals (at least once per day). Changes to the database are not reported until statlog executes and the WeeklyUse parameter is refreshed.

Collector: NOTES_DB/Discovery
WhiteSpace

Displays the percentage of white space (allocated but not used) in each database. The data displayed by this parameter depends on the server executing statlog at regular intervals at least once a day. Changes to the database are not reported until statlog executes and the WhiteSpace parameter is refreshed.

Collector: NOTES_DB/Discovery
WhiteSpaceKb

Indicates white space (allocated but not used) in each database. The data displayed by this parameter depends on the server executing statlog at regular intervals at least once a day. Changes to the database are not reported until statlog executes and the WhiteSpaceKb parameter is refreshed.

Collector: NOTES_DB/Discovery
NOTES_DBREPMON Application Class
CountDifferent

Indicates the number of documents in the compared databases which are different.

Collector: NOTES_DBREPMON/RepInfoColl
CountSame

Indicates the number of documents in the compared databases which are the same.

Collector: NOTES_DBREPMON/RepInfoColl
DestCount

Indicates the number of documents found in the destination database.

Collector: NOTES_DBREPMON/RepInfoColl
RepInfoColl

Collects and assigns the values of all other DBRepMon parameters..
ReplicaFound

Indicates the number of documents in the compared databases which are different.

Collector: NOTES_DBREPMON/RepInfoColl
SrcCount

Indicates the number of documents in the source database.

Collector: NOTES_DBREPMON/RepInfoColl
Summary

Text summary for the NOTES_DBREPMON application.

Collector: NOTES_DBREPMON/RepInfoColl
NOTES_DBVIEWS Application Class
ViewConflicts

Indicates the number of replication conflicts in the view.


ViewLoad

Indicates whether the response time of the server is fast or slow (unusable). The administrator can define what response time is fast and at what point the view becomes unusable. This parameter derives a view load figure based on the defined response time. This figure ensures that responses from 0 to fast are mapped at 0 to 70 percent, and that responses from fast to unusable are mapped at 70 to 100 percent.
ViewNumNotes

Indicates the number of data (document) notes in the view.


ViewResponse

Reports the response time to open the instances view. Response times are plotted at one-minute intervals, displaying a positive value.


NOTES_DISCOVERY Application Class
CFG_CHANNEL

Indicates the status of the Notes Server channel.


CFG_Notes_Tasks

Displays the number of Lotus Domino server binaries that are running on the monitored node.


NOTES_DOMINO Application Class
E-mailer

Generates emails for parameters in alarm. The Server Configuration Form indicates which parameters to monitor.

Note: It may take 5 to 10 minutes after starting the KM for E-Mailer to discover and scan all parameters for alarms.
NOTES_E2E Application Class
E2ECollector

Collects and assigns the values of all other E2E application class parameters.
E2EConfiguration

Displays the E2E configuration values defined in the Client Monitoring Configuration Document.

Collector: E2ECollector
E2EOperationResults

Displays the result of the E2E Operation, whether it executed successfully or was executed with errors.

Collector: E2ECollector
E2EOperationStatus

Displays the E2E configuration values defined in the Client Monitoring Configuration Document, plus the results of executing the E2E operation.

Collector: E2ECollector
E2EPingResponseTime

Displays the time for the client to ping the selected server. This parameter is assigned the E2E Response Client to Server Ping command value.

Collector: E2ECollector
E2EResponseTime

Displays the amount of time to perform the E2E operation, and whether it executed successfully or was executed with errors.

Collector: E2ECollector
NOTES_EVENTS Application Class
AlarmReportCount

Reports how many times the server has alarmed on a specific problem.

Collector: NOTES_EVENTS/DBInfoColl
AlarmSeverity

Reports the current alarm value status, such as failure, fatal, normal, etc.

Collector: NOTES_EVENTS/DBInfoColl
AlarmValue

Provides the threshold value assigned to the monitored statistics.

Collector: NOTES_EVENTS/DBInfoColl
DbInfoColl

Collects and assigns the values of all other NOTES_EVENTS parameters.


StatValue

Displays the current value of statistics being monitored.

Collector: NOTES_EVENTS/DBInfoColl
TextReport

Collects all textual data of the document property.

Collector: NOTES_EVENTS/DBInfoColl
NOTES_LOG Application Class
LogMonitor

Monitors the server log and displays messages that are explained in the events4.ntf and events4.nsf files. Fatal/failure messages increment the counter and set off the alarm.


LogReportMonitor

Displays all errors found in the log.nsf database for a specified view.


LogReportText

Displays 100 lines of the log report.

Collector: LogReportMonitor
LogText

Displays log text after it has been filtered according to the Rules section for this log. Only the last 500 lines of text are displayed.

Collector: LogMonitor
LogWarn

Indicates the number of log warnings per hour. Warnings are generated when a log entry is explained against events4.ntf and found to be a warning.


NOTES_MAILBOX Application Class
Activity

Indicates the number of mail messages waiting to be routed. It tracks all the mail in the view (by note ID) and flags the ones that have stayed in the view for more than the indicated number of parameter executions.


BackupInfo

Displays information about when the monitored database was backed up and the name of the backup file. This parameter is only displayed if the Backup Mail Database recovery action is executed.

Collector: recovery action
CorruptionState

Monitors mail.box for corruption and automatically executes a recovery action if it detects corruption.


DBInfoColl

Collects mailbox database information.
LNDBSize

Displays the size of the mailbox database.

Collector: NOTES_MAILBOX/DBInfoColl
WhiteSpace

Displays the percentage of white space (allocated but not used) in each mailbox. The data displayed by this parameter depends on the server executing statlog at regular intervals at least once a day. Changes to the database are not reported until statlog executes and the WhiteSpace parameter is refreshed.

Collector: NOTES_MAILBOX/DBInfoColl
WhiteSpaceKb

Indicates the white space (allocated but not used) in each mailbox.

Collector: NOTES_MAILBOX/DBInfoColl
NOTES_MSGSTATUSSUMMARY Application Class
MsgCount

Displays the number of messages by status.

Collector: Discovery
NOTES_MSGTOPLMSG Application Class
MsgSize

Displays the size of the top 25 largest mail messages.

Collector: Discovery
TextSummary

Displays the summary of the top 25 largest messages.

Collector: Discovery
NOTES_MSGTOPNEXTHOPS Application Class
MsgBytes

Displays the number of message bytes for the top 25 next hops.

Collector: Discovery
MsgCount

Displays the number of messages for the top 25 next hops.

Collector: Discovery
NOTES_MSGTOPPREVHOPS Application Class
MsgBytes

Displays the number of message bytes for the top 25 previous hops.

Collector: Discovery
MsgCount

Displays the number of messages for the top 25 previous hops.

Collector: Discovery
NOTES_MSGTOPRECBYCOUNT Application Class
HopMsgs

Displays the number of messages hops for the top 25 recipients by count.

Collector: Discovery
MsgsReceived

Displays the total number of messages received by the top 25 recipients.

Collector: Discovery
TextSummary

Displays the summary for the top 25 mail recipients by count.

Collector: Discovery
NOTES_MSGTOPRECBYSIZE Application Class
BytesReceived

Displays the total number of bytes received by the top 25 recipients by size.

Collector: Discovery
HopBytes

Displays the total number of hop bytes for the top 25 recipients by size.

Collector: Discovery
TextSummary

Displays the summary for the top 25 mail senders.

Collector: Discovery
NOTES_MSGTOPSENDERSBYCOUNT Application Class
HopMsgs

Displays the number of messages hops for the top 25 senders by size.

Collector: Discovery
MsgsSent

Displays the total number of messages sent by the top 25 senders.

Collector: Discovery
TextSummary

Displays the summary for the top 25 mail senders by count.

Collector: Discovery
NOTES_MSGTOPSENDERSBYSIZE Application Class
BytesSent

Displays the total number of bytes for the top 25 senders by size.

Collector: Discovery
HopBytes

Displays the total number of hop bytes for the top senders by size.

Collector: Discovery
TextSummary

Displays the summary for the top 25 mail senders by size.

Collector: Discovery
NOTES_MSGTOPUSERSBYCOUNT Application Class
MsgReceived

Displays the total number of mail messages received by the top 25 users by count.

Collector: Discovery
MsgRelayed

Displays the total number of mail messages relayed by the top 25 users by count.

Collector: Discovery
MsgSent

Displays the total number of mail messages sent by the top 25 users by count.

Collector: Discovery
TotalMsg

Displays the total number of mail messages for the top 25 users by message count.

Collector: Discovery
TextSummary

Displays the summary of top 25 mail users by count.

Collector: Discovery
NOTES_MSGTOPUSERSBYSIZE Application Class
BytesReceived

Displays the total bytes of mail received by the top 25 users by size.

Collector: Discovery
BytesRelayed

Displays the total bytes of mail relayed by the top 25 users by size.

Collector: Discovery
BytesSent

Displays the total bytes sent by the top 25 users by size.

Collector: Discovery
TextSummary

Displays the summary of top 25 mail users by size.

Collector: Discovery
TotalBytes

Displays the total bytes used by the top 25 users.

Collector: Discovery
NOTES_MSGVOLUMESUMMARY Application Class
MsgBytes

Displays the number of message bytes by volume.

Collector: Discovery
MsgCount

Displays the number of messages by volume.

Collector: Discovery
NOTES_NEIGH2 Application Class
ServerResponse

Shows server response time.


ServerState

Shows whether the neighboring server is up or down.


NOTES_SR Application Class
AutoConfiguration

Identifies the add-in tasks in the notes.ini file of the monitored Domino server and creates a new server configuration document for the monitored server, within the patrol41.nsf database. This configuration document automatically sets up customized monitoring of the Domino server. The document is named AutoConfiguration and resides in NOTES_SR.km.
CONFIGURATION

Loads server configuration information.
DbinfoColl

Collects database information.
DbnumberOf

Indicates the total number of databases on the server and displays a graph showing the growth of the databases over time.

Collector: NOTES_SR/DbInfoColl
DbsizeChecker

Checks the size of each database and displays the size of the largest Notes database in the Notes data directory.

Collector: NOTES_SR/DbInfoColl
DbtotalSize

Displays the total size of all databases on the server. Monitoring this parameter enables you to manage disk space dedicated to data and view the growth in a graph.

Collector: NOTES_SR/DbInfoColl
DbusageChecker

Checks each databases usage against the set alarm values and produces a report of the databases that are outside of the border. An alarm is triggered for databases with usage below the minimum (Alarm 1) or above the maximum (Alarm 2).

Collector: NOTES_SR/DbInfoColl
DbwhiteChecker

Monitors the white space (space allocated but not used) for each database and displays the maximum white space in a database.

Collector: NOTES_SR/DbInfoColl
Feedback

Executes commands entered in the ServerStatus Documents of a monitored Node within the patrol41.nsf Server Status View. It also updates the Server Status Documents for a monitored node.
NotesRip

Checks for the presence of a notes.rip file in the data directory of the monitored server. On the first detection, the parameter creates a warning. An alarm is created on subsequent increases to the size of the notes.rip file.


ServerLoad

Indicates whether the response time of the server is fast or slow (unusable). The administrator can define what response time (in seconds) is fast and at what point the server becomes unusable. The ServerLoad parameter derives a server load figure based on the defined response time. This figure ensures that responses from 0 to fast are mapped at 0 to 70 percent, and that responses from fast to unusable are mapped at 70 to 100 percent.


ServerResponse

Shows server response time.


ServerState

Indicates whether the server is up or down

Note: The ServerState parameter is unable to work when the ServerLoad parameter is inactive.
ShowStatsColl

Collects server statistics and makes them available to consumer parameters.
Transactions

Displays the number of server transactions per minute. This parameter shows periods of high server use.


VersionInfo

Shows the version of the add-in task.

Collector: NOTES_SR/VersionMatch
VersionMatch

Checks for and returns whether the version of the add-in task matches that required by the KM.


NOTES_SRPROCESS Application Class
DropCount

Indicates the number of times the add-in task was dropped and restarted by the PATROL for Lotus Domino recovery actions. This parameter does not reflect manual restarts of the add-in task.

Collector: NOTES_SRPROCESS/Discovery
InstCount

Indicates the number of task instances that are running.

Collector: NOTES_SRPROCESS/Discovery
Status

Indicates whether the server task is up or down.

Collector: NOTES_SRPROCESS/Discovery
NOTES_STATISTICS Application Class
FullStats

Lists all server statistics in text format.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_AGENT Application Class
Daily.AccessDenials

Shows the number of access denials per day.

Collector: NOTES_SR/ShowStatsColl
Daily.ScheduledRuns

Shows the number of scheduled runs per day.

Collector: NOTES_SR/ShowStatsColl
Daily.TriggeredRuns

Shows the number of triggered runs per day.

Collector: NOTES_SR/ShowStatsColl
Daily.UnsuccessfulRuns

Shows the number of unsuccessful runs per day.

Collector: NOTES_SR/ShowStatsColl
Daily.UsedRunTime

Shows the amount of run time used per day.

Collector: NOTES_SR/ShowStatsColl
Hourly.AccessDenials

Shows the number of access denials per hour.

Collector: NOTES_SR/ShowStatsColl
Hourly.ScheduledRuns

Shows the number of scheduled runs per hour.

Collector: NOTES_SR/ShowStatsColl
Hourly.TriggeredRuns

Shows the number of triggered runs per hour.

Collector: NOTES_SR/ShowStatsColl
Hourly.UnsuccessfulRuns

Shows the number of unsuccessful runs per hour.

Collector: NOTES_SR/ShowStatsColl.
Hourly.UsedRunTime

Shows the amount of run time used per hour.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_CALEN Application Class
Total.All.Appts.Reservations

Displays the total of all appointments and reservations in scheduling.

Collector: NOTES_SR/ShowStatsColl
Total.All.Users.Resources

Shows the total of all users and resources.

Collector: NOTES_SR/ShowStatsColl
Total.Appts

Shows the total number of appointments.

Collector: NOTES_SR/ShowStatsColl
Total.Reservations

Shows the total number of reservations.

Collector: NOTES_SR/ShowStatsColl
Total.Resources

Shows the total number of resources.

Collector: NOTES_SR/ShowStatsColl
Total.Users

Shows the total number of users.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_CLUSTER Application Class
AvailabilityIndex

Shows the current percentage index of a server's availability.

Collector: NOTES_SR/ShowStatsColl
AvailabilityThreshold

Shows the current setting of a server's availability threshold.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.Failovr.Suc

Shows the number of times that a server successfully redirects a client to another cluster member after the client fails to open.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.FailovrByPath.Suc

Shows the number of times a server successfully redirects a client to another cluster member after the client fails to open a database.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.FailovrByPath.UnSuc

Shows the number of times a server is not able to redirect a client to another cluster member after the client fails to open a database.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.LdBalance.Suc

Shows the number of times that a server successfully redirects a client to another cluster member after the client tries to open.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.LdBalance.Unsuc

Number of times that a server is not able to redirect a client to another cluster member after the client tries to open.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.LdBalanceByPath.Suc

Shows the number of times that a server successfully redirects a client to another cluster member after the client tries to open a database.

Collector: NOTES_SR/ShowStatsColl
OpnRedrt.LdBalanceByPath.Unsuc

Number of times that a server is not able to redirect a client to another cluster member after the client tries to open a database.

Collector: NOTES_SR/ShowStatsColl
OpenRequest.ClusterBusy

Shows the number of times that a client tries to open a database on the server when the server is busy.

Collector: NOTES_SR/ShowStatsColl
OpnReq.DBOutOfService

Shows the number of times a client tries to open a database that is marked as out of service on the server.

Collector: NOTES_SR/ShowStatsColl
OpenRequest.LoadBalanced

Shows the number of times a client tries to open a database on the server when the server is busy.

Collector: NOTES_SR/ShowStatsColl
ProbeCount

Shows the number of times that a server completes a probe request of the other cluster members.

Collector: NOTES_SR/ShowStatsColl
ProbeError

Shows the number of times that a server receives an error when probing another server.

Collector: NOTES_SR/ShowStatsColl
ProbeTimeoutmins

Interval at which the intra-cluster probe or cluster member heartbeat occurs.

Collector: NOTES_SR/ShowStatsColl
Trans.IntervalAvgTime

Shows the average interval time of cluster transactions.

Collector: NOTES_SR/ShowStatsColl
Trans.IntervalInMinutes

Shows the interval between cluster transactions.

Collector: NOTES_SR/ShowStatsColl
Trans.IntervalInSeconds

Shows the interval between cluster transactions.

Collector: NOTES_SR/ShowStatsColl
Trans.IntervalsUseInAvg

Shows the current setting for number of intervals used to capture transaction data used to calculate workload balance.

Collector: NOTES_SR/ShowStatsColl
Trans.LastIntervalAvgTime

Shows the last average interval time of cluster transactions.

Collector: NOTES_SR/ShowStatsColl
Trans.NormalizeValue

Shows the current setting of acceptable average transaction time in milliseconds for a server.\

Collector: NOTES_SR/ShowStatsColl
Trans.RunningCount

Shows the average total running time of cluster transactions.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_DATABASE Application Class
BufferControlPool.Peak

Shows the peak number of database control pools used.

Collector: NOTES_SR/ShowStatsColl
BufferControlPool.Size

Displays the size of the database buffer control pool.

Collector: NOTES_SR/ShowStatsColl
BufferControlPool.Used

Shows the number of database control pools used.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Allocated

Shows the number of database control pools allocated.

Collector: NOTES_SR/ShowStatsColl
BufferPool.IRISOpenContainers

Shows the number of open IRIS containers.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Maximum

Shows the maximum size of database control pools.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Peak

Shows the percentage of buffer pool reads.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Reads

Shows the number of database buffer pool reads.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Size

Shows the size of database buffer control pool.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Used

Shows the number of used database buffer pool.

Collector: NOTES_SR/ShowStatsColl
BufferPool.Writes

Shows the number of database buffer pool writes.

Collector: NOTES_SR/ShowStatsColl
BufPool.PerCentReadsInBuf

Shows the percentage of buffer pool reads.

Collector: NOTES_SR/ShowStatsColl
Database.BufferPool.MM.Reads

Shows the number of database buffer pool MM reads.

Collector: NOTES_SR/ShowStatsColl
Database.BufferPool.MM.Writes

Shows the number of database buffer pool MM writes.

Collector: NOTES_SR/ShowStatsColl
DB.BufPool.Maximum.Megabytes

Shows the maximum size of the buffer pool.

Collector: NOTES_SR/ShowStatsColl
DB.BufPool.Peak.Megabytes

Shows the peak size of the buffer pool.

Collector: NOTES_SR/ShowStatsColl
Db.Bytes.Alloced.High

Shows the number of bytes allocated.

Collector: NOTES_SR/ShowStatsColl
Db.Bytes.Alloced.Low

Shows the number of bytes allocated.

Collector: NOTES_SR/ShowStatsColl
Db.FileIO.BytesRead

Shows the number of File IO bytes read.

Collector: NOTES_SR/ShowStatsColl
Db.FileIO.FileCommits

Shows the number of file commits.

Collector: NOTES_SR/ShowStatsColl
Db.FileIO.TotalReads

Shows the total number of reads.

Collector: NOTES_SR/ShowStatsColl
Db.FileIO.TotalWrites

Shows the total number of writes.

Collector: NOTES_SR/ShowStatsColl
Db.Grains.Alloced

Shows the number of grains allocated.

Collector: NOTES_SR/ShowStatsColl
Db.Grains.Freed

Shows the number of grains freed.

Collector: NOTES_SR/ShowStatsColl
DbCache.AverageDbOpenTime

Shows the average database open time.

Collector: NOTES_SR/ShowStatsColl
DbCache.CurrentEntries

Shows the number of current entries.

Collector: NOTES_SR/ShowStatsColl
DbCache.HighWaterMark

Shows the high watermark of the database cache.

Collector: NOTES_SR/ShowStatsColl
DbCache.Hits

Shows the number of hits to the database cache.

Collector: NOTES_SR/ShowStatsColl
DbCache.InitialDbOpens

Shows the number of database opens by the database cache.

Collector: NOTES_SR/ShowStatsColl
DbCache.Lookups

Shows the number of cache lookups.

Collector: NOTES_SR/ShowStatsColl
DbCache.MaxEntries

Shows the maximum number of entries in the database cache.

Collector: NOTES_SR/ShowStatsColl
DbCache.NonAgerReplacements

Shows the number of non ager replacements.

Collector: NOTES_SR/ShowStatsColl
DbCache.NonPGReplacements

Shows the number of non PG replacements.

Collector: NOTES_SR/ShowStatsColl
DbCache.OvercrowdingRejections

Shows the number of rejections due to overcrowding.

Collector: NOTES_SR/ShowStatsColl
DbCache.TotalDbOpens

Shows the total number of database opens.

Collector: NOTES_SR/ShowStatsColl
Db.FileIO.BytesWritten

Shows the number of bytes written.

Collector: NOTES_SR/ShowStatsColl
DbPage.Reads.Total

Shows the total number of page reads.

Collector: NOTES_SR/ShowStatsColl
DbPage.Writes.Total

Shows the total number of page writes.

Collector: NOTES_SR/ShowStatsColl
ExtMgrPool.Peak

Shows the peak number of external manager pools.

Collector: NOTES_SR/ShowStatsColl
ExtMgrPool.Used

Shows the number of external manager pools.

Collector: NOTES_SR/ShowStatsColl
Database.FreeHandleStackHits

Shows the number of handle stack hits.

Collector: NOTES_SR/ShowStatsColl
Database.HandleAllocations

Shows the number of handle allocations.

Collector: NOTES_SR/ShowStatsColl
FreeHandleStack.MissRate

Shows the handle stack miss rate.

Collector: NOTES_SR/ShowStatsColl
ModNoteLog.Hits

Shows the number of note log hits.

Collector: NOTES_SR/ShowStatsColl
ModNoteLog.Misses

Shows the number of external manager pools.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheCacheSize

Shows the size of the lookup cache.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheHashSize

Shows the hash size of the cache.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheHits

Shows the number of cache lookup successes.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheLookups

Shows the number of cache lookups.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheMisses

Shows the number of cache lookup misses.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheNoHitHits

Shows the number unsuccessful hits to the cache.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCachePool.Peak

Shows the peak number of external manager pools.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCachePool.Used

Shows the size of the lookup cache pool used.

Collector: NOTES_SR/ShowStatsColl
NAMELookupCacheResets

Shows the number of lookup cache resets.

Collector: NOTES_SR/ShowStatsColl
NIFPool.Peak

Shows the peak size of of the NIF pool.

Collector: NOTES_SR/ShowStatsColl
NIFPool.Size

Shows the size of of the NIF pool.

Collector: NOTES_SR/ShowStatsColl
NIFPool.Used

Shows the number of NIF pools used.

Collector: NOTES_SR/ShowStatsColl
NIFSort.Reads

Shows the number of NIF pool reads.

Collector: NOTES_SR/ShowStatsColl
NIFSort.Writes

Shows the number of NIF pool writes.

Collector: NOTES_SR/ShowStatsColl
Note.LastAccessedTimeUpdates

Shows the number of note updates.

Collector: NOTES_SR/ShowStatsColl
NSF.FreeHandleStackHits

Shows the number of free handles for the NSF pool.

Collector: NOTES_SR/ShowStatsColl
NSF.HandleAllocations

Shows the number of handles allocated for the NSF pool.

Collector: NOTES_SR/ShowStatsColl
NSFMissRate

Displays the number of unsuccessful NSF pool hits.

Collector: NOTES_SR/ShowStatsColl
NSFPool.Peak

Shows the peak size of of the NSF pool.

Collector: NOTES_SR/ShowStatsColl
NSFPool.Size

Shows the size of of the NSF pool.

Collector: NOTES_SR/ShowStatsColl
NSFPool.Used

Shows the number of NSF pools used.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_DIIOP Application Class
Port.SSL

Shows the SSL port number.

Collector: NOTES_SR/ShowStatsColl
Port.Tcpip

Shows the TCPIP port number.

Collector: NOTES_SR/ShowStatsColl
Thread.ThreadPoolsize.BOA

Shows the size of the BOA thread pool.

Collector: NOTES_SR/ShowStatsColl
Thread.ThreadPoolsize.EM

Shows the size of the EM thread pool.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_DISK Application Class
ANALYSIS

The Analysis parameter indicates health analysis.

Collector: NOTES_SR/ShowStatsColl
Free

Shows the amount of free disk space.

Collector: NOTES_SR/ShowStatsColl
Size

Shows the total size of the disk.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_DISKSYS Application Class
AvailableBlocks

Shows the number of available disk blocks on NetWare SYS volume.

Collector: NOTES_SR/ShowStatsColl
AvailableDirectorySlots

Shows the number of available directory slots on NetWare SYS volume.

Collector: NOTES_SR/ShowStatsColl
DriveNumber

Shows the physical drive number of NetWare SYS Volume.

Collector: NOTES_SR/ShowStatsColl.
Free

Shows the amount of free space on NetWare SYS Volume

Collector: NOTES_SR/ShowStatsColl
NotYetPurgableBlocks

Shows the number of blocks that are not purgeable on NetWare SYS Volume.

Collector: NOTES_SR/ShowStatsColl
Number

Shows the volume number of NetWare SYS Volume.

Collector: NOTES_SR/ShowStatsColl
PurgableBlocks

Shows the number of purgeable blocks on NetWare SYS Volume.

Collector: NOTES_SR/ShowStatsColl
Size

Shows the total size of NetWare SYS Volume.

Collector: NOTES_SR/ShowStatsColl
StartingBlock

Shows the physical block number where NetWare SYS Volume starts.

Collector: NOTES_SR/ShowStatsColl
TotalBlocks

Shows the physical blocks NetWare SYS Volume spans.

Collector: NOTES_SR/ShowStatsColl
TotalDirectorySlots

Shows the number of directory slots NetWare SYS Volume spans.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_DOMINO Application Class
Cache.Command.Count

Shows the cache command count.

Collector: NOTES_SR/ShowStatsColl
Cache.Command.DisplaceRate

Shows the cache displace rate.

Collector: NOTES_SR/ShowStatsColl
Cache.Command.HitRate

Shows the cache command hit rate.

Collector: NOTES_SR/ShowStatsColl
Cache.Command.MaxSize

Shows the maximum command size.

Collector: NOTES_SR/ShowStatsColl
Cache.Database.DisplaceRate

Shows the cache database displace rate.

Collector: NOTES_SR/ShowStatsColl
Cache.Database.HitRate

Shows the cache database hit rate.

Collector: NOTES_SR/ShowStatsColl
Cache.Design.Count

Shows the number of designs.

Collector: NOTES_SR/ShowStatsColl
Cache.Design.DisplaceRate

Shows the cache design displace rate.

Collector: NOTES_SR/ShowStatsColl
Cache.Design.HitRate

Shows the cache design hit rate.

Collector: NOTES_SR/ShowStatsColl
Cache.Design.MaxSize

Shows the maximum design size.

Collector: NOTES_SR/ShowStatsColl
Cache.Session.Count

Shows the number of cache sessions.

Collector: NOTES_SR/ShowStatsColl
Cache.Session.MaxSize

Shows the maximum cache session size.

Collector: NOTES_SR/ShowStatsColl
Cache.User.Count

Shows the number of users.

Collector: NOTES_SR/ShowStatsColl
Cache.User.DisplaceRate

Shows the user displace rate.

Collector: NOTES_SR/ShowStatsColl
Cache.User.HitRate

Shows the cache user hit rate.

Collector: NOTES_SR/ShowStatsColl
Cache.User.MaxSize

Shows the cache user maximum size.

Collector: NOTES_SR/ShowStatsColl
Command.CopyToFolder

Shows the count of 'CopyToFolder' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.CreateDocument

Shows the count of 'CreateDocument' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.DeleteDocument

Shows the count of 'DeleteDocument' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.DeleteDocuments

Shows the count of 'DeleteDocuments' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.EditDocument

Shows the count of 'EditDocument' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.GetOrbCookie

Shows the count of 'GetOrbCookie' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.Login

Shows the count of 'Login' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.MoveToFolder

Shows the count of 'MoveToFolder' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.Navigate

Shows the count of 'Command Navigate' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenAbout

Shows the count of 'Open About' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenAgent

Shows the count of 'Open Agent' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenDatabase

Shows the count of 'OpenDatabase' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenDocument

Shows the count of 'OpenDocument' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenElement

Shows the count of 'OpenElement' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenForm

Shows the count of 'OpenForm' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenHelp

Shows the count of 'OpenHelp' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenIcon

Shows the count of 'OpenIcon URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenImageResource

Shows the count of 'OpenImageResource' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenNavigator

Shows the count of 'OpenNavigator URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenServer

Shows the count of 'OpenServer' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.OpenView

Shows the count of 'OpenView' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.ReadForm

Shows the count of 'ReadForm URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.Redirect

Shows the count of 'Redirect' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.RemoveFromFolder

Shows the count of 'RemoveFromFolder' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.RequestCert

Shows the count of 'RequestCert' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.SaveDocument

Shows the count of 'SaveDocument' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.SearchDomain

Shows the count of 'SearchDomain' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.SearchSite

Shows the count of 'SearchSite' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.SearchView

Shows the count of 'SearchView' URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.Total

Shows the count of command URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Command.Unknown

Shows the count of unknown command URLs that have come into the server since server was last started.

Collector: NOTES_SR/ShowStatsColl
Config.ActiveThreads.Max

Shows the maximum number of active threads.

Collector: NOTES_SR/ShowStatsColl
Config.ActiveThreads.Min

Shows the minimum number of active threads.

Collector: NOTES_SR/ShowStatsColl
Config.AllowDirectoryLinks

Indicates whether directory links are allowed.

Collector: NOTES_SR/ShowStatsColl
Config.Cache.Delete

Shows the number of cache deletions.

Collector: NOTES_SR/ShowStatsColl
Config.Cache.Size.Max

Shows the maximum cache size.

Collector: NOTES_SR/ShowStatsColl
Config.DNSLookup

Shows the DNS lookup.

Collector: NOTES_SR/ShowStatsColl
Config.GarbageCol.Interval

Shows the garbage collection interval.

Collector: NOTES_SR/ShowStatsColl
Config.GarbageCol.Status

Shows the garbage collection status.

Collector: NOTES_SR/ShowStatsColl
Config.HostName

Shows the host name.

Collector: NOTES_SR/ShowStatsColl
Config.Image.Interlaced

Shows the number of interlaced images.

Collector: NOTES_SR/ShowStatsColl
Config.Log.Access

Shows the level of log access.

Collector: NOTES_SR/ShowStatsColl
Config.Log.Error

Shows the log error information.

Collector: NOTES_SR/ShowStatsColl
Config.Log.Filter

Shows the log filter information.

Collector: NOTES_SR/ShowStatsColl
Config.Log.TimeStamp

Shows the log timestamp information.

Collector: NOTES_SR/ShowStatsColl
Config.PortNumber

Shows the port number.

Collector: NOTES_SR/ShowStatsColl
Config.PortStatus

Shows the port status.

Collector: NOTES_SR/ShowStatsColl
Config.SSL.PortNumber

Shows the SSL port number.

Collector: NOTES_SR/ShowStatsColl
Config.SSL.Status

Shows the SSL status.

Collector: NOTES_SR/ShowStatsColl
Config.Timeout.CGI

Shows theCGI timeout value.

Collector: NOTES_SR/ShowStatsColl
Config.Timeout.IdleThread

Shows the timeout idle thread.

Collector: NOTES_SR/ShowStatsColl
Config.Timeout.Input

Domino.Config.Timeout.Input.

Collector: NOTES_SR/ShowStatsColl
Config.Timeout.Output

Shows the timeout output.

Collector: NOTES_SR/ShowStatsColl
Config.View.Lines

Shows the view lines.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Day.Peak

Shows the peak requests over the past day.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Day.Total

Shows the total requests over the past day.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Hour

Shows the requests over the past hour.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Hour.Peak

Shows the peak requests over the past hour.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Hour.Total

Shows the total requests over the past hour.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Minute

Shows the requests over the past minute.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Minute.Peak

Shows the peak requests over the past minute.

Collector: NOTES_SR/ShowStatsColl
Requests.Per1Minute.Total

Shows the total requests over the past minute.

Collector: NOTES_SR/ShowStatsColl
Requests.Per5Minute

Shows the requests over the past fiveminutes.

Collector: NOTES_SR/ShowStatsColl
Requests.Per5Minute.Peak

Shows the peak requests over the past five minutes.

Collector: NOTES_SR/ShowStatsColl
Requests.Per5Minute.Total

Shows the total requests over the past five minutes.

Collector: NOTES_SR/ShowStatsColl
Requests.Total

Shows the total requests.

Collector: NOTES_SR/ShowStatsColl
ThreadPool.average

Shows the thread pool average.

Collector: NOTES_SR/ShowStatsColl
ThreadPool.max

Shows the maximum thread pool.

Collector: NOTES_SR/ShowStatsColl
Threads.Active.Peak

Shows the active thread peak.

Collector: NOTES_SR/ShowStatsColl
Threads.Peak.Total

Shows the total thread peak.

Collector: NOTES_SR/ShowStatsColl
Threads.Total

Shows the total threads.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_FTP Application Class
Bytes.Received

Shows the number of bytes received.

Collector: NOTES_SR/ShowStatsColl
Bytes.Sent

Shows the number of bytes sent.

Collector: NOTES_SR/ShowStatsColl
Files.Received

Shows the number of files received.

Collector: NOTES_SR/ShowStatsColl
Files.Sent

Shows the number of files sent.

Collector: NOTES_SR/ShowStatsColl
Users.Current.Anonymous

Shows the current number of anonymous users.

Collector: NOTES_SR/ShowStatsColl
Users.Current.Regular

Shows the current number of regular users.

Collector: NOTES_SR/ShowStatsColl
Users.Peak.Anonymous

Shows the peak number of anonymous users.

Collector: NOTES_SR/ShowStatsColl
Users.Peak.Regular

Shows the peak number of regular users.

Collector: NOTES_SR/ShowStatsColl
Users.Total.Anonymous

Shows thetotal number of anonymous users.

Collector: NOTES_SR/ShowStatsColl
Users.Total.Regular

Shows the total number of regular users.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_ICM Application Class
Cmd.Busy

Shows the number of busy commands.

Collector: NOTES_SR/ShowStatsColl
Cmd.Recieve.Error

Shows the number of commands which have received errors.

Collector: NOTES_SR/ShowStatsColl
Cmd.Total

Shows the total number of commands.

Collector: NOTES_SR/ShowStatsColl
Cmd.Unknown

Shows the number of unknown commands.

Collector: NOTES_SR/ShowStatsColl
Redir.Success

Shows the number of successful redirects.

Collector: NOTES_SR/ShowStatsColl
Redir.Unsuccessful

Shows the number of unsuccessful redirects.

Collector: NOTES_SR/ShowStatsColl
Requests.1hour

Shows the number of requests over the past hour.

Collector: NOTES_SR/ShowStatsColl
Requests.1min

Shows the number of requests over the past minute.

Collector: NOTES_SR/ShowStatsColl
Requests.5Min

Shows the number of requests over the past five minutes.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_ISRV Application Class
EndpointQueue

Shows the number of EndpointQueue handles.

Collector: NOTES_SR/ShowStatsColl
Sessions.Inbound.Non-SSL

Shows the number of inbound non-SSL sessions.

Collector: NOTES_SR/ShowStatsColl
Sessions.Inbound.SSL

Shows the number of inbound SSL sessions.

Collector: NOTES_SR/ShowStatsColl
Sesns.Inbd.SSL.BadHndshk

Shows the number of inbound SSL sessions with bad handshakes.

Collector: NOTES_SR/ShowStatsColl
Sessions.Inbound.Total

Shows the total number of inbound sessions.

Collector: NOTES_SR/ShowStatsColl
Sessions.Threads.Idle

Shows the number of idle threads.

Collector: NOTES_SR/ShowStatsColl
Task.Sessions.Active

Shows the number of active task sessions.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_LDAP Application Class
Anonymous.LDAP.Connections

Shows the number of anonymous LDAP connections.

Collector: NOTES_SR/ShowStatsColl
Average.LDAP.Search.time

Shows the average LDAP search time.

Collector: NOTES_SR/ShowStatsColl
Failed.LDAP.Connections

Shows the number of failed LDAP connections.

Collector: NOTES_SR/ShowStatsColl
Longest.LDAP.Search.request

Shows the number of failed LDAP search requests.

Collector: NOTES_SR/ShowStatsColl
Longest.LDAP.Search.time

Shows the longest LDAP search time.

Collector: NOTES_SR/ShowStatsColl
Simple.LDAP.Connections

Shows the number of simple LDAP connections.

Collector: NOTES_SR/ShowStatsColl
Strong.Auth.Connections

Shows the number of strong authentication LDAP connections.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Abandons

Shows the number of strong authentication LDAP connections.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Adds

Shows the total number of LDAP adds.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Compares

Shows the total number of LDAP compares.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Connections

Shows the total number of LDAP connections.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Deletes

Shows the total number of LDAP deletes.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Extended.Operations

Shows the total number of extended LDAP operations.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Modifies

Shows the total number of LDAP modifies.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.ModifyDNs

Shows the total number of LDAP modify DNs.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Searches

Shows the total number of LDAP searches.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Searches.for.Root.DSE

Shows the total number of LDAP searches for root DSE.

Collector: NOTES_SR/ShowStatsColl
Total.LDAP.Searches.for.Subsch

Shows the total number of LDAP searches for subschema.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_MAIL Application Class
AverageDeliverTime

Shows the average delivery time.

Collector: NOTES_SR/ShowStatsColl
AverageServerHops

Shows the average number of server hops.

Collector: NOTES_SR/ShowStatsColl
AverageSizeDelivered

Shows the average size of delivered mail.

Collector: NOTES_SR/ShowStatsColl
CurrentByteDeliveryRate

Shows the average delivery rate.

Collector: NOTES_SR/ShowStatsColl
CurrentByteTransferRate

Shows the current byte transfer rate.

Collector: NOTES_SR/ShowStatsColl
CurrentMessageDeliveryRate

Shows the current delivery rate.

Collector: NOTES_SR/ShowStatsColl
CurrentMessageTransferRate

Shows the current message transfer rate.

Collector: NOTES_SR/ShowStatsColl
DBCacheEntries

Shows the number of database cache entries.

Collector: NOTES_SR/ShowStatsColl
DBCacheHits

Shows the number of database cache hits.

Collector: NOTES_SR/ShowStatsColl
DBCacheReads

Shows the number of database cache reads.

Collector: NOTES_SR/ShowStatsColl
Dead

Shows the number of dead mail messages.

Collector: NOTES_SR/ShowStatsColl
Delivered

Shows the number of delivered messages.

Collector: NOTES_SR/ShowStatsColl
Deliveries

Shows the number of mail deliveries.

Collector: NOTES_SR/ShowStatsColl
Hold

Shows the number of mail holds.

Collector: NOTES_SR/ShowStatsColl
IMAP.Cache.MsgInsertAttempts

Shows the number of message insert attempts.

Collector: NOTES_SR/ShowStatsColl
IMAP.FindCacheAttempted

Shows the number of find cache attempts.

Collector: NOTES_SR/ShowStatsColl
IMAP.NumCacheHits

Shows the number of cache hits.

Collector: NOTES_SR/ShowStatsColl
IMAP.NumMsgInsertedInCache

Shows the number of messages inserted in cache.

Collector: NOTES_SR/ShowStatsColl
MaximumDeliverTime

Shows the maximum delivery time.

Collector: NOTES_SR/ShowStatsColl
MaximumServerHops

Shows the maximum number of server hops.

Collector: NOTES_SR/ShowStatsColl
MaximumSizeDelivered

Shows the maximum message size delivered.

Collector: NOTES_SR/ShowStatsColl
MinimumDeliverTime

Shows the minimum delivery time.

Collector: NOTES_SR/ShowStatsColl
MinimumServerHops

Shows the minimum number of server hops.

Collector: NOTES_SR/ShowStatsColl
MinimumSizeDelivered

Shows the minimum message size delivered.

Collector: NOTES_SR/ShowStatsColl
PeakByteTransferRate

Shows the peak byte transfer rate.

Collector: NOTES_SR/ShowStatsColl
PeakMessagesTransferred

Shows the peak number of messages transferred.

Collector: NOTES_SR/ShowStatsColl
PeakMessageTranferRate

Shows the peak transfer rate.

Collector: NOTES_SR/ShowStatsColl
PeakTotalBytesTransfered

Shows the total bytes transferred.

Collector: NOTES_SR/ShowStatsColl
Tables.Reload

Shows the number of reloads.

Collector: NOTES_SR/ShowStatsColl
TotalFailures

Shows the total number of failures.

Collector: NOTES_SR/ShowStatsColl
TotalKBTransferred

Shows the total KB transferred.

Collector: NOTES_SR/ShowStatsColl
TotalRouted

Shows the total number of messages routed.

Collector: NOTES_SR/ShowStatsColl
TotalRouted.SMTP

Shows the total number of SMTP messages routed.

Collector: NOTES_SR/ShowStatsColl
TotalRouted.NRPC

Shows the total number of NPRC messages routed.

Collector: NOTES_SR/ShowStatsColl
TransferFailures

Shows the number of transfer failures.

Collector: NOTES_SR/ShowStatsColl
Transferred

Shows the number of messages transferred.

Collector: NOTES_SR/ShowStatsColl
Waiting

Shows the number of messages waiting.

Collector: NOTES_SR/ShowStatsColl
WaitingForDNS

Shows the number of messages waiting for DNS.

Collector: NOTES_SR/ShowStatsColl
WaitingRecipients

Shows the number of recipients waiting.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_MAILPROBE Application Class
ResponseTime

Displays response time in milliseconds

Collector: ProbeStatColl
NOTESTAT_MEMORY Application Class
Allocated

Shows the number of bytes allocated.

Collector: NOTES_SR/ShowStatsColl
Allocated.Process

Shows the total amount of non-shared memory allocated by individual processes.

Collector: NOTES_SR/ShowStatsColl
Allocated.Shared

Shows the total amount of server memory allocated as shared memory.

Collector: NOTES_SR/ShowStatsColl
Availability

Shows the availability of server memory.

Collector: NOTES_SR/ShowStatsColl
Free

Shows the number of bytes free.

Collector: NOTES_SR/ShowStatsColl
FTVDKMaxBufferSizeUsed

Shows the maximum buffer size used.

Collector: NOTES_SR/ShowStatsColl
PhysicalRAM

Shows the total amount of physcial memory on the server.

Collector: NOTES_SR/ShowStatsColl
Quota

Shows the maximum amount of memory that can be allocated by the server.

Collector: NOTES_SR/ShowStatsColl
SwapFile.Size

Shows the size of the swap file.

Collector: NOTES_SR/ShowStatsColl
Timeouts

Shows the number of memory timeouts

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_MHS Application Class
Dead

Shows the number of dead messages.

Collector: NOTES_SR/ShowStatsColl
Waiting

Shows the number of messages waiting

Collector: NOTES_SR/ShowStatsColl
WaitingRecipients

Shows the number of waiting recipients.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_MISC Application Class
AppleTalk.AppleTalk.StatsLogged

Shows the number of AppleTalk stats logged.

Collector: NOTES_SR/ShowStatsColl
LogUnwrittenEntries

Shows the number of unwritten entries.

Collector: NOTES_SR/ShowStatsColl
NetWare.SPXII.StatsLogged

Shows the number of NetWare SPXII stats logged

Collector: NOTES_SR/ShowStatsColl
NumOldSessionsClosed

Shows the number of old sessions closed.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_MTA Application Class
Dead

Shows the number of dead messages.

Collector: NOTES_SR/ShowStatsColl
TotalKBTransferred

Shows the total number of KB transferred.

Collector: NOTES_SR/ShowStatsColl
TotalRouted

Shows the total number of messages routed.

Collector: NOTES_SR/ShowStatsColl
TransferFailures

Shows the number of transfer failures.

Collector: NOTES_SR/ShowStatsColl
Transferred

Shows the number of messages transferred.

Collector: NOTES_SR/ShowStatsColl
Waiting

Shows the number of messages waiting.

Collector: NOTES_SR/ShowStatsColl
WaitingRecipients

Shows the number of waiting recipients.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_NET Application Class
BytesReceived

Shows the number of bytes received.

Collector: NOTES_SR/ShowStatsColl
BytesSent

Shows the number of bytes sent.

Collector: NOTES_SR/ShowStatsColl
Sessions.Established.Incoming

Shows the number of sessions incoming.

Collector: NOTES_SR/ShowStatsColl
Sessions.Established.Outgoing

Shows the number of sessions outgoing.

Collector: NOTES_SR/ShowStatsColl
Sessions.Limit

Shows the session limit.

Collector: NOTES_SR/ShowStatsColl
Sessions.LimitMax

Shows the maximum session limit.

Collector: NOTES_SR/ShowStatsColl
Sessions.LimitMin

Shows the minimum session limit.

Collector: NOTES_SR/ShowStatsColl
Sessions.Peak

Shows the peak number of sessions.

Collector: NOTES_SR/ShowStatsColl
Sessions.Recycled

Shows the number of recycled sessions.

Collector: NOTES_SR/ShowStatsColl
Sessions.Recycling

Shows the number of sessions that are recycling.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_NETBIOS Application Class
CommandBlocks.Available

Shows the number of command blocks available.

Collector: NOTES_SR/ShowStatsColl
CommandBlocks.Total

Shows the total number of command blocks.

Collector: NOTES_SR/ShowStatsColl
Errors.Alignment

Shows the number of alignment errors.

Collector: NOTES_SR/ShowStatsColl
Errors.CRC

Shows the number of CRC errors.

Collector: NOTES_SR/ShowStatsColl
Errors.Collisions

Shows the number of collision errors.

Collector: NOTES_SR/ShowStatsColl
Packets.Received

Shows the number of packets received.

Collector: NOTES_SR/ShowStatsColl
Packets.Transmitted

Shows the number of packets transmitted.

Collector: NOTES_SR/ShowStatsColl
Receiver.Resources.Exhausted

Shows the number of dropped resources.

Collector: NOTES_SR/ShowStatsColl
ReportPeriodMinutes

Shows the report period.

Collector: NOTES_SR/ShowStatsColl
Session.DataPacketSize

Shows the session data packet size

Collector: NOTES_SR/ShowStatsColl
Sessions.InUse

Shows the number of sessions in use.

Collector: NOTES_SR/ShowStatsColl
Sessions.Maximum

Shows the maximum number of sessions.

Collector: NOTES_SR/ShowStatsColl
Transmissions.Aborted

Shows the number of aborted transmissions.

Collector: NOTES_SR/ShowStatsColl
Transmissions.Retried

Shows the number of retried transmissions.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_NNTP Application Class
Articles.Posted

Shows the number of articles posted.

Collector: NOTES_SR/ShowStatsColl
Articles.Sent

Shows the number of articles sent.

Collector: NOTES_SR/ShowStatsColl
Bytes.Received

Shows the number of bytes received.

Collector: NOTES_SR/ShowStatsColl
Bytes.Sent

Shows the number of bytes sent.

Collector: NOTES_SR/ShowStatsColl
Pull.Articles.Failed

Shows the number of pull articles failed.

Collector: NOTES_SR/ShowStatsColl
Push.Articles.Failed

Shows the number of push articles failed.

Collector: NOTES_SR/ShowStatsColl
Pull.Articles.Offered

Shows the number of pull articles offered.

Collector: NOTES_SR/ShowStatsColl
Push.Articles.Offered

Shows the number of push articles offered.

Collector: NOTES_SR/ShowStatsColl
Pull.Articles.Requested

Shows the number of pull articles requested.

Collector: NOTES_SR/ShowStatsColl
Push.Articles.Requested

Shows the number of push articles requested.

Collector: NOTES_SR/ShowStatsColl
Pull.Articles.Transfered

Shows the number of pull articles transferred.

Collector: NOTES_SR/ShowStatsColl
Push.Articles.Transfered

Shows the number of push articles transferred.

Collector: NOTES_SR/ShowStatsColl
Sessions.Outgoing.SSL

Shows the number of outgoing SSL sessions.

Collector: NOTES_SR/ShowStatsColl
Sessions.Outgoing.non-SSL

Shows the number of outgoing non-SSL sessions.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_OBJECT Application Class
SharedBy.01

Shows the number of objects shared by 1 user.

Collector: NOTES_SR/ShowStatsColl
SharedBy.02

Shows the number of objects shared by 2 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.03

Shows the number of objects shared by 3 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.04

Shows the number of objects shared by 4 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.05

Shows the number of objects shared by 5 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.06

Shows the number of objects shared by 6 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.07

Shows the number of objects shared by 7 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.08

Shows the number of objects shared by 8 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.09

Shows the number of objects shared by 9 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.10

Shows the number of objects shared by 10 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.11

Shows the number of objects shared by 11 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.12

Shows the number of objects shared by 12 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.13

Shows the number of objects shared by 13 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.14

Shows the number of objects shared by 14 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.15

Shows the number of objects shared by 15 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.16

Shows the number of objects shared by 16 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.17

Shows the number of objects shared by 17 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.18

Shows the number of objects shared by 18 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.19

Shows the number of objects shared by 19 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.20

Shows the number of objects shared by 20 users.

Collector: NOTES_SR/ShowStatsColl
SharedBy.Greater

Shows the number of objects shared by over 20 users.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_POP3 Application Class
UserCache.Attempts

Shows the number of user attempts.

Collector: NOTES_SR/ShowStatsColl
UserCache.Hits

Shows the number of user cache hits.

Collector: NOTES_SR/ShowStatsColl
UserCache.Inserts

Shows the number of user cache inserts.

Collector: NOTES_SR/ShowStatsColl
UserCache.Lookups

Shows the number of user cache lookups.

Collector: NOTES_SR/ShowStatsColl
UserCache.OpenReasonCacheFull

Shows the number of user cache opens due to full cache.

Collector: NOTES_SR/ShowStatsColl
UserCache.OpenReasonDBChanged

Shows the number of user cache opens due to database changes.

Collector: NOTES_SR/ShowStatsColl
UserCache.OpenReasonNewEntry

Shows the number of user cache opens due to new entries.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_PROBE Application Class
Available Services

Shows the available services.

Collector: NOTES_SR/ShowStatsColl
ResponseTime

Collects response time data for all the service probes.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_REPLICA Application Class
Cluster.CachedHandles

Shows the number of cache handles.

Collector: NOTES_SR/ShowStatsColl
Cluster.Docs.Added

Displays the number of documents added by cluster replicator.

Collector: NOTES_SR/ShowStatsColl
Cluster.Docs.Deleted

Displays the number of documents deleted by cluster replicator.

Collector: NOTES_SR/ShowStatsColl
Cluster.Docs.Updated

Shows the number of documents updated.

Collector: NOTES_SR/ShowStatsColl
Cluster.Failed

Indicates whether the cluster failed.

Collector: NOTES_SR/ShowStatsColl
Cluster.Files.Local

Shows the number local cluster files.

Collector: NOTES_SR/ShowStatsColl
Cluster.Files.Remote

Shows the number of remote cluster files.

Collector: NOTES_SR/ShowStatsColl
Cluster.Retry.Skipped

Shows the number of retries skipped.

Collector: NOTES_SR/ShowStatsColl
Cluster.Retry.Waiting

Shows the number of retries waiting.

Collector: NOTES_SR/ShowStatsColl
Cluster.SecondsOnQueue

Shows the number of seconds on queue.

Collector: NOTES_SR/ShowStatsColl
Cluster.SecondsOnQueue.Avg

Shows the average number of seconds on queue.

Collector: NOTES_SR/ShowStatsColl
Cluster.SecondsOnQueue.Max

Shows the maximum number of seconds on queue.

Collector: NOTES_SR/ShowStatsColl
Cluster.Servers

Shows the number of cluster servers.

Collector: NOTES_SR/ShowStatsColl
Cluster.SessionBytes.In

Shows the number of session bytes in.

Collector: NOTES_SR/ShowStatsColl
Cluster.SessionBytes.Out

Shows the number of session bytes out.

Collector: NOTES_SR/ShowStatsColl
Cluster.Successful

Shows the number of successful attempts.

Collector: NOTES_SR/ShowStatsColl
Cluster.WorkQueueDepth

Shows the work queue depth.

Collector: NOTES_SR/ShowStatsColl
Cluster.WorkQueueDepth.Avg

Shows the average work queue depth.

Collector: NOTES_SR/ShowStatsColl
Cluster.WorkQueueDepth.Max

Shows the maximum work queue depth.

Collector: NOTES_SR/ShowStatsColl
Docs.Added

Displays the number of docs added by replicator.

Collector: NOTES_SR/ShowStatsColl
Docs.Deleted

Shows the number of documents deleted.

Collector: NOTES_SR/ShowStatsColl
Docs.Updated

Displays the number of documents updated in the servers databases via replication.

Collector: NOTES_SR/ShowStatsColl
Failed

Shows the number of failed attempts.

Collector: NOTES_SR/ShowStatsColl
RTR.Failed

Shows the number of RTR failed attempts.

Collector: NOTES_SR/ShowStatsColl
RTR.Replicas

Shows the number of RTR failed attempts.

Collector: NOTES_SR/ShowStatsColl
RTR.Retry.Skipped

Shows the number of retries skipped.

Collector: NOTES_SR/ShowStatsColl
RTR.Retry.Waiting

Shows the amount of time waiting.

Collector: NOTES_SR/ShowStatsColl
RTR.Servers

Shows the number of RTR servers.

Collector: NOTES_SR/ShowStatsColl
RTR.Sources

Shows the number of RTR sources.

Collector: NOTES_SR/ShowStatsColl
RTR.Successfull

Shows the number of successful RTR attempts.

Collector: NOTES_SR/ShowStatsColl
RTR.WorkQueueDepth

Shows the work queue depth.

Collector: NOTES_SR/ShowStatsColl
Successful

Shows the number of successful attempts.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_SERVER Application Class
AvailabilityIndex

Shows the number of bytes available on the server.

Collector: NOTES_SR/ShowStatsColl
AvailabilityThreshold

Shows the availability threshold.

Collector: NOTES_SR/ShowStatsColl
BootID

Shows the boot ID.

Collector: NOTES_SR/ShowStatsColl
BusyTimeQuery.ReceivedCount

Shows the number of queries received.

Collector: NOTES_SR/ShowStatsColl
BusyTimeQry.Ret.Objs.Sch

Shows the number of returned object queries.

Collector: NOTES_SR/ShowStatsColl
ClientOpens.PreV4

Shows the number of clients running a Lotus release prior to R4.

Collector: NOTES_SR/ShowStatsColl
ClientOpens.V4

Shows the number of clients running Lotus release R4.

Collector: NOTES_SR/ShowStatsColl
MinIdleDisconnect

Shows the number of minutes disconnected.

Collector: NOTES_SR/ShowStatsColl
OpenRequest.MaxUsers

Shows the maximum number of users.

Collector: NOTES_SR/ShowStatsColl
OpenRequest.PreV4Client

Shows the number of PreV4 clients.

Collector: NOTES_SR/ShowStatsColl
OpenRequest.Restricted

Shows the number of restricted requests.

Collector: NOTES_SR/ShowStatsColl
OpenRequest.V4Client

Shows the number of V4 clients.

Collector: NOTES_SR/ShowStatsColl
Ports.RS232

Shows the number of RS232 ports.

Collector: NOTES_SR/ShowStatsColl
Sessions.Dropped

Shows the number of sessions dropped.

Collector: NOTES_SR/ShowStatsColl
Tasks

Shows the number of server tasks.

Collector: NOTES_SR/ShowStatsColl
Timeouts

Shows the number of timeouts.

Collector: NOTES_SR/ShowStatsColl
Trans.PerMInute

Shows the number of transactions per minute.

Collector: NOTES_SR/ShowStatsColl
Trans.PerMinute.Peak

Shows the peak number of transactions per minute.

Collector: NOTES_SR/ShowStatsColl
Trans.Total

Shows the total number of transactions.

Collector: NOTES_SR/ShowStatsColl
Users

Shows the number of users.

Collector: NOTES_SR/ShowStatsColl
Users.1MinPeak

Shows the peak number of users per minute.

Collector: NOTES_SR/ShowStatsColl
Users.5MinPeak

Shows the peak number of users per 5 minutes.

Collector: NOTES_SR/ShowStatsColl
Users.Peak

Shows the peak number of users.

Collector: NOTES_SR/ShowStatsColl
WorkThreads

Shows the number of work threads.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_SMTP Application Class
MessagesProcessed

Displays the number of messages processed.

Collector: NOTES_SR/ShowStatsColl
Sessions.Accept.Queue

Displays the SMTP listener work queue of incoming sessions to be processed.

Collector: NOTES_SR/ShowStatsColl
Sessions.Active

Indicates the current number of SMTP server tasks.

Collector: NOTES_SR/ShowStatsColl
Sessions.Inbound.BytesReceived

Indicates the total number of bytes received by the SMTP server.

Collector: NOTES_SR/ShowStatsColl
Sessions.Inbound.BytesSent

Indicates the total number of bytes sent by the SMTP server.

Collector: NOTES_SR/ShowStatsColl
Sessions.Inbound.Total

Displays the total number of SMTP server inbound connections (SSL & non-SSL).

Collector: NOTES_SR/ShowStatsColl
Sessions.Peak

Displays the peak number of SMTP server tasks since server startup.

Collector: NOTES_SR/ShowStatsColl
Sessions.Threads.Busy

Displays the number of SMTP server tasks currently running.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_SMTPMTA Application Class
ConvFailures

Shows the number of failures

Collector: NOTES_SR/ShowStatsColl
Dead

Shows the number of dead messages.

Collector: NOTES_SR/ShowStatsColl
Delivered

Shows the number of delivered messages.

Collector: NOTES_SR/ShowStatsColl
HighInbound

Shows the number of high inbound messages.

Collector: NOTES_SR/ShowStatsColl
HighOutbound

Shows the number of high outbound messages.

Collector: NOTES_SR/ShowStatsColl
InboundBytes

Shows the number of inbound bytes.

Collector: NOTES_SR/ShowStatsColl
InboundSize

Shows the size of inbound messages.

Collector: NOTES_SR/ShowStatsColl
MessagesProcessed

Shows the number of messages processed.

Collector: NOTES_SR/ShowStatsColl
OutboundBytes

Shows the number of outbound bytes.

Collector: NOTES_SR/ShowStatsColl
OutboundSize

Shows the size of the outbound messages.

Collector: NOTES_SR/ShowStatsColl.
TotalRouted

Shows the total number of routed messages.

Collector: NOTES_SR/ShowStatsColl
TransFailures

Shows the number of transfer failures.

Collector: NOTES_SR/ShowStatsColl
Transfered

Shows the number of transferred messages.

Collector: NOTES_SR/ShowStatsColl
Waiting

Shows the number of messages waiting.

Collector: NOTES_SR/ShowStatsColl
WaitingConv

Shows the number of messages waiting.

Collector: NOTES_SR/ShowStatsColl
WaitingRecipients

Shows the number of waiting recipients.

Collector: NOTES_SR/ShowStatsColl
WaitingTrans

Shows the number of transfers waiting.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_SPIN Application Class
AvtIterToHit

Shows the number of seconds to hit.

Collector: NOTES_SR/ShowStatsColl
Delays

Shows the amount of time delayed in seconds.

Collector: NOTES_SR/ShowStatsColl
DelaysMsecs

Shows the amount of time delayed in milliseconds.

Collector: NOTES_SR/ShowStatsColl
Hits

Shows the number of hits.

Collector: NOTES_SR/ShowStatsColl
MaxDelayMask

Shows the maximum amount of time delayed in seconds.

Collector: NOTES_SR/ShowStatsColl
MaxDelayMsecs

Shows the maximum amount of time delayed in milliseconds.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_STATSXXX Application Class
Dead

Displays the number of dead messages.

Collector: NOTES_SR/ShowStatsColl
Waiting

Displays the number of waiting messages.

Collector: NOTES_SR/ShowStatsColl
WaitingRecipients

Displays the number of messages waiting to be delivered.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_TRANS Application Class
PerMinute.LastHour

Shows the number of transactions per minute for the past hour.

Collector: NOTES_SR/ShowStatsColl
Sessions.Peak

Shows the peak number of sessions.

Collector: NOTES_SR/ShowStatsColl
TRAverage_1

Shows the average number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRAverage_2

Shows the average number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRAverage_3

Shows the average number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRAverage_4

Shows the average number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRAverage_5

Shows the average number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRCount_1

Shows the number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRCount_2

Shows the number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRCount_3

Shows the number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRCount_4

Shows the number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRCount_5

Shows the number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMax_1

Shows the maximum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMax_2

Shows the maximum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMax_3

Shows the maximum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMax_4

Shows the maximum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMax_5

Shows the maximum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMin_1

Shows the minimum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMin_2

Shows the minimum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMin_3

Shows the minimum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMin_4

Shows the minimum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRMin_5

Shows the minimum number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRTotal_1

Shows the total number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRTotal_2

Shows the total number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRTotal_3

Shows the total number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRTotal_4

Shows the total number of transactions.

Collector: NOTES_SR/ShowStatsColl
TRTotal_5

Shows the total number of transactions.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_UNIXMAIL Application Class
Dead

Shows the number of dead messages.

Collector: NOTES_SR/ShowStatsColl
TotalFailures

Shows the total number of failures.

Collector: NOTES_SR/ShowStatsColl
TotalRouted

Shows the total number of messages routed.

Collector: NOTES_SR/ShowStatsColl
WaitingRecipients

Shows the total number of waiting recipients.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_WEBPROC Application Class
Process.Num.Active

Displays the number of active processes.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Busy

Displays the number of busy processes.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Idle

Displays the number of idle processes.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Maximum

Displays the maximum number of processes.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_WEBRET Application Class
Access.FTP

Shows the number of FTP hits.

Collector: NOTES_SR/ShowStatsColl
Access.Gopher

Shows the number of Gopher hits.

Collector: NOTES_SR/ShowStatsColl
Access.HTTP

Shows the number of HTTP hits.

Collector: NOTES_SR/ShowStatsColl
Bytes.Received

Shows the number of bytes received.

Collector: NOTES_SR/ShowStatsColl
Bytes.Sent

Shows the number of bytes sent

Collector: NOTES_SR/ShowStatsColl
ImageCache.Hits

Shows the number of image cache hits.

Collector: NOTES_SR/ShowStatsColl
ImageCache.Misses

Shows the number of image cache misses.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Active

Shows the number of active processes.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Busy

Shows the number of busy processes.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Idle

Shows the number of idle processes.

Collector: NOTES_SR/ShowStatsColl
Process.Num.Maximum

Shows the maximum number of processes.

Collector: NOTES_SR/ShowStatsColl
URLs.Failed

Shows the number of URLs failed.

Collector: NOTES_SR/ShowStatsColl
URLs.Requested

Shows the number of URLs requested.

Collector: NOTES_SR/ShowStatsColl
URLs.Succeeded

Shows the number of URLs succeeded.

Collector: NOTES_SR/ShowStatsColl
VPOOL.Max.Buf

Shows the maximum size of the buffer.

Collector: NOTES_SR/ShowStatsColl
VPOOL.Max.Element

Shows the maximum size of the element.

Collector: NOTES_SR/ShowStatsColl
VPOOL.Max.Marker

Shows the maximum size of the marker.

Collector: NOTES_SR/ShowStatsColl
VPOOL.Max.Text

Shows the maximum size of the text.

Collector: NOTES_SR/ShowStatsColl
VPOOL.Max.URL

Shows the maximum size of the URL.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_X400 Application Class
Dead

Shows the number of dead messages.

Collector: NOTES_SR/ShowStatsColl
ToNotes

Shows the number of Notes messages.

Collector: NOTES_SR/ShowStatsColl
ToNotesFailed

Shows the number of failed Notes messages.

Collector: NOTES_SR/ShowStatsColl
ToSMTP

Shows the number of SMTP messages.

Collector: NOTES_SR/ShowStatsColl
ToSMTPFailed

Shows the number of failed SMTP messages.

Collector: NOTES_SR/ShowStatsColl.
ToX400

Shows the number of X400 messages.

Collector: NOTES_SR/ShowStatsColl
ToX400Failed

Shows the number of failed X400 messages.

Collector: NOTES_SR/ShowStatsColl
TotalInTheBox

Shows the total number of messages in the box.

Collector: NOTES_SR/ShowStatsColl
NOTESTAT_XPC Application Class
Errors.CRC

Shows the number of CRC errors.

Collector: NOTES_SR/ShowStatsColl
Errors.Port

Shows the number of port errors.

Collector: NOTES_SR/ShowStatsColl
Errors.RetransmittedPackets

Shows the number of retransmitted packet errors.

Collector: NOTES_SR/ShowStatsColl
Sessions.Active

Shows the number of sessions active.

Collector: NOTES_SR/ShowStatsColl
Speed.Carrier

Shows the carrier speed.

Collector: NOTES_SR/ShowStatsColl
Speed.Port

Shows the number of port speed.

Collector: NOTES_SR/ShowStatsColl
Status

Shows the port status.

Collector: NOTES_SR/ShowStatsColl
UserBytes.Received

Shows the number of bytes received.

Collector: NOTES_SR/ShowStatsColl
UserBytes.Sent

Shows the number of bytes sent.

Collector: NOTES_SR/ShowStatsColl
UserMsgs.Received

Shows the number of messages sent.

Collector: NOTES_SR/ShowStatsColl
UserMsgs.Sent

Shows the number of messages received.

Collector: NOTES_SR/ShowStatsColl















PATROL for Microsoft Exchange Servers 5.0.00


Table 18 PATROL for Microsoft Exchange Servers 5.0.00
Parameter



MSEXCH_AD_Connection Application Class
ADConnColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Active Directory Connector consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
FailedAttempts

Displays the number of times in the last collection cycle that the Active Directory connector failed to add or modify objects in the destinations directory.

Collector: ADConnColl
ImportFailRate

Displays the rate of Active Directory import failures.

Collector: ADConnColl
MSEXCH_AD_Replication Application Class
AccessDenials

Displays the number of times that write operations were refused because of a security problem associated with your connection to an Exchange 5.x server.

Collector: ADRepColl
ADReplColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the MSEXCH_AD_Replication consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.

Collector: ADRepColl
ReplSynchsPending

Displays the number of replication requests that are queued but not yet processed.

Collector: ADRepColl
ReplUpdateRate

Displays the rate that replication updates are applied to the local server by the site replication service.

Collector: ADRepColl
MSEXCH_Address_List Application Class
AddressListQueueLength

Displays the number of entries in the Address List queue.

Collector: AlColl
ALColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Address List consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
ModifyFailRate

Displays the rate of LDAP modify failures.

Collector: AlColl
RecipientQueueLength

Displays the number of replication messages received from remote servers that are waiting in the public information store receive queue.

Collector: AlColl
MSEXCH_Chat_Communities Application Class
AuthFailures

Displays the number of failed authentication attempts.

Collector: ChatCommColl
ChatCommColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Chat Communities consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
ClientBytesQueued

Displays the total number of bytes that are waiting to be transmitted from the chat server to clients.

This parameter is available only when the Exchange 2000 Chat Service is running.

Collector: ChatCommColl
MSEXCH_Chat_Servers Application Class
ChatSvrColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Chat Servers consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
DnsLookupFailures

Displays the number of times that a DNS Lookup failed in the last collection cycle.

If this value is unusually high, a DNS server may be down or misconfigured.

This parameter is available only when the Exchange 2000 Chat Service is running.

Collector: ChatSvrColl
SrvOpsQueued

Displays the number of chat server operations that are currently queued.

This parameter is available only when the Exchange 2000 Chat Service is running.

Collector: ChatSvrColl
MSEXCH_Cluster_Container Application Class
ClusterColl

Contains a description of any errors that prevent the collector parameter from obtaining data and populating the Cluster consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MaxFolderMsgs

Displays the maximum number of messages in any public or private folder that is supported by this virtual server.

This parameter is active only if the server is hosting storage groups that contain public or private store.

Collector: ClusterColl
PrivateFolders

Displays the total number of private folders that are supported by this virtual server.

This parameter is active only if the server is hosting storage groups that contain private stores.

Collector: ClusterColl
PublicFolders

Displays the total number of public folders that are supported by this virtual server.

This parameter is active only if the server is hosting storage groups that contain private stores.

Collector: ClusterColl
ServerMessages

Displays the total number of messages in all stores that are supported by this virtual server.

This parameter is active only if the server is hosting storage groups that contain public or private stores.

Collector: ClusterColl
ServerMsgSize

Displays the total size of the messages in all stores that are supported by this virtual server.

This parameter is active only if the server is hosting storage groups that contain public or private stores.

Collector: ClusterColl
TrackLogFiles

Displays the total number of message tracking log files for this virtual server. This parameter has a built-in recovery action (inactive by default) that purges the message tracking database log files when the TrackLogFiles parameter to go into an alarm state.

Collector: ClusterColl
TrackLogSize

Displays the total size of the message tracking log files for this virtual server.

Collector: ClusterColl
MSEXCH_Cluster_Resources Application Class
State

Displays the status of the Exchange cluster resource group

This parameter sets its own value.








MSEXCH_Conference_Performance Application Class
ConferenceColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Conference consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
Conferences

Displays the number of active conferences in progress.

Collector: ConferenceColl
Profiles

Displays the number of scheduled conferences in the conference profile store.

Collector: ConferenceColl
Scheduled

Displays the number of scheduled conferences in the conference server.

Collector: ConferenceColl
MSEXCH_Database Application Class
CachePgFaultsPerSec

Displays the number of database file page requests that require the database cache manager to allocate a new page from the database cache.

Tip: If the number of requests per second is high, the database cache may be too small. You may want to allocate more memory to the Exchange Server using the PerfWiz utility. If Exchange Server is already using the full server memory, you may need to add more memory to the machine. Inspect the additional memory and available memory parameters to determine if the server may need additional memory.

Collector: DatabaseColl
DatabaseColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the Database consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
LogThreadsWaiting

Displays the number of threads waiting for their data to be written to the log to complete an update of the database. If this number is too high, the log may be a bottleneck and you may need to establish a dedicated log drive. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: DatabaseColl
TblOpenCacheHitPct

Displays the percentage of database tables opened using cached schema information. If this percentage is too low, the table cache size may be too small.

Collector: DatabaseColl
MSEXCH_DataConf_Server Application Class
DataConfColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Data Conference consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
FailedJoinPct

Displays the percentage of users who tried to join a conference and failed.

Collector: DataConfColl
FailedMcu

Displays the number of failed T.120 MCUs.

Collector: DataConfColl
FailedUserJoins

Displays the number of times in the last collection cycle that a user tried to join a conference and failed.

Collector: DataConfColl
MSEXCH_DB_Private Application Class
AvgDeliverTime

Displays the average length of time between the client submitting a message to the private information store and the information store delivering the message to the MTA.

PATROL uses the last 10 messages to compute the average.

Collector: DBPrivateColl
Categorizations

Displays the number of categorizations in the private information store.

Categorizations are created when a user creates a view or performs a search. If the number of categorizations are unusually high, performance can be affected.

Collector: DBPrivateColl
DbFileSize

Displays the size of the private information store database file (.edb).

Collector: DBPrivateColl
DBPrivateColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Private Database consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
FreeDBSpaceAvailForDefrag

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: DBPrivateColl
FreeDBSpaceAvailForDefragRpt

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: DBPrivateColl
FreeDiskSpaceOnThisDrive

Displays the free space on the disk partition containing the database.

Collector: DBPrivateColl
MsgSentPerMin

Displays the rate that private information store messages are sent to other storage providers via the MTA.

Collector: DBPrivateColl
MsgSubmitPerMin

Displays the rate that clients submit messages to the private information store.

Collector: DBPrivateColl
PercentFragmentation

Displays the percent defragmentation as the total defragmented space in the database divided by the total size of the database.

Collector: DBPrivateColl
RecvQueueSize

Displays the total size of the replication messages received from remote servers that are waiting in the public information store receive queue.

Collector: DBPrivateColl
SendQueueSize

Displays the number of messages in the private information store send queue.

Collector: DBPrivateColl
Status

Displays the status of the private information store.

Collector: DBPrivateColl


StmFileSize

Displays the size of the private information store streaming file (.stm).

Collector: DBPrivateColl
MSEXCH_DB_Public Application Class
AvgDeliverTime

Displays the average length of time between the client submitting a message to the public information store and the information store delivering the message to the MTA.

PATROL uses the last 10 messages to compute the average.

Collector: DBPublicColl
Categorizations

Displays the number of categorizations in the public information store.

Categorizations are created when a user creates a view or performs a search. If the number of categorizations are unusually high, performance can be affected.

Collector: DBPublicColl
DbFileSize

Displays the size of the public information store database file (.edb).

Collector: DBPublicColl
DBPublicColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Public Database consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
FreeDBSpaceAvailForDefrag

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: DBPublicColl
FreeDBSpaceAvailForDefragRpt

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: DBPublicColl
FreeDiskSpaceOnThisDrive

Displays the free space on the disk partition containing the database.

Collector: DBPublicColl
MsgSentPerMin

Displays the rate that public information store messages are sent to other storage providers via the MTA.

Collector: DBPublicColl
MsgSubmitPerMin

Displays the rate that clients submit messages to the public information store.

Collector: DBPrivateColl
PercentFragmentation

Displays the percent defragmentation as the total defragmented space in the database divided by the total size of the database.

Collector: DBPublicColl
RecvQueueSize

Displays the number of messages in the public information store receive queue.

Collector: DBPublicColl
ReplMsgRecvRate

Displays the rate that messages in the public information store are received via replication from remote servers.

Collector: DBPublicColl
ReplMsgSendRate

Displays the rate that messages in the public information store are replicated to remote servers.

Collector: DBPublicColl
ReplRecvQueueSize

Displays the number of messages in the public information store replication queue.

If this value is unusually large, messages may be building in the queue because the server cannot connect with the receiving server.

Collector: DBPublicColl
SendQueueSize

Displays the number of messages in the public information store send queue.

Collector: DBPublicColl
Status

Displays the status of the public information store

Collector: DBPublicColl


StmFileSize

Displays the size of the public information store streaming file (.stm).

Collector: DBPublicColl
MSEXCH_Directory Application Class
ABClientSessions

Displays the number of clients currently accessing the Global Address Book.

Collector: DirectoryColl.
AccessViolations

Displays the number of times that directory service write operations were refused for security reasons.

Collector: DirectoryColl.
DirectoryColl

Describes any errors that prevent the parameter from obtaining perfmon data and populating the Directory consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
SynchPending

Displays the number of directory synchronizations that are queued for this server but not yet processed. If SynchPending is high or increasing, you may need to revisit your synchronization strategy. If SynchPending is zero, your directories are not being synchronized.

Collector: DirectoryColl.
ThreadsInUse

Lists the number of directory service RPC-generated threads currently in API calls. You could use this value to determine whether additional processors are needed.

Collector: DirectoryColl.
MSEXCH_DSAccess_Cache Application Class
AsyncReadsPending

Displays the number of outstanding asynchronous LDAP read requests submitted to the DSA (Directory Service Access).

If this value is high or rising, Exchange clients may be experiencing delays when interacting with the information store.

Collector: DSACacheColl
AsyncSearchesPending

Displays the number of outstanding asynchronous LDAP search requests submitted to the DSA (Directory Service Access).

If this value is high or rising, Exchange clients may be experiencing delays when searching the information store.

Collector: DSACacheColl
CacheMemory

Displays the size of the DSA (Directory Service Access) cache.

Collector: DSACacheColl
DSACacheColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the DSA Cache consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
PctMaxMemory

Displays the percentage of the DSA (Directory Service Access) maximum cache memory that is currently in use.

Collector: DSACacheColl
MSEXCH_DSAccess_Contexts Application Class
AsyncReadsPending

Displays the number of outstanding LDAP read requests.

Collector: DSAContextsColl
AsyncSearchesPending

Displays the number of outstanding LDAP search requests.

Collector: DSAContextsColl
DSAContextColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the DSAContext consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_DSAccess_Processes Application Class
DSAProcColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the DSAProc consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
LdapReadTime

Displays the amount of time required by a client to send an LDAP read request to the DSA and receive a response.

If this value is high or rising, Exchange clients may be experiencing delays when interacting with the information store.

Collector: DSAProcColl
LdapSearchTime

Displays the time required by a client to send a LDAP search request to the DSA and receive a response.

If this value is high or rising, Exchange clients may be experiencing delays when searching the information store.

Collector: DSAProcColl
MSEXCH_Events Application Class
AvgEventTime

Displays the average time spent in each event.

Collector: EventsColl.
AvgScriptTime

Displays the average time spent in each script. If this value is high, you may have inefficient scripts.

Collector: EventsColl.
EventsColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the Events consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
NotifyQueue

Lists the number of store notifications waiting to be processed.

Collector: EventsColl.
MSEXCH_ExIPC Application Class
ClientFailures

Displays the number of PostQueuedCompletionStatus failures on the client.

Collector: ExIPCColl
ClientQueLen

Displays the length of the client-to-store output queue.

Collector: ExIPCColl
ExIPCColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the ExIPC parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
StoreFailures

Displays the number of PostQueuedCompletionStatus failures on the information store.

Collector: ExIPCColl
StoreQueLen

Displays the length of the store-to-client output queue.

Collector: ExIPCColl
MSEXCH_GroupWise_Connector Application Class
GWColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the GroupWise consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
InQueueLen

Displays the number of messages that were sent to Exchange from the Novell GroupWise server and are waiting to be delivered to clients.

Collector: GWColl
NDRRecv

Displays the number of non-delivery reports (NDRs) received from the connected Novell GroupWise server during the collection cycle.

This value represents the number of messages that were sent from the Exchange server to the GroupWise that could not be delivered to a recipient. Possible causes for an NDR include:

the GroupWise connector is not configured properly

the recipient no longer exists

Collector: GWColl
NDRSent

Displays the number of non-delivery reports (NDRs) sent to the connected Novell GroupWise server during the collection cycle.

This value represents the number of messages that were sent from the GroupWise server to the Exchange server that could not be delivered to a recipient. Possible causes for an NDR include:

the GroupWise connector is not configured properly

the recipient no longer exists

Collector: GWColl
OutQueueLen

Displays the number of messages queued for delivery to the Novell GroupWise server.

Collector: GWColl
MSEXCH_HTTP_Server Application Class
AuthFailRate

Displays the rate that the Exchange server is sending "401 Unauthorized" responses to clients.

An unusually high rate of these responses could indicate that someone is attempting unauthorized access of the web store.

Collector: HttpColl
BadRequestRate

Displays the rate that the Exchange server is sending "400 Bad Request" responses to clients.

Collector: HttpColl
ExceptionRate

Displays the rate of exceptions experienced by the server.

Collector: HttpColl
ForbiddenRate

Displays the rate that the Exchange server is sending "403 Forbidden" HTTP responses to clients.

Collector: HttpColl
HttpColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the HTTP Server consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MethodFailRate

Displays the rate that the Exchange server is sending "424 Method Fail" HTTP responses to clients.

Collector: HttpColl
NoServiceRate

Displays the rate that the Exchange server is sending "503 Service Unavailable" responses to clients.

Collector: HttpColl
RequestRate

Displays the rate that the Exchange server is receiving HTTP requests.

Collector: HttpColl
ServerErrorRate

Displays the rate that the Exchange server is sending "500 Server Error" HTTP responses to clients.

Collector: HttpColl
MSEXCH_IM_Server Application Class
IMColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the IM Server consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
InByteRate

Displays the number of instant messaging bytes read over the network.

Collector: IMColl
OutByteRate

Displays the number of instant messaging bytes sent over the network.

Collector: IMColl
ReqFailRate

Displays number of instant messaging requests that failed.

Collector: IMColl
ReqRejectRate

Displays the number of instant messaging requests rejected.

Collector: IMColl
RespFailRate

Displays the number of instant messaging responses not sent.

Collector: IMColl
Subscriptions

Displays the number of subscriptions currently active.

Collector: IMColl
Users

Displays the number of instant messaging users currently online.

Collector: IMColl
MSEXCH_IM_Virtual_Server Application Class
IMVirtualColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the IM Virtual Server consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
InByteRate

Displays the number of instant messaging bytes read over the network.

Collector: IMVirtualColl
OutByteRate

Displays the number of instant messaging bytes sent over the network.

Collector: IMVirtualColl
ReqFailRate

Displays number of instant messaging requests that failed.

Collector: IMVirtualColl
ReqRejectRate

Displays the number of instant messaging requests rejected.

Collector: IMVirtualColl
RespFailRate

Displays the number of instant messaging responses not sent.

Collector: IMVirtualColl
Subscriptions

Displays the number of subscriptions currently active.

Collector: IMVirtualColl
Users

Displays the number of instant messaging users currently online.

Collector: IMVirtualColl
MSEXCH_IMAP4_Server Application Class
CmdFailRate

Displays the number of IMAP4 commands that failed per second.

Collector: IMAP4Coll
CmdRecvRate

Displays the number of IMAP4 commands received per second.

Collector: IMAP4Coll
IMAP4Coll

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the IMAP4 Sever consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
InvalidCmdRate

Displays the number of invalid IMAP4 commands received per second.

Collector: IMAP4Coll
MSEXCH_Inet_Mail Application Class
FailedConversions

The number of conversions between Internet format and Exchange format that failed.

Collector: InetMailColl.
InBytesPerHour

Indicates the rate that bytes are transferred to the Exchange Server from the Internet.

Collector: InetMailColl.
InBytesQueued

Displays the size of the messages that have been converted from Internet mail and are awaiting final delivery within the Exchange Server.

Collector: InetMailColl
InetMailColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the InetMail consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
InMsgPerHr

Displays the average number of messages received in the past hour from the Internet that were converted to Exchange format and waiting for final delivery to the Information Store.

Tip: Typically this queue exhibits a pattern of growing and then falling back toward zero. If the queue increases steadily over time without recovering, you may have a problem with your Exchange Serve.

Collector: InetMailColl.
InMsgQueued

Displays the number of messages received from the Internet that were converted to Exchange format and are awaiting final delivery to the Information Store.

Tip: Typically this queue exhibits a pattern of growing and then falling back toward zero. If the queue increases steadily over time without recovering, you may have a problem with your Exchange Server.

Collector: InetMailColl.
OutBytesPerHour

Displays the rate that bytes are transferred from the Exchange Server to the Internet.

Tip: If this value is low, either the server or the receiving machine may have a problem.

Collector: InetMailColl.
OutBytesQueued

Displays the size of the messages waiting to be converted to Internet mail format.

Tip: If this value is high, a problem on the Internet, such as a malfunctioning router or server, may be preventing messages from going out.

Collector: InetMailColl.
OutMsgPerHr

Displays the average number of messages sent by the Exchange Server to the Internet Mail Connector during the last hour that were waiting to be converted to Internet Mail format.

Tip: Typically this queue exhibits a pattern of growing and then falling back toward zero. If the queue increases steadily over time without recovering, you may have a problem with the Exchange Internet Mail Connector or with your Internet connection.

Collector: InetMailColl.
OutMsgQueued

Displays the number of messages sent by the Exchange Server to the Internet Mail Connector that are waiting to be converted to Internet Mail format.

Tip: Typically this queue exhibits a pattern of growing and then falling back toward zero. If the queue increases steadily over time without recovering, you may have a problem with the Exchange Internet Mail Connector or with your Internet connection.

Collector: InetMailColl.
QueuedInbound

Displays the number of messages received from the Internet that are waiting to be converted to Exchange format.

Tip: Typically this queue exhibits a pattern of growing and then falling back toward zero. If the queue increases steadily over time without recovering, you may have a problem with your Exchange Server or with the Exchange Internet Mail.

Collector: InetMailColl.
QueuedOutbound

Displays the number of messages received by the Internet Mail Connector that are waiting to be converted to Internet Mail format.

Tip: Typically this queue exhibits a pattern of growing and then falling back toward zero. If the queue increases steadily over time without recovering, you may have a problem with your Internet connection.

Collector: InetMailColl.
TotMsgQueued

Displays the total of InMsgQueued and OutMsgQueued: OutMsgQueued  the number of messages sent by the Exchange Server to the Internet Mail Connector that are waiting to be converted to Internet Mail format. InMsgQueued  the number of messages received from the Internet that have been converted to Exchange format and are awaiting final delivery to the Information Store.

Collector: InetMailColl.
MSEXCH_Inet_Protocols Application Class
ActiveConnections

Displays the number of currently active connections that are using the Internet protocol. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: InetProtocolsColl.
BytesRecvPerSec

Displays the rate that clients send bytes to the Exchange Server using the Internet protocol.

Collector: InetProtocolsColl.
BytesSentPerSec

Displays the rate that the Exchange Server sends bytes to clients using the Internet protocol.

Collector: InetProtocolsColl.
InQueueSize

Displays the number of bytes in the incoming queue of the Internet protocol.

Collector: InetProtocolsColl
InetProtocolsColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the InetProtocols consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
OutQueueSize

Displays the number of bytes in the outgoing queue of the Internet protocol.

Collector: InetProtocolsColl
MSEXCH_IS Application Class
ActiveConnectionCount

Displays the number of clients that have interacted with the information store in the last 10 minutes. Examples of interaction include reading and sending mail.

Collector: ISColl
ActiveUserCount

Displays the number of users that have shown some activity in the last 10 minutes. If some users have multiple connections, ActiveUserConnects could be lower than ActiveConnections.

Collector: ISColl
ConnectionCount

Displays the number of client processes connected to the information store. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: ISColl
DbSessionHitRate

Displays the percent hit rate on reusing database sessions.

Collector: ISColl
ISColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the IS consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
RPCRequests

Displays the number of client connections currently being processed by the IS.

Collector: ISColl
UserCount

Displays the number of users connected to the information store. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: ISColl
MSEXCH_IS_Container Application Class
InformationStoresColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the IS consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_IS_Private Application Class
AvgDeliverTime

Displays the average length of time between the client submitting a message to the private information store and the information store delivering the message to the MTA. PATROL uses the last 10 messages to compute the average.

Collector: ISPrivateColl
DBFileSize

Displays the total size of the database.

Collector: ISPrivateColl
FolderOpensPerSec

Displays the rate that requests to open folders are submitted to the Information Store.

Collector: ISPrivateColl
FreeDBSpaceAvailForDefrag

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: ISPrivateColl
FreeDBSpaceAvailForDefragRpt

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: ISPrivateColl
FreeDiskSpaceOnThisDrive

Displays the free space on the disk partition containing the database.

Collector: ISPrivateColl
ISPrivateColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the ISPrivate consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MessageOpensPerSec

Displays the rate that messages are being opened by users within the Public Store.

Collector: ISPrivateColl
MsgSentPerMin

Displays the rate that the MTA sends private information store messages to private information stores on remote Exchange Servers.

Collector: ISPrivateColl
MsgSubmitPerMin

Displays the rate that private information store messages are submitted by clients.

Collector: ISPrivateColl
PercentFragmentation

Displays the percent defragmentation as the total defragmented space in the database divided by the total size of the database.

Collector: ISPrivateColl
SendQueueSize

Displays the number of messages in the private information store send queue waiting to be sent to the MTA. If SendQueueSize is high or increasing, the MTA may be down or performing poorly, and you will likely experience slow mail delivery. According to Microsoft, SendQueueSize should not exceed 0.5 - 1.0% of connected users.

Tip: If you suspect that the private information store send queue is a bottleneck, try the following: move some or all of the mailboxes to another server; use multiple disk controllers; limit the amount or type of mail that users can send; add more disks to the stripe set; add one or more caching disk controllers that cache read and write operations.

Collector: ISPrivateColl
MSEXCH_IS_Public Application Class
AvgDeliverTime

Displays the average length of time between the client submitting a message to the public information store and the information store delivering the message to the MTA. PATROL uses the last 10 messages to compute the average.

Collector: ISPublicColl
DBFileSize

Displays the total size of the database.

Collector: ISPublicColl
FolderOpensPerSec

Displays the rate that requests to open folders are submitted to the Information Store.

Collector: ISPublicColl
FreeDBSpaceAvailForDefrag

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: ISPublicColl
FreeDBSpaceAvailForDefragRpt

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: ISPublicColl
FreeDiskSpaceOnThisDrive

Displays the amount of free space that will be available if an offline defragmentation is performed.

Collector: ISPublicColl
ISPublicColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the ISPublic consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MessageOpensPerSec

Displays the rate that messages are being opened by users within the Public Store.

Collector: ISPublicColl
MsgSentPerMin

Displays the rate that the MTA sends public information store messages to private information stores on remote Exchange Servers.

Collector: ISPublicColl
MsgSubmitPerMin

Displays the rate that public information store messages are submitted by clients.

Collector: ISPublicColl
PercentFragmentation

Displays the percent defragmentation as the total defragmented space in the database divided by the total size of the database.

Collector: ISPublicColl
SendQueueSize

Displays the number of messages in the public information store send queue that are waiting to be sent to the MTA. If SendQueueSize is high or increasing, the MTA may be down or performing poorly, and you will likely experience slow mail delivery.

Tip: If you suspect that the public information store send queue is a bottleneck, consider the following actions: configure the public folder replication to occur less frequently; move some or all of the public folders to another server; use multiple disk controllers; add more disks to the stripe set; add one or more caching disk controllers that cache read and write operations.

Collector: ISPublicColl
MSEXCH_IS_Service Application Class
ISPerformanceColl

Collects the information used by the MSEXCH_Performance application class.
MsgDeliveryRateToAllRecipients

Displays the rate that messages are delivered to all recipients.

Collector: ISPerformanceColl
MsgReceivedRateByRecipients

Displays the rate that messages are received by recipients.

Collector: ISPerformanceColl
MsgSendRateToRoutingEngine

Displays the rate that messages are sent to the Transport Core (Routing Engine).

Collector: ISPerformanceColl
MsgSubmitRateByClients

Displays the per minute rate messages are submitted by clients.

Collector: ISPerformanceColl
MSEXCH_Lotus_Connector Application Class
CcMailMsgsPerHour

Displays the number of messages per hour sent to Exchange from Lotus cc:Mail.

Collector: LotusConnectorColl
DirSynchUpdates

Displays the number of directory updates sent to Lotus cc:Mail since the last directory synchronization started.

Collector: LotusConnectorColl
ExchangeMsgsPerHour

Displays the number of messages sent to Lotus cc:Mail from Exchange.

Collector: LotusConnectorColl
LotusConnectorColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the Lotus Connector consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Lotus_Notes Connector Application Class
InboundQueue

Displays the number of messages in the Lotus Notes connector that are queued for delivery to the Exchange server.

If the queue length is above zero for an extended period of time, you may have a problem with the Lotus Notes connector or the receiving server.

Collector: NotesColl
MsgBytesRecv

Displays the number of message bytes received from the Lotus Notes system during the collection cycle.

Collector: NotesColl
MsgBytesSent

Displays the number of message bytes sent to the Lotus Notes system during the collection cycle.

Collector: NotesColl
MsgsRecv

Displays the number of messages received from the Lotus Notes system during the collection cycle.

Collector: NotesColl
MsgsSent

Displays the number of messages sent to the Lotus Notes system during the collection cycle.

Collector: NotesColl
NonDeliveryRpts

Displays the number of non-delivery reports (NDRs) received from the Lotus Notes system during the collection cycle.

Collector: NotesColl
NotesColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Lotus Notes Connector consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
OutboundQueue

Displays the number of messages in the Lotus Notes connector that are queued for delivery to the Lotus Notes server.

If the queue length increases or remains above zero for an extended period of time, the Lotus Notes server may be down or you may have a network problem.

Collector: NotesColl
MSEXCH_MCUConf_Server Application Class
ByteRecvRate

Displays the rate that bytes are received by this T120 server.

Collector: MCUConfColl
ByteSentRate

Displays the rate that the conference server sends bytes to conference clients using the T.120 Multipoint Control Unit (MCU) protocol.

Collector: MCUConfColl
MCUConfColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the MCU Conference Server consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_MonitoredServers Application Class
PercentOfTotalRecv

Percentage of the total traffic received.

Collector: MSEXCHSentMailColl
PercentOfTotalSent

Percentage of the total traffic sent.

Collector: MSEXCHSentMailColl
RecvBytes

Displays the total number of bytes received by this server from the remote server in the last polling cycle.

Collector: MSEXCHSentMailColl
RecvMsgs

Displays the total number of messages received by this server from the remote server in the last pollinc cycle.

Collector: MSEXCHSentMailColl
SentBytes

Displays the total number of bytes sent to the remote server in the last polling cycle.

Collector: MSEXCHSentMailColl
SentMsgs

Displays the number of messages sent to the remote server in the last polling cycle.

Collector: MSEXCHSentMailColl
MSEXCH_MsMail_Connector Application Class
MsMailColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the MsMail consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
RecvKbPerHour

Displays the kilobytes upload rate to the Exchange Server from the MS Mail Connector Interchange.

Collector: MsMailColl
SentMsgsPerHour

Displays the rate that messages are downloaded from the Exchange Server to the MS Mail Connector Interchange.

Collector: MsMailColl
MSEXCH_MsMQ_Connector Application Class
BytesIn

Displays the number of bytes sent to Exchange Server through the MsMQ Exchange connector in the last hour. If you don't have an MsMQ connector, this parameter is not instantiated.

Collector: MsMQConnectorColl
BytesOut

Displays the number of bytes sent to the MsMQ Exchange connector from Exchange in the last hour. If you don't have an MsMQ connector, this parameter is not instantiated.

Collector: MsMQConnectorColl
MsMQConnectorColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the MsMQConnector consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
WaitingBytesIn

Displays the number of bytes in the MSMQ Exchange Connector inbound folder waiting to be transferred to the Exchange Server. If you don't have an MsMQ connector, this parameter is not instantiated.

Collector: MsMQConnectorColl
WaitingBytesOut

Displays the number of bytes in the MsMQ Exchange Connector outbound folder waiting to be transferred out to the message queue server. If WaitingBytesOut is high or increasing, you may have a problem with the message queue server. If you don't have an MsMQ connector, this parameter is not instantiated.

Collector: MsMQConnectorColl
MSEXCH_MTA Application Class
AdjacentMTAOpens

Displays the number of open associations that this MTA has with other MTAs, including MTAs within the site and outside of the site.

Collector: MTAColl
AdminConnects

Displays the number of Exchange Administrator programs connected to this MTA.

Collector: MTAColl
FailedConvertRatio

Displays the ratio of failed message conversions to successful message conversions since the MTA was initialized.

Collector: MTAColl
FailedMsgConverts

Displays the total number of messages that failed to be converted from one form to another during the collection cycle.

Collector: MTAColl
MsgBytesPerSec

Displays the rate that messages are processed by the MTA.

Collector: MTAColl
MTAColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the MTA consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
QueueGrowth

the rate that the MTA queue is growing

this parameter is based on the following parametrs:

WorkQueueLength
MsgBytesPerSec

This parameter has a built-in recovery action (inactive by default) that restarts the MTA when queue messages are not being processed.

Collector: MTAColl
WorkQueueLength

Displays the total number of messages currently stored in the MTA. This number includes inbound and outbound messages for the Information Store, the Directory, and any MTA connectors. According to Microsoft, this value should not exceed 0.5 - 1.0% of connected users. If the queue length is high or rising, it may indicate that you have a problem with one of your Exchange components or with a remote Exchange MTA.

Collector: MTAColl
WorkQueueSize

Displays the total volume of messages currently stored in the MTA. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: MTAColl
MSEXCH_MTA_Connections Application Class
MTAConnectionsColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the MTAConnections consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
OldestMessage

Displays the longest time that any currently queued message has been in the MTA connection queue.

Note: In Microsoft Exchange Server 5.5 SP1 and SP2, the Windows NT Performance counter that supplies the data for this parameter is unreliable. See the Microsoft Exchange Server documentation for more information.

Collector: MTAConnectionsColl
QueueGrowth

Gives an indication of the number of unprocessed messages in the queue per minute.
QueueLength

Displays the number of outstanding messages queued for transfer to this MTA connection. If QueueLength is large or increasing, the receiving MTA may be failing. Note: In Microsoft Exchange Server 5.5 SP1 and SP2, the Windows NT Performance counter that supplies the data for this parameter is unreliable.

Collector: MTAConnectionsColl
RecvBytesPerSec

Displays the rate that bytes are received from this MTA connection.

Collector: MTAConnectionsColl
SendBytesPerSec

Displays the rate that bytes are sent to this MTA connection.

Collector: MTAConnectionsColl
MSEXCH_MTA_PC Application Class
ContentionsPerHour

Displays the rate that file operations are failing due to contention.

Collector: MTAPCColl
MTAPCColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the MTAPC consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
RecvMsgsPerHour

Displays the rate that the Exchange Server receives messages from a MS Mail Connector.

Collector: MTAPCColl
SentMsgsPerHour

Displays the rate that messages are sent from the Exchange Server to the MS Mail Connector.

Collector: MTAPCColl
MSEXCH_Network Application Class
BytesTotalPerSec

Displays the total bytes per second sent and received by the Redirector.

Collector: MSEXCHNetworkColl
MSEXCHNetworkColl

Gathers data for the parameters in the MSEXCH_Network application class.
NetworkErrorsPerSec

Count of network errors encountered by the Redirector.

Collector: MSEXCHNetworkColl
MSEXCH_NSPI_Proxy Application Class
ByteXmitRate

Displays the rate that the Name Service Provider Interface (NSPI) Proxy transmits bytes to the domain controller and to Outlook clients.

Collector: NSPIColl
ClientConnects

Displays the number of Outlook clients connected to the Name Server Provider Interface (NSPI) Proxy service.

Collector: NSPIColl
FailedReads

Displays the number of times that the Name Service Provider Interface (NSPI) Proxy service failed to read from a domain controller or an Outlook client.

Collector: NSPIColl
FailedWrites

Displays the number of times that the Name Service Provider Interface (NSPI) Proxy service failed to write to a domain controller or an Outlook client.

Collector: NSPIColl
NSPIColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the NSI Proxy consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Oledb_Events Application Class
Completed

Displays the number of OLE/DB events completed during the last collection cycle.

Collector: OledbEventColl
CompletionRate

Displays the rate that OLE/DB events are completed.

Collector: OledbEventColl
OledbEventColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the OLE/DB Event consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
SubmitRate

Displays the rate that OLE/DB events are submitted.

Collector: OledbEventColl
Submitted

Displays the number of OLE/DB events submitted.

Collector: OledbEventColl
MSEXCH_Oledb_Resources Application Class
AbortPct

Displays the percentage of information store transactions that abort.

Collector: OledbColl
AbortRate

Displays the rate that information store transactions are aborted.

Collector: OledbColl
CommitRate

Displays the rate that OLE/DB transactions were committed during the last collection cycle.

Collector: OledbColl
OledbColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the OLE/DB Resources consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
StartRate

Displays the rate that OLE/DB transactions are started.

Collector: OledbColl
MSEXCH_Performance Application Class
ClientConnections

Displays the number of clients connected to the Exchange Server. PATROL for Exchange Server provides a built-in report for this parameter

Collector: PerformanceColl
ClientLicenseCount

Displays the number of client licenses available. If you are using per seat licensing, this parameter is inactive.

Collector: PerformanceColl
DbLogFiles

Displays the number of database transaction log files. This parameter contains a recovery action (inactive by default) that purges or backs up the information store database logs when the DbLogFiles parameter enters an alarm state

Collector: PerformanceColl
DBLogSize

Displays the total size of the database transaction log files for all of the storage groups on the server.

Collector: PerformanceColl
EvtLogInfoCount

Displays the number of Exchange information events logged during the collection cycle. This parameter is active only if the Event Log Monitoring option is enabled for your configuration.

Collector: PerformanceColl
InactiveConnections

Displays the number of clients connected to the Exchange Server that have had no activity in the last 10 minutes. PATROL for Exchange Server provides a built-in report for this parameter

Collector: PerformanceColl
MaxFolderMsgs

Displays the largest number of messages in any folder (public or private).

Collector: PerformanceColl
PerformanceColl

Gathers server performance-related parameters for a discovered Exchange Server.
PrivateFolders

Displays the total number of user mailboxes on the Exchange Server. PATROL for Exchange Server provides a built-in report for this parameter

Collector: PerformanceColl
PublicFolders

Displays the total number of public folders on the Exchange Server. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: PerformanceColl
ServerCpuPctPriv

Displays the percentage of processor time spent in privileged mode in non-idle threads. Device drivers for most devices except graphics adapters and printers execute in privileged mode, as well as the Windows NT service layer, the executive routines, and the Windows NT kernel. This parameter is active only if the Process Monitoring option is enabled for your configuration.

Collector: PerformanceColl
ServerCpuPctUser

Displays the percentage of CPU time currently being spent in user mode doing commands and tasks initiated by users. This parameter is active only if PATROL KM for Windows NT is loaded.

Collector: PerformanceColl
ServerMessages

Displays the total number of messages in the information store (public and private). PATROL for Exchange Server provides a built-in report for this parameter

Collector: PerformanceColl
ServerMsgSize

Displays the space used by all of the messages in the information store (public and private). PATROL for Exchange Server provides a built-in report for this parameter

Collector: PerformanceColl
TrackLogFiles

Displays the message tracking log files. PATROL for Exchange Server provides a built-in report for this parameter.This parameter has a built-in recovery action (inactive by default) that purges the message tracking database log files when the TrackLogFiles parameter to go into an alarm state.

Collector: PerformanceColl
TrackLogSize

Displays the total size of all message tracking log files. This parameter has the following default recovery actions: alarm 1-displays a system output window that states that the log file size has exceeded threshold.

alarm 2-none

PATROL for Exchange Server provides a built-in report for this parameter.

Collector: PerformanceColl
MSEXCH_POP3_Server Application Class
AuthFailures

Displays the number of failed authentication attempts using a POP3 connection.

An unusually high number of authentication failures could indicate that someone is attempting unauthorized access to the server.

Collector: POP3Coll
Connections

Displays the number of POP3 client connections.

Collector: POP3Coll
FailedConnects

Displays the number of POP3 client connections that failed.

Collector: POP3Coll
PassFailures

Displays the number of pass commands that failed.

Collector: POP3Coll
POP3Coll

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the POP3 Server consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Queue_Protocols Application Class
TotalMessagesInAllQueues

Calculates the total number of messages in all the queues for all SMTP virtual server instances; checks to see if the number of messages is consistently greater than 1000. To be consistently greater than 1000, the count must be high for a period of 30 minutes or longer. Initiates a recovery action to increase the SMTP file handles in the registry so that a larger queue can be processed more quickly.
MSEXCH_Queues Application Class
IncreasingTime

Displays the amount of time that the message queue for the protocol has been increasing in length.

Collector: QueuesColl
Messages

Displays the number of messages in the protocol message queue.

Collector: QueuesColl
MsgSize

Displays the size of the protocol message queue.

Collector: QueuesColl
OldestMsgAge

Indicates the greatest length of time that any currently queued message has been in the MTA connection queue. This value varies widely with server workload and message size. Large messages often reside in the queue for a long time before being sent.

Collector: QueuesColl
QueueGrowth

Displays the number of unprocessed messages in the queue per minute.


QueuesColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Queues consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
State

Displays the status of the link queue

Collector: QueuesColl






Type

Displays the type of link queue.

Collector: QueuesColl








MSEXCH_Roundtrip_Client Application Class
ClientE2EProblemDetector

Detects and reports when network problems are preventing the client from updating status information.
CreateMsgTime

Displays the time required by the Exchange Server to respond to the client's request to create a new message.

Collector: MSEXCHRountrip program
DeleteMsgTime

Displays the time required by the server to respond to the client's request to delete a message.

Collector: MSEXCHRountrip program
LastMsgTime

Displays the time required by the last message to complete a round trip between the client and the host server.

Collector: MSEXCHRountrip program
LastNMsgTime

Displays the average time required by the message to complete a round trip between the client and the host server for the last N messages.

Collector: MSEXCHRountrip program
LogoffTime

Displays the time required by the client to log off of the Exchange Server.

Collector: MSEXCHRountrip program
LogonTime

Displays the time required by the client to log on to the Exchange Server.

Collector: MSEXCHRountrip program
MaxMsgTime

Displays the maximum time required by a message to complete the round trip between the client and the host server. The maximum time resets when the agent shuts down.

Collector: MSEXCHRountrip program
OpenMsgTime

Displays the time required by the Exchange Server to respond to the client's request to open a message. If OpenMsgTime is high or increasing, you may be experiencing network problems.

Collector: MSEXCHRountrip program
RoundtripStatus

Reports the status of the roundtrip client component and any application specific error.

Collector: MSEXCHRountrip program
SendMsgTime

Displays the time required by the server system attendant to receive a message sent by a client. If SendMsgTime is high or increasing, you may be experiencing network problems.

Collector: MSEXCHRountrip program
Status

Displays the status of the last message sent to the client.

Collector: MSEXCHRountrip program
MSEXCH_Roundtrip_Container Application Class
Status

Provides the status of the End to End program on the Exchange Server.

Collector: MSEXCHRountrip program
MSEXCH_Roundtrip_InetServer Application Class
LastMsgTime

the time required for the last message to complete a round-trip between this Exchange Server and the foreign mail server

Collector: internal executable that uses the SMTP protocol
LastNMsgTime

the average time required for the last N messages to complete a round-trip between this Exchange Server and the foreign mail server

The default N value is 10.

Collector: internal executable that uses the SMTP protocol
MaxMsgTime

the maximum time required for a message to complete a round-trip between this Exchange Server and the foreign mail server since the PATROL Agent was started

Collector: internal executable that uses the SMTP protocol
Status

the status of the last message sent to the foreign mail server

Collector: internal executable that uses the SMTP protocol
MSEXCH_Roundtrip_Server Application Class
LastMsgTime

Displays the time required for the last message to complete a round-trip between this server and the remote server.

Collector: MSEXCHRountrip program
LastNMsgTime

Displays the average time required for the last N messages to complete a round-trip between this server and the remote server. The default N value is 10. To change the N value for all current and future response-time sessions, select the menu command Configure Last N Messages from the MSEXCH_EndToEnd application.

Collector: MSEXCHRountrip program
MaxMsgTime

Displays the maximum time required for a message to complete a round-trip between this server and the remote server since the agent was started.

Collector: MSEXCHRountrip program
Status

Displays the status of the last message sent to the remote server.

Collector: MSEXCHRountrip program
MSEXCH_Sent_Mail Application Class
PercentOfTotalRecv

Displays the percentage of total mail traffic which represents mail received from this remote server.

Collector: MSEXCHSentMailColl
PercentOfTotalSent

Displays the percentage of total mail traffic which represents mail sent to this remote server.

Collector: MSEXCHSentMailColl
RecvBytes

Displays the total number of bytes received by this server from the remote server in the last polling cycle. RecvBytes measures message traffic between specific servers in your site. By monitoring the traffic patterns between servers, you can detect bottlenecks and spot potential problems. If message tracking is disabled, RecvBytes is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
RecvMsgs

Displays the total number of messages received by this server from the remote server in the last polling cycle. RecvMsgs is a measure of message traffic between specific servers in your site. By monitoring the traffic patterns between servers, you can detect bottlenecks and spot potential problems. If message tracking is disabled, RecvMsgs is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
SentBytes

Displays the total number of bytes sent to the remote server in the last polling cycle. SentBytes is a measure of message traffic between specific servers in your site. By monitoring the traffic patterns between servers, you can detect bottlenecks and spot potential problems. If message tracking is disabled, SentBytes is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
SentMsgs

Displays the number of messages sent to the remote server in the last polling cycle. SentMsgs is a measure of message traffic between specific servers in your site. By monitoring the traffic patterns between servers, you can detect bottlenecks and spot potential problems. If message tracking is disabled, SentMsgs is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
MSEXCH_Sent_Mail_Containers Application Class
MSEXCHSentMailColl

Collects data for the MSEXCH_Sent_Mail_Container, MSEXCH_Sent_Mail, and MSEXCH_MonitoredServers application classes.
PercentOfTotalRecv

Displays the percentage of total mail traffic which represents mail received by the local server.

Collector: MSEXCHSentMailColl
PercentOfTotalSent

Displays the percentage of total mail traffic which represents mail sent by the local server.

Collector: MSEXCHSentMailColl
TotalBytesReceived

Displays the total number of bytes received from all remote Exchange Servers in the site during the last polling cycle. If message tracking is disabled, MTABytesReceived is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
TotalBytesSent

Displays the total number of bytes that have been sent to all remote Exchange Servers in the site during the last polling cycle. If message tracking is disabled, MTABytesSent is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
TotalMsgReceived

Displays the total number of messages that have been received from all remote Exchange Servers in the site during the last polling cycle. If message tracking is disabled, MTAMsgReceived is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
TotalMsgSent

Displays the total number of messages that have been sent to all remote Exchange Servers in the site during the last polling cycle. If message tracking is disabled, MTAMsgSent is not available. PATROL obtains the data for this parameter from the Exchange Server tracking log.

Collector: MSEXCHSentMailColl
MSEXCH_Server Application Class
CheckConfiguration

Indicates whether PATROL for Exchange Server has been configured. If this parameter is an alarm state, you must configure PATROL for Exchange Server with a valid Exchange Server administrative account.
ServerColl

Gathers data for all of the server-related parameters for a discovered Exchange Server.
SystemRestartTrigger

Restarts all of the Exchange Server Windows NT services. By default, this parameter is inactive.
MSEXCH_Server_Health_Container Application Class
ActiveConnections

Displays the number of clients connected to the Exchange Server that have had no activity in the last 10 minutes. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: ServerHealthColl
ClientLicensePctMax

Displays the percentage of total client licenses currently in use. If you are using per seat licensing, this parameter is inactive.

Collector: ServerHealthColl
DiskStatusRpt

Describes the current status of all Exchange disk drives.
EventStatusColl

Gathers information on Exchange-related events and generates expert advice.
EvtLogErrorCount

Displays the number of Exchange error events logged during the collection cycle. This parameter is active only if the application class NT_EVENTLOG in the Windows NT OS or Windows 2000 OS KM is loaded.

Collector: ServerHealthColl
EvtLogWarningCount

Displays the number of Exchange warning events logged during the collection cycle. This parameter is active only if the application class NT_EVENTLOG in the Windows NT OS or Windows 2000 OS KM is loaded.

Collector: ServerHealthColl
MailFlowStatusRpt

Describes information pertaining to mail flow rates, as well as the current status of existing server Roundtrip and internet Roundtrip sessions.
NonDeliveryRpts

Displays the number of non-delivery reports (NDRs) that have occurred at the virtual server during the last collection cycle
QueueStatusRpt

Describes the status of all queues by virtual servers; alarms if any queue has a problem.
ServerCpuPct

Displays the percentage of total CPU used by Exchange Server processes. This parameter is active only if PATROL KM for Windows NT is loaded. PATROL for Exchange Server provides a built-in report for this parameter.

Collector: ServerHealthColl
ServerHealthColl

Gathers data for all of the server health-related parameters for a discovered Exchange Server.
ServerMemory

Displays the amount of memory used by Exchange Server processes. This parameter is active only if PATROL KM for Windows NT is loaded.

Tip: To improve memory use, try the following: increase the size of your pagefile or move the pagefile to a separate physical disk; move Exchange components to a different server; add RAM; restrict client mail usage.

Collector: ServerColl
ServerStatus

Indicates whether Exchange Server services have been started and whether clients can make connections. PATROL for Exchange Server provides a built-in report for this parameter.

By default, this parameter has a recovery action that restarts Exchange Server services that go down. You can also configure the recovery action to run a database integrity check before restarting the MTA and repair the MTA if it is corrupt.

Collector: ServerColl
MSEXCH_SMTP_Server Application Class
AvgRetriesIncomingMsgDelivery

Displays how many messages are going into retry as a fraction of the overall messages delivered.

Collector: SMTPColl
AvgRetriesOutgoingMsgDelivery

Displays how many messages are going into retry as a fraction of the overall messages delivered.

Collector: SMTPColl
CategorizerQueueLength

Displays the number of messages waiting for advanced address resolution.

Collector: SMTPColl
CurrentInboundConnections

Displays the total number of connections currently inbound.

Collector: SMTPColl
LocalQueueLength

Displays the number of messages in the local queue; this queue contains messages that are queued for local delivery on the server running Exchange to an Exchange mailbox.

Collector: SMTPColl
MsgBytesRcvPerSec

Displays the rate at which bytes are received by this SMTP server instance.

Collector: SMTPColl
MsgBytesSentPerSec

Displays the rate at which bytes are sent by this SMTP server instance.

Collector: SMTPColl
SMTPColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the SMTP Server consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Storage_Group Application Class
DbLogFiles

Displays the total number of database transaction log files for all of the storage groups on the server.This parameter contains a recovery action (inactive by default) that purges or backs up the information store database logs when the DbLogFiles parameter enters an alarm state.

Collector: StorageGroupColl
DbLogSize

Displays the total size of the database transaction log files for all of the storage groups on the server.

Collector: StorageGroupColl
StorageGroupColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Storage Group consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Storage_Group_Container Application Class
StorageGroupsColl

Collects data about the database and Information Store application classes.
MSEXCH_Store_Driver Application Class
LocalRetries

Displays the number of times a message intended for the local server was resent in the last collection cycle.

Collector: StoreDriverColl
MsgPctLocal

Displays the percentage of messages submitted to the information store driver that are delivered to the local server.

Collector: StoreDriverColl
MsgSubmitRate

Displays the rate that messages are submitted to the Store Driver.

Collector: StoreDriverColl
RcpPctLocal

Displays the percentage of recipients that are local.

Collector: StoreDriverColl
ReadBlocks

Displays the number of read blocks performed by the information store driver during the collection cycle.

This value correlates to user load on the information store.

Collector: StoreDriverColl
StoreDriverColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Store Driver consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
SubmitListItems

Displays the number of items in the Store Driver submit list.

Collector: StoreDriverColl
WriteBlocks

Displays the number of write blocks performed by the information store driver during the collection cycle.

Collector: StoreDriverColl
WriteConflicts

Displays the number of times that the store driver experienced a conflict when writing data to the disk.

Collector: StoreDriverColl
MSEXCH_Top_Folders Application Class
MsgCount

Displays the number of messages in the folder.

Collector: TopFoldersColl
MsgSize

Displays the total size of all messages in the folder. This parameter has the following default recovery actions:

alarm 1-displays a system output window noting that the public folder size exceeds the threshold.

alarm 2-none

Collector: TopFoldersColl
TopFoldersColl

Gathers message statistics for the top public folders based on message count or message size.
MSEXCH_Top_Mailboxes Application Class
MsgCount

Displays the number of messages in the mailbox.

Collector: TopMailboxesColl
MsgSize

Displays the total size of all messages in the mailbox. This parameter has the following default recovery actions:

alarm 1-sends an email to the user once per day that states mail usage exceeds desired amount

alarm 2-noneTop

Collector: TopMailboxesColl
TopMailboxesColl

Collects parameter data for the Top Mailboxes application class.
MSEXCH_Top_Receivers Application Class
AvgMsgsPerHour

Displays the average number of messages received per hour.

Collector: TopReceiversColl
MsgCount

Displays the number of messages received in the last polling cycle. The default polling cycle is 24 hours.

Collector: TopReceiversColl
MsgSize

Displays the total size of the messages received in the last polling cycle.The default polling cycle is 24 hours.

Collector: TopReceiversColl
TopReceiversColl

Displays the collector parameter that collects parameter data for the Top Receivers application class.
MSEXCH_Top_Senders Application Class
AvgMsgsPerHour

Displays the average number of messages sent per hour.

Collector: TopSendersColl
MsgCount

Displays the number of messages sent in the last polling cycle. The default polling cycle is 24 hours.

Collector: TopSendersColl
MsgSize

Displays the total size of the messages sent in the last polling cycle. The default polling cycle is 24 hours.

Collector: TopSendersColl
TopSendersColl

Collects parameter data for the Top Senders application class.
MSEXCH_VideoConf_Server Application Class
Conferences

Displays the number of video conferences in progress.

Collector: VideoConfColl
FailedJoinPct

Displays the percentage of users who tried to join a video conference and failed.

Collector: VideoConfColl
FailedUserJoins

Displays the number of times in the last collection cycle that a user tried to join a video conference and failed.

Collector: VideoConfColl
VideoConfColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Video Conference consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Virtual_Server_Health Application Class
ClientConnectState

Indicates whether clients can connect to the virtual server.


ClusterState

Displays the status of the Exchange cluster group that this node belongs to.








DiskStatusRpt

Describes information pertaining to disk utilization. Lists Exchange components on each drive.
MailFlowStatusRpt

Describes information pertaining to mail flow rates, as well as the current status of existing server Roundtrip and internet Roundtrip sessions.
NonDeliveryRpts

Displays the number of non-delivery reports (NDRs) that have occurred during the collection cycle.
QueueStatusRpt

Describes information pertaining to Exchange queue status.
VirtualServerHealthColl

Gathers data for all of the virtual server-related parameters for a discovered Exchange virtual server.
MSEXCH_Watched_Users Application Class
AssocContentCount

Displays the number of items in the associated contents table of the mailbox.

Associated contents include items such as notes and contacts.

Collector: WatchedUserColl
AttachmentSize

Displays the total size of the attachments in the user's mailbox.

Collector: WatchedUserColl
InetMsgRecvRate

Displays the number of internet mail messages received by the user.

Collector: WatchedUserColl
InetMsgSendRate

Displays the number of internet mail messages sent by the user.

Collector: WatchedUserColl
MsgCount

Displays the number of messages in the user's mailbox.

Collector: WatchedUserColl
MsgRecvRate

Displays the total number of messages received by the user in the last collection cycle.

Collector: WatchedUserColl
MsgSendRate

Displays the number of messages per hour that the user is sending.

Collector: WatchedUserColl
MsgSize

Displays the total size of the messages in the user's mailbox.

Collector: WatchedUserColl
QuotaLimit

Specifies if the watched user is over his or her assigned mail quotas.

Collector: WatchedUserColl


SuspectMsgCount

the number of messages that are delivered to a mailbox that PATROL uses to catch potential viruses

This parameter contains a recovery action (inactive by default) that automatically shuts down the MTA when a message is delivered to the bogus mailbox.

Collector: WatchedUserColl
MSEXCH_Watched_Users_Container Application Class
WatchedUsersColl

contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Watched User consumer parameters

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCH_Web_Connector Application Class
AttachmentBytes

Displays the total number of bytes of mail attachments that were processed by the Web Connector in the last polling cycle.

Collector: WebConnectorColl
Attachments

Displays the total number of mail attachments that were processed by the Web Connector in the last polling cycle.

Collector: WebConnectorColl
MessageBodies

Displays the total number of mail messages that were processed by the Web Connector in the last polling cycle.

Collector: WebConnectorColl
Objects

Displays the number of mail messages, attachments, and other mail related object that are currently being processed by the Web Connector.

Collector: WebConnectorColl
WebConnectorColl

Describes any errors that prevent the collector parameter from obtaining PerfMon data and populating the WebConnector consumer parameters. When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.
MSEXCHWeb_Mail Application Class
ApptSendRate

Displays the rate that clients set appointment via the Web.

Collector: WebMailColl
AuthCacheHitRate

Displays the rate that the Exchange 2000 Server Web Mail service authenticates clients from cache.

Collector: WebMailColl
AuthRate

Displays the rate that the Exchange 2000 Server Web Mail service authenticates clients.

Collector: WebMailColl
FormSendRate

Displays the rate that clients send forms.

Collector: WebMailColl
MsgSendRate

Displays the rate that clients send messages via web mail.

Collector: WebMailColl
WebMailColl

Contains a description of any errors that prevent the collector parameter from obtaining PerfMon data and populating the Web Mail consumer parameters.

When such errors occur, the text description of the problem is set as the parameter value and the parameter goes into an ALARM or WARNING state.

PATROL for Microsoft SMS 2.1.01 for Microsoft SMS 1.2


Table 19 PATROL for Microsoft SMS 2.1.01 (parameters that support Microsoft SMS 1.2)
Parameter



MSSMS_Events Application Class
EventAgeNew

Reports the amount of time since an event of the selected event type was reported in the SMS database.

Collector: SMSCollector
EventAgeOld

Reports the age of the oldest event of the selected event type reported in the SMS database.

Collector: SMSCollector
EventComponent

Provides a textual description of the event. The text describes the newest event of this type.

Collector: SMSCollector
EventCount

Reports the number of events of the current type that have been reported in the SMS database.

Collector: SMSCollector
EventOriginNew

Reports the host machine where the newest event of the selected type originated.

Collector: SMSCollector
EventSeverity

Reports the severity of the event type.

Collector: SMSCollector
SMSCollector

Gathers parameters for all of the unique events that are stored in the SMS database.
MSSMS_Files Application Class
AverageFileAge

Reports the average age of files in the directory matching the file name pattern mask.

Collector: SMSCollector
AverageFileSize

Reports the average size of files in the directory matching the file name pattern mask.

Collector: SMSCollector
FileAgeNew

Reports the amount of time since a file matching the file name pattern mask was added to the directory.

Collector: SMSCollector
FileAgeOld

Reports the age of the oldest file in the directory matching the file name pattern mask.

Collector: SMSCollector
FileCount

Reports the number of files in the directory that match the file name pattern mask.

Collector: SMSCollector
TotalDiskPct

Reports the percentage of total disk space used by files in the directory matching the file name pattern mask.

Collector: SMSCollector
SMSCollector

Gathers information about all default and user-selected files in SMS directories.
MSSMS_Jobs Application Class
AvgPkgDistTime

Reports the average time it has taken to distribute the software package to distribution servers. If this is a Remove package from server job, then the value of this parameter is zero.

Collector: SMSCollector
CancelStatus

Reports the status of a cancelled job.

Collector: SMSCollector
ClientCompletePct

Reports the percentage of client machines that are in a Completed state.

Collector: SMSCollector
ClientCount

Reports the number of clients that are affected by the job.

Collector: SMSCollector

ClientRetryPct

Reports the percentage of client machines that are in a Retrying state.

Collector: SMSCollector
JobRetryTime

Reports the time that the job has been in a retry state.

Collector: SMSCollector
JobStatus

Provides the overall status of each SMS job.

Collector: SMSCollector
PackageID

Reports the SMS package identifier for the software package associated with each job.

Collector: SMS Collector
SendStatus

Informs you of the sending status of the job.

Collector: SMS Collector
ServerCompletePct

Reports the percentage complete for the package distribution phase of the job.

Collector: SMSCollector
ServerCount

Reports the number of distribution servers that are affected by the job.

Collector: SMSCollector

ServerFailedPct

Reports the percentage of distribution servers that are in a Failed state.

Collector: SMSCollector
ServerRetryPct

Reports the percentage of distribution servers that are in a Retrying state.

Collector: SMSCollector
SMSCollector

Gathers all of the job information for a discovered SMS job.
SystemJob

Indicates that this particular job is a system job.

Collector: SMSCollector
UserJob

Indicates that this particular job is a user-defined job.

Collector: SMSCollector
WclName

Correlates the command line command with the target client workstation.

Collector: SMS Collector
WorkStatus

Indicates the jobs progress at all target sites.

Collector: SMSCollector
MSSMS_Primary_Servers Application Class
BadMifFiles

Reports the total number of MIF files that could not be processed by the SMS dataloader since the agent was started.

Collector: SMSCollector
CheckConfiguration

Reports the status of SMS KM configuration.


EventAgedCount

Reports the number of informational, warning, or error events in the SMS database that have a status of Aged.

Collector: SMSDailyCollector

EventErrorsNew

Reports the number of SMS errors that occurred within the last two hours in the SMS database.

Collector: SMSCollector
EventErrors

Reports the number of SMS errors found in the SMS database.

Collector: SMSCollector
EventWarnings

Reports the number of SMS warnings found in the SMS database.

Collector: SMSCollector
EventWarnNew

Reports the number of SMS warnings found in the SMS database that occurred within the last two hours.

Collector: SMSCollector
JobAgedCount

Reports the number of completed, cancelled, or failed SMS jobs in the SMS database that have a status of Aged.

Collector: SMSDailyCollector
JobsFailed

Reports the number of SMS jobs that are in a Failed state.

Collector: SMSCollector
JobsRetrying

Reports the number of SMS jobs that are in a Retrying state.

Collector: SMSCollector
MachinesInactive

Reports the number of client machines whose inventory status is Inactive.

Collector: SMSDailyCollector
MachinesTotal

Reports the number of client machines that have been inventoried at the SMS site.

Collector: SMSCollector
MachinesUnused

Reports the number of client machines whose inventory status is Unused.

Collector: SMSDailyCollector
MachinesUnusedPct

Reports the percentage of client machines whose inventory status is Unused.

Collector: SMSCollector
MifFilesNew

Reports the number of MIF files processed by the SMS dataloader during the specified polling cycle.

Collector: SMSCollector

MifFilesTotal

Reports the total number of MIF files that have been processed by the SMS dataloader since the PATROL Agent was started.

Collector: SMSCollector

MifProcessRate

Reports the rate at which MIF files are being processed by the SMS dataloader. This value is expressed as files per hour.

Collector: SMSCollector

ResyncFileSize

Reports the size of the SMS resync file RESYNC.CFG.

Collector: SMSDailyCollector
ServerCpuPct

Reports the CPU percentage used by the SMS server.

Collector: SMSCollector
ServerCpuPctPriv

Reports the percentage of privileged CPU used by the SMS server.

Collector: SMSCollector
ServerCpuPctUser

Reports the percentage of CPU user mode used by the SMS server.

Collector: SMSCollector
ServerMemory

Reports the size of memory in use by SMS Server processes.

Collector: SMSCollector
ServerStatus

Shows that either all services are started for the selected SMS server or that one or more services are stopped. This parameter only appears if you do not have the NT_SERVICES application class loaded. If NT_SERVICES is loaded, the ServerStatus parameter disappears.

Collector: SMSCollector


SMSCollector

Gathers information for all the non-age-related primary server-related parameters for a discovered SMS site.
SMSDailyCollector

Gathers information from age-related site server parameters that only needs to be gathered once per day.
SQLConnectDownTime

Alerts you to potential SQL server-related or network-related problems that are preventing the collection of SMS status information. If the SQL server has been unavailable longer than the time limit specified by the SQLConnectDownTime parameter, the parameter goes into alarm.

Collector: SMSCollector
SQLConnectStatus

Reports the status of the KM SQL server connection for the purpose of gathering application data.

Collector: SMSCollector
MSSMS_Site_Servers Application Class
ResyncFileSize

Reports the size of the SMS resync file RESYNC.CFG. This parameter is provided as an alternative method to detect an oversized resync file. This parameter does not require the DUMPSYNC command provided with the BackOffice Resource Kit II.



ServerCpuPct

Reports the percentage of total CPU resources used by all SMS server processes.

Collector: SMSCollector
ServerCpuPctPriv

Reports the percentage of total privileged mode CPU used by all SMS server processes.

Collector: SMSCollector
ServerCpuPctUser

Reports the percentage of total user mode CPU used by all SMS Server processes.

Collector: SMSCollector
ServerMemory

Reports the size of memory in use by SMS Server processes.

Collector: SMSCollector
ServiceStatus

Shows that either all services are started for the selected SMS server or that one or more services are stopped. This parameter only appears if you do not have the NT_SERVICES application class loaded. If NT_SERVICES is loaded, the ServerStatus parameter disappears.

Collector: SMSCollector

















PATROL for Microsoft SMS 2.1.01 for Microsoft SMS 2.0


Table 20 PATROL for Microsoft SMS 2.1.01 (parameters that support Microsoft SMS 2.0)
Parameter



MSSMS_Advertisements Application Class
AdvertisementsFailed

Displays the number of failed advertisements on the selected primary site and its secondary sites.

Collector: SMSCollector
CompletedPgms

Reports the number of clients reporting that the advertised program ran successfully.

Collector: SMSCollector
Expired

Indicates whether or not an advertisement is expired.

Collector: SMSCollector
FailedClientPct

Reports the percentage of clients that have experienced an error while attempting to receive the selected advertisement.

Collector: SMSCollector
FailedClients

Reports the percentage of clients that have experienced an error while attempting to receive the selected advertisement.

Collector: SMSCollector
FailedPgms

Reports the number of clients that have experienced an error while attempting to receive the selected advertisement.

Collector: SMSCollector
PackageID

Reports the SMS package ID of the underlying package that this advertisement promotes.

Collector: SMSCollector
ReceiveClients

Reports number of clients that received the advertisement.

Collector: SMSCollector
SMSCollector

Gathers consumer parameter information for the application class.
StartedPgms

Reports the number of clients that started running the advertised program.

Collector: SMSCollector
TargetClients

Reports the number of clients to which the advertisement was sent.

Collector: SMSCollector
MSSMS_Files Application Class
AverageFileAge

Reports the average age of files in the directory matching the file name pattern mask.

Collector: SMSCollector
AverageFileSize

Reports the average size of files in the directory matching the file name pattern mask.

Collector: SMSCollector
FileAgeNew

Reports the age of the newest file in the directory matching the file name pattern mask.

Collector: SMSCollector
FileAgeOld

Reports the age of the oldest file in the directory matching the file name pattern mask.

Collector: SMSCollector
FileCount

Reports the number of files in the directory that match the file name pattern mask.

Collector: SMSCollector
SMSCollector

Gathers consumer parameter information for the application class.
TotalBytes

Reports the total bytes used by files in the directory matching the file name pattern mask.

Collector: SMSCollector
TotalDiskPct

Reports the percentage of total disk space used by files in the directory matching the file name pattern mask.

Collector: SMSCollector
MSSMS_Packages Application Class
Failed

Reports the number of distribution points that failed to receive the package.

Collector: SMSCollector
FailedPct

Reports the percentage of distribution points that failed to receive the package.

Collector: SMSCollector
Installed

Reports the number of distribution points that have received the package.

Collector: SMSCollector
Retrying

Reports the number of distribution points that are retrying to receive the package.

Collector: SMSCollector
SMSCollector

Gathers consumer parameter information for the application class.
Targeted

Reports the number of distribution points this package was sent to.

Collector: SMSCollector
MSSMS_Queues Application Class
SMSCollector

Gathers consumer parameter information for the application class.
TotalObjectsDequeued

Displays the total number of objects removed from the queue by the source component since the source and destination components were restarted.

Collector: SMSCollector
TotalObjectsEnqueued

Displays the total number of objects added to the queue by the source component since the source and destination components were restarted.

Collector: SMSCollector
MSSMS_Secondary_Servers Application Class
DDRBadPct

Displays the percentage of bad discovery data records processed by Discovery Data Manager during its current session.
DDREnqueued

Displays the number of discovery data records waiting in Discovery Data Managers input queue the last time that Discovery Data Manager scanned the queue.


DDRProcessRate

Displays the number of discovery data records processed by Discovery Data Manager during its last minute.


DDRTotal

Displays the total number of Discovery Data Records processed by Discovery Data Manager during its current session.


ServerCpuPct

Displays the total number of Discovery Data Records processed by Discovery Data Manager during its current session.


ServerCpuPctPriv

Reports the percentage of total privileged mode CPU used by all SMS server processes.

Collector: SMSCollector
ServerCpuPctUser

Reports the percentage of total user mode CPU used by all SMS Server processes.

Collector: SMSCollector
ServerMemory

Reports the size of memory in use by SMS secondary server processes.

Collector: SMSCollector
ServerStatus

Reports the status level for the selected SMS server.

The status levels are:

1 - all services are started

2 - one or more services are stopped

Note: This parameter only appears if you do not have the NT_SERVICES application class loaded. If NT_SERVICES is loaded, the ServerStatus parameter disappears.

Collector: SMSCollector
SMSCollector

Gathers consumer parameter information for the application class.
MSSMS_Senders Application Class
AttemptedBytes

Displays the total number of bytes the sender has attempted to send since beginning execution.

Collector: SMSCollector
AverageRate

Displays the average rate of throughput of the sender.

Collector: SMSCollector
FailedPct

Displays the percentage of bytes failing sending since beginning execution.

Collector: SMSCollector
SendingPct

Displays the percentage of bytes all sending threads attempted to send.

Collector: SMSCollector
SentPct

Displays the percentage of bytes sent.

Collector: SMSCollector
SMSCollector

Gathers consumer parameter information for the application class.
ThreadCount

Displays the number of threads currently sending to a destination.

Collector: SMSCollector
MSSMS_Servers Application Class
AdvertisementsFailed

Displays the number of failed advertisements on the selected primary site and its secondary sites.

Collector: SMSCollector
AdvertisementsTotal

Displays the total number of advertisements.

Collector: SMSCollector
DDRBadPct

Displays the percentage of bad discovery data records processed by Discovery Data Manager during its current session.

Collector: SMSCollector
DDREnqueued

Displays the number of discovery data records waiting in Discovery Data Managers input queue the last time that Discovery Data Manager scanned the queue.


DDRProcessRate

Displays the number of discovery data records processed by Discovery Data Manager during its last minute.


DDRTotal

Displays the total number of Discovery Data Records processed by Discovery Data Manager during its current session.


ErrorsNew

Displays the number of error messages occurring within the specified period.
ErrorsTotal

Displays the total number of error messages.

Collector: SMSCollector
InfosTotal

Displays the total number of informational messages.

Collector: SMSCollector
MIFBadPct

Displays the percent of bad inventory records processed by Inventory Data Loader during its current session.

Collector: SMSCollector
MIFEnqueueda

Displays the number of inventory records waiting in the Inventory Data Loaders input queue at the last time Inventory Data Loader scanned the queue.

Collector: SMSCollector
MIFProcessRate

Displays the number of inventory records processed by Inventory Data Loader during its last minute.

Collector: SMSCollector
MIFTotal

Displays the number of inventory records processed by the Inventory Data Loader during its current session.

Collector: SMSCollector
MachinesTotal

Displays the total number of client machines.

Collector: SMSCollector
PackagesFailed

Displays the number of failed packages.

Collector: SMSCollector
ProgramsFailed

Displays the number of failed programs.

Collector: SMSCollector
ServerCpuPct

Reports the percentage of total CPU resources used by all SMS server processes.

Collector: SMSCollector
ServerCpuPctPriv

Reports the percentage of total privileged mode CPU used by all SMS server processes.

Collector: SMSCollector
ServerCpuPctUser

Reports the percentage of total user mode CPU used by all SMS Server processes.

Collector: SMSCollector
ServerMemory

Reports the size of memory in use by SMS Server processes.

Collector: SMSCollector
ServerStatus

Reports the status for the selected SMS server. The status levels are:

1 - all services are started

2 - one or more services are stopped

Note: This parameter only appears if you do not have the NT_SERVICES application class loaded. If NT_SERVICES is loaded, the ServerStatus parameter disappears.

Collector: SMSCollector
SINVBadPct

Displays the percentage of bad software inventory records processed by Software Inventory Processor during its current session.

Collector: SMSCollector
SINVEnqueued

Displays the number of software inventory records waiting in the Software Inventory Processors input queue at the last time the Software Inventory Processor scanned the queue.

Collector: SMSCollector
SINVProcessRate

Displays the number of software inventory records processed by Software Inventory Processor during its last minute.

Collector: SMSCollector


SINVTotal

Displays the number of software inventory records processed by Software Inventory Processor during its current session.

Collector: SMSCollector
SMSCollector

Gathers all of the consumer parameter information for the application class.
WarningsNew

Displays the number of warning messages occurring within the specified period.

Collector: SMSCollector
WarningsTotal

Displays the total number of warning messages.

Collector: SMSCollector
MSSMS_Status_Msgs Application Class
CorruptFiles

Displays the number of corrupt software inventory (.SVF) files received by the SMS_STATUS_MANAGER via the Status Manager inbox since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector
LoggedEventsNew

Displays the number of status messages reported by SMS_STATUS_MANAGER to the Windows NT Application Event during the specified interval for new events.

Collector: SMSCollector
LoggedEventsTotal

Displays the number of status messages reported by SMS_STATUS_MANAGER to the Windows NT Application Event Log on the site since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector
ProcessRate

Displays the number of status messages processed by the SMS_STATUS_MANAGER per second.

Collector: SMSCollector
RecvMsgsNew

Displays the number of status messages received by SMS_STATUS_MANAGER during the defined interval.

Collector: SMSCollector
RecvMsgsTotal

Displays the total number of status messages received by SMS_STATUS_MANAGER since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector
ReplHighPriority

Displays the number of status messages replicated at high priority by SMS_STATUS_MANAGER to the parent site since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector
ReplLowPriority

Displays the number of status messages replicated at low priority by SMS_STATUS_MANAGER to the parent site since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector
ReplNormalPriority

Displays the number of status messages replicated at normal priority by SMS_STATUS_MANAGER to the parent site since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector
SMSCollector

Gathers all of the consumer parameter information for the application class.
WrittenToDb

Displays the number of status messages written by the SMS_STATUS_MANAGER to the SMS database since SMS_STATUS_MANAGER was last started.

Collector: SMSCollector

















PATROL for Microsoft Host Integration Server 1.2.03


Table 21 PATROL for Microsoft Host Integration Server 1.2.03
Parameter



MSSNA_Adapters Application Class
AdapterColl

Gathers data from all parameters in an MSSNA_Adapter application class instance.
ConnectFailRate

Reports the rate of failed connection attempts.

Collector: AdapterColl
ConnectFailures

Reports the number of adapter connection failures that occurred during the polling cycle.

Collector: AdapterColl
DataProcessRate

Reports the rate at which data is processed by the SNA Server.

Collector: AdapterColl
DataRecvRate

Reports the rate at which the SNA Server receives data.

Collector: AdapterColl
DataXmitRate

Reports the rate at which the SNA Server transmits data.

Collector: AdapterColl
Failures

Reports the number of adapter failures that occurred during the polling cycle.

Collector: AdapterColl
FrameProcessRate

Reports the rate at which the SNA Server processes frames.

Collector: AdapterColl
FrameRecvRate

Reports the rate at which the SNA Server receives frames.

Collector: AdapterColl
FrameXmitRate

Reports the rate at which the SNA Server transmits frames.

Collector: AdapterColl
MSSNA_Connections Application Class
ActiveSessions

Reports the number of sessions currently active on the specified connection.

Collector: ConnectionColl
ConnectionColl

Gathers data from all parameters in an MSSNA_Connections application class instance.
DataProcessRate

Reports the rate at which data is processed for the current connection.

Collector: ConnectionColl
DataRecvRate

Reports the rate at which data is received for the current connection.

Collector: ConnectionColl
DataXmitRate

Reports the rate at which data is transmitted for the current connection.

Collector: ConnectionColl
Status

Reports the status of the current SNA connection.

Collector: ConnectionColl
MSSNA_LU_Sessions Application Class
DataProcessRate

Reports the rate at which data is processed by the specified LU Session.

Collector: CollecSessColl
DataRecvRate

Reports the rate at which data is received by the specified LU Session.

Collector: CollecSessColl
DataXmitRate

Reports the rate at which data is transmitted by the specified LU Session.

Collector: CollecSessColl
LUSessColl

Gathers data from all parameters in an MSSNA_LU_Sessions application class instance.
MSSNA_Servers Application Class
ActiveConnections

Reports the number of SNA Server client connections with activity during the polling cycle.

Collector: ServerColl
ConfigFileUpdate

Reports whether the SNA configuration file was updated during the polling cycle.

Collector: ServerColl
InactiveConnections

Reports the number of client connections with the SNA Server that had no activity during the polling cycle.

Collector: ServerColl
ServerColl

Gathers data from all parameters in an MSSNA_Servers application class instance.
ServerCpuPct

Reports the CPU usage by all SNA Server processes as a percentage of the total CPU usage.

Collector: ServerColl
ServerCpuPctPriv

Reports the privileged CPU usage by SNA Server processes as a percentage of the total CPU usage.

Collector: ServerColl
ServerCpuPctUser

Reports the percentage of total user mode CPU usage by all SNA Server processes.

Collector: ServerColl
ServerMemory

Reports the amount of memory that is being used by SNA Server processes.

Collector: ServerColl
MSSNA_TN3270 Application Class
ConnectsActive

Reports on the number of active connections to the TN3270 service.

Collector: TN3270ServerColl
RUInbound

Reports the number of Request/Response Units (RUs) sent to the IBM host.

Collector: TN3270ServerColl
RUOutbound

Reports the number of Request/Response Units (RUs) received from the IBM host.

Collector: TN3270ServerColl
SessionsActive

Reports the number of active sessions in the TN3270 Service.

Collector: TN3270ServerColl
SessionsFailed

Reports the number of sessions that failed during the polling period.

Collector: TN3270ServerColl
SessionsPctFailed

Reports the percentage of active sessions that failed during the polling cycle.

Collector: TN3270ServerColl
TN3270ServerColl

Gathers data from all parameters in an MSSNA_TN3270 Server application class instance.
TcpProcessRatel

Reports on the rate at which TCP data is processed.

Collector: TN3270ServerColl
TcpRecvRate

Reports on the rate at which TCP data bytes are received.

Collector: TN3270ServerColl
TcpSendRate

Reports the rate at which TCP databytes are sent.

Collector: TN3270ServerColl
UsersActive

Reports the number of active users in the TN3270 Service.

Collector: TN3270ServerColl








































PATROL for Microsoft SQL Server 4.1.20


Table 22 PATROL for Microsoft SQL Server 4.1.20
Parameter



Availability Application Class
ARATest

Allows testing of automated recovery actions without causing false alarms on parameters being monitored. You can set automated recovery actions through the KM Admin => Setup/Configure KM => ARA Settings menu command. You can test that setting through the ARA Settings => ARA Test menu command.
BlockerProcs

Provides information about processes that are holding locks and blocking other processes longer than the time period set by using the Configure Auto User Monitoring menu command (120 seconds by default). This parameter does not monitor logons that you excluded by using the KM Admin => User Monitoring Admin => Exclude Specific User menu command.

Collector: MonProbUsers
ErrorLogUpdates

Monitors the SQL Server error log for updates. This parameter goes into an alarm state if the updated error log text contains one of the following strings: Error, Msg, or WARNING, or any strings you enter using the KM Admin => SQL Server Error Log Filter menu command.

Reset the alarm by acknowledging it with the PEM or by using the KM Admin => Reset Parameter Alarm => ErrorLogUpdates menu command.

Collector: ErrorLogColl
Failover

Appears only when the instance is running on a virtual PATROL Agent in a cluster.

Creates an annotation that contains information about a failover whenever a failover occurs. The alarm for this parameter is disabled by default. You can enable the alarm by using the Monitoring Setup menu command.

If a failover is detected, the value is set to 1 if the alarm is disabled and to 2 if the alarm is enabled.

Collector: MSSQL_SERVER discovery
NumBlockedProcesses

Monitors the number of processes that are currently blocked.

Collector: ProcessColl
SQLAgentJobFailures

Monitors the completion status of the jobs that the SQL Server Agent (SQL Executive in 6.5) runs. These jobs usually include scheduled backup and maintenance procedures.

You can clear the alarm by using the Reset Parameter Alarm menu command.
SQLAgentStatus

Monitors the up and down status of the SQL Server Agent (SQL Executive in 6.5), if SQL Server Agent monitoring is enabled. It is disabled by default. You can switch SQL Server Agent monitoring on and off by using the KM Admin => Setup/Configure KM => SQL Server Agent/DTC Setup menu command.
SQLServerStatus

Tracks the status of the SQL Server. If parameter history collection is enabled, statistics on the availability of the SQL Server are collected over long periods. If SQL Server goes off line, and it was not shut down from within PATROL, SQLServerStatus goes into an alarm state.

Collector: MSSQL_SERVER discovery
SuspectDatabases

Determines which databases, if any, are marked as suspect (corrupt) by the SQL Server. This parameter only monitors databases that are setup for monitoring. However, when it goes into an alarm state, this parameter generates a report that lists all suspect databases, including those that are not monitored.
Cache Application Class
AvgFreePageScan

Microsoft SQL Server 6.5 only.

Displays the average number of data cache buffers scanned by LazyWriter scans while searching for an unused buffer to replenish the free buffer pool.

Collector: SQLServerColl
MaxFreePageScan

Microsoft SQL Server 6.5 only.

Displays the maximum number of data cache buffers scanned by LazyWriter while searching for unused buffers to replenish the free buffer pool.

Collector: SQLServerColl
NumberOfFreeBuffers

Displays the number of cache buffers that are in the free buffer pool.

Collector: SQLServerColl
PgsFetchedIntoCachePerSec

Microsoft SQL Server 6.5 only.

Displays the number of 2 KB pages that the Read Ahead Manager prefetches into cache.

Collector: SQLServerColl
PgsFoundInCachePerSec

Microsoft SQL Server 6.5 only.

Displays the number of 2 KB pages that the Read Ahead Manager finds in cache.

Collector: SQLServerColl
ReadAheadEffectiveness

Microsoft SQL Server 6.5 only.

Displays the percentage of pages that are found in cache. If this value is less than 50 percent, then pages are read from the disk more than half of the time (read ahead is not effective).

Collector: SQLServerColl
SlotsUsed

Microsoft SQL Server 6.5 only.

Displays the number of total slots that are used. The number of used slots indicates the number of queries that are using Read Ahead at any given time.

Collector: SQLServerColl
Capacity Application Class
ConnectionsRemaining

Monitors the number of user connections available for use on the SQL Server and goes into an alarm state when the number falls below the alarm thresholds.

This parameter uses the MASTER .. SYSCURCONFIGS table to determine the maximum number of user connections that are allowed and the SQL Server General Statistics counter, User Connections, to calculate the number of connections remaining.

Collector: CurConfigsColl
ErrorLogSize

Monitors the size of the SQL Server error log in kilobytes.

Collector: ErrorLogColl
IdleProcs

Provides information about processes that are idle longer than the amount of time set by using the Configure Auto User Monitoring menu command (20 minutes by default). This parameter does not monitor processes that you excluded from monitoring by using the KM Admin => User Monitoring Admin => Exclude Specific User menu command.

Collector: MonProbUsers
LocksRemaining

Monitors the number of locks that are available for use, as defined in the MASTER .. SYSCURCONFIGS table.

Collector: CurConfigsColl
NumProcesses

Tracks the number of SQL Server processes. This value is derived from the total number of rows in the MASTER .. SYSPROCESSES table.

Collector: ProcessColl
OpenDbRemaining

Microsoft SQL Server 6.5 only.

Compares the number of databases that are accessed by users and processes against the configuration limit for open databases, and reports the number of open databases that are remaining. The limit on the number of databases is defined in the MASTER .. SYSCURCONFIGS table. PATROL requires one open database slot for monitoring.

Collector: CurConfigsColl
UserConnections

Displays the number of user connections.

Collector: SQLServerColl
Collectors Application Class
CheckConfiguration

Ensures that the PATROL Agent default account exists and that it has SQL Server administrator privileges; installs the sp_patrol_ monitor and sp_patrol_user stored procedures in the SQL Server master database; ensures that the SQL Server performance counters are available to PATROL; gathers data on the availability of the global channel; and, upon a global channel failure, attempts to reconnect to the global channel.

Other parameters check the status of this parameter before executing, and parameters collecting data report any global channel lock timeouts to this parameter.
CurConfigsColl

Gathers information from the SQL Server MASTER .. SYSCURCONFIGS table pertaining to SQL Server configuration.
DbSpaceColl

Collects information on space used and space free for databases (SQL Server 6.5 and later) and for files and file groups (SQL Server 7.0 and later). It uses sp_spaceused to calculate the space available, based on the settings for the database; for example, maxsize or current size plus x percent. For more information, see the online Help.

Warning: This parameter does not function correctly when the db file is mapped to a shared drive by using a universal naming convention (UNC) format.
DbStructureColl

Collects information about monitored databases. Creates and destroys database instances (SQL Server 6.5 and later) and file and file group instances (SQL Server 7.0 and later).

Note: This parameter does not discover or monitor databases with names that contain characters other than AZ, az, 09, and underscore (_).
ErrorLogColl

Monitors the SQL Server error log for updates, and then filters new log entries for search strings that you entered by using the KM Admin => SQL Server Error Log Filter menu command. Error, Msg, and WARNING are the default search strings.

GlobalVarsColl

Collects various SQL Server statistics using SQL Server global variables (for example, @@CPU_BUSY), then calculates the change in the value of these global variables between poll cycles. For more details, see the online Help.

LocksColl

Collects information about all the locks that are within SQL Server.

This collector uses the SQL Server Locks performance counters to calculate the wait times and number of requests for locks by database, table, extent, page, row I.D., or key for instances of SQL Server 7.0 or higher. For SQL Server 6.5, this collector uses the SQL Server 6.5 performance counters to calculate the number of locks for extents, pages, and tables, and the total number of locks for all objects.
LogSpaceColl

Collects information about the amount of log space used by the databases that PATROL for Microsoft SQL Server is monitoring. This parameter makes calculations based on DBCC SQLPERF (LOGSPACE) and takes into account the autogrow settings. For more details, see the online Help.
LongRunningTransColl

Monitors the oldest open transaction. Long-running transactions are those transactions that are open for longer than one poll cycle of this parameter (the default poll cycle is 10 minutes). System Administrator or Database Administrator privileges are required for proper execution of this parameter.
MonProbUsers

Collects information about processes that are blocking other processes (blocker processes) and processes that are idle. To determine the amount of time configured for blocker or idle processes, see KM Admin => User Monitoring Admin. This parameter does not monitor logins that you excluded from monitoring by using the KM Admin => User Monitoring Admin => Exclude Specific User menu command.

ObjectSizeColl

Collects information about and monitors the size of database objects, and creates and destroys the Objects application instances.

ProcedureCacheColl

Collects information about the SQL Server procedure cache. To calculate the values for the procedure cache consumer parameters, this parameter uses the SQL Server - Procedure Cache performance object for SQL Server 6.5 and the SQL Server DBCC PROCCACHE command for SQL Server 7.0 and 2000.
ProcessColl

Collects information about the status and number of processes that are running on the SQL Server.
ReplicationColl

Collects information about transactions that are delivered from the transaction log of the publication database to the distribution database and transactions that are delivered from the distribution database to the destination database; gathers information about the servers that subscribe to published articles; and it creates and destroys the Published and Subscribers application instances.
ResponseColl

Measures the amount of time it takes to connect to the SQL Server, execute a simple query, and return a response by executing and then monitoring the progress of a sample SQL statement. For more information, see the online Help.
SQLServerColl

Collects statistics about SQL Server performance.
UserDefinedCountersColl

Collects information from SQL Server User Defined Counters for SQL Server 6.5 and from User Settable object for SQL Server 7.0 and later.
Database Application Class
DatabaseSpaceUsedMB

Displays (in megabytes) the amount of used space (the size of the database device or files minus the unallocated space within the database).

Collector: DbSpaceColl
DatabaseSpaceUsedPct

Monitors the percentage of available space that is used (the space used divided by the sum of the database size, plus any free disk space for autogrow files or the maxsize set).

Note: The values for this parameter do not match the values provided by the Microsoft SQL Server Enterprise Manager because the KM takes into account autogrow settings and free disk space.

For SQL Server 6.5, the percentage of space that is used by the log segment is included if the log segment does not have its own device.

Collector: DbSpaceColl
LogSpaceUsedMB

Displays (in megabytes) the amount of the transaction log space that is used.

Collector: LogSpaceColl
LogSpaceUsedPct

Displays the percentage of the transaction log that is used. For SQL Server 6.5, the transaction log must exist on its own device for this parameter to operate.

Note: The values for this parameter do not match the values that are provided by the Microsoft SQL Server Enterprise Manager because the KM takes into account autogrow settings and free disk space.

Collector: LogSpaceColl
LongRunningTrans

Displays information about the oldest long running transaction. Long running transactions are transactions that are open for longer than one poll of the LongRunningTransColl standard collector parameter.

Collector: LongRunningTransColl
Disk Application Class
BatchAverageSize

Microsoft SQL Server 6.5 only.

Displays the average number of 2 KB pages that are written to disk during a batch I/O operation.

Collector: SQLServerColl
BatchMaxSize

Microsoft SQL Server 6.5 only.

Displays the maximum number of 2 KB pages that are written to disk during a batch I/O operation.

Collector: SQLServerColl
BatchWritesPerSec

Microsoft SQL Server 6.5 only.

Displays the number of 2 KB pages that are written to disk per second using batch I/O.

Collector: SQLServerColl
DiskIoErrors

Monitors the number of disk errors that SQL Server encounters while reading and writing to disk. This value represents the number of errors that occurred between polls of the @@TOTAL_ERRORS global variable.

Collector: GlobalVarsColl
DiskIoReads

Monitors the number of disk reads that SQL Server performs between polls of the @@TOTAL_READ global variable.

Collector: GlobalVarsColl
DiskIoWrites

Monitors the number of disk writes the SQL Server performs between polls of the @@ TOTAL_WRITE global variable.

Collector: GlobalVarsColl
LazyWritesPerSec

Displays the number of pages that LazyWriter flushes to disk per second. For SQL Server 6.5, the size of a page is 2 KB; for SQL Server 7.0, the size of a page is 8 KB.

Collector: SQLServerColl
LogWritesPerSec

Microsoft SQL Server 6.5 only.

Displays the number of log pages that are physically written to disk per second.

Collector: SQLServerColl
OutstandingReads

Displays the number of physical reads that are pending.

Collector: SQLServerColl
OutstandingWrites

Displays the number of physical writes that are pending.

Collector: SQLServerColl
PhysicalReadsPerSec

Microsoft SQL Server 6.5 only.

Displays the number of physical reads (each consisting of eight 2 KB pages) that Read Ahead Manager issues per second. This number indicates how busy read ahead is in terms of actual physical I/O.

Collector: SQLServerColl
SinglePageWritesPerSec

Microsoft SQL Server 6.5 only.

Displays the number of single page writes that logging and cache flushes perform per second.

Collector: SQLServerColl
TransPerLogRecord

Microsoft SQL Server 6.5 only.

Displays the number of transactions that were packed into a log record before the log record was written to disk.

Collector: SQLServerColl
File Application Class
FileSizeMB

Microsoft SQL Server 7.0 and later only.

Displays (in megabytes) the size of the database file. This value is obtained from the sysfiles table.

Collector: DbSpaceColl
SpaceUsedMB

Microsoft SQL Server 7.0 and later only.

Displays (in megabytes) the amount of file space that is used by the database file.

Collector: DbSpaceColl
SpaceUsedPCT

Microsoft SQL Server 7.0 and later only.

Displays the percentage of the database file that is full. When this value is calculated, account autogrow settings and free disk space are taken into account.

Collector: DbSpaceColl
Filegroup Application Class
SpaceUsedMB

Microsoft SQL Server 7.0 and later only.

Displays (in megabytes) the amount of the file group space that is used.

Collector: DbSpaceColl
SpaceUsedPCT

Microsoft SQL Server 7.0 and later only.

Displays the percentage of the database file group that is full. When this value is calculated, autogrow settings and free disk space are taken into account.

Collector: DbSpaceColl
Locks Application Class
DatabaseLockAvgWaitTime

Microsoft SQL Server 7.0 and later only.

Displays (in milliseconds) the average amount of wait time caused by database lock requests. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Average Wait Time (msec) performance counters for the database instance.

Collector: LocksColl
DatabaseLockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of new database locks and lock conversions that lock manager requested per second. To calculate this value, PATROL uses the Lock Requests/sec performance counter for the database instance.

Collector: LocksColl
DatabaseLockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of database lock requests that required a caller to wait. To calculate this value, PATROL uses the Lock Requests/sec and Lock Waits/sec performance counters for the database instance.

Collector: LocksColl
ExtentLockAvgWaitTime

Microsoft SQL Server 7.0 and later only.

Displays (in milliseconds) the average amount of wait time that was caused by extent lock requests. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Average Wait Time (msec) performance counters for the extent instance.

Collector: LocksColl
ExtentLockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of new extent locks and lock conversions that the lock manager requested per second. To calculate this value, PATROL uses the SQL Server Lock Requests/sec performance counter for the extent instance.

Collector: LocksColl
ExtentLockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of new extent lock requests per second that required a caller to wait. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Lock Requests/sec performance counters for the extent instance.

Collector: LocksColl
ExtentLocksExclusive

Microsoft SQL Server 6.5 only.

Displays the number of extent locks that are exclusive. To calculate this value, PATROL uses the SQL Server Extent Locks - Exclusive performance counter for the extent instance.

Collector: LocksColl
ExtentLocksNext

Microsoft SQL Server 6.5 only.

Displays the number of next extent locks. To calculate this value, PATROL uses the SQL Server 6.5 Extent Locks - Next performance counter for the extent instance.

Collector: LocksColl
ExtentLocksPrevious

Microsoft SQL Server 6.5 only.

Displays the number of previous extent locks. To calculate this value, PATROL uses the SQL Server 6.5 Extent Locks - Next performance counter for the extent instance.

Collector: LocksColl
ExtentLocksShared

Microsoft SQL Server 6.5 only.

Displays the number of extent locks that are shared. To calculate this value, PATROL uses the SQL Server 6.5 Extent Locks - Shared performance counter for the extent instance.

Collector: LocksColl
ExtentLocksTotal

Microsoft SQL Server 6.5 only.

Displays the number of all extent locks. To calculate this value, PATROL uses the SQL Server 6.5 Extent Locks - Total performance counter for the extent instance.

Collector: LocksColl
ExtentLocksUpdate

Microsoft SQL Server 6.5 only.

Displays the number of update extent locks. To calculate this value, PATROL uses the SQL Server 6.5 Extent Locks - Update performance counter for the extent instance.

Collector: LocksColl
IntentLocksExclusive

Microsoft SQL Server 6.5 only.

Displays the number of intent locks that are exclusive. To calculate this value, PATROL uses the SQL Server 6.5 Intent Locks - Exclusive performance counter.

Collector: LocksColl
IntentLocksShared

Microsoft SQL Server 6.5 only.

Displays the number of intent locks that are shared. To calculate this value, PATROL uses the SQL Server 6.5 Intent Locks - Shared performance counter.

Collector: LocksColl
IntentLocksTotal

Microsoft SQL Server 6.5 only.

Displays the total number of intent locks. To calculate this value, PATROL uses the SQL Server 6.5 Intent Locks - Total performance counter.

Collector: LocksColl
KeyLockAvgWaitTime

Microsoft SQL Server 7.0 and later only.

Displays (in milliseconds) the average amount of wait time that was caused by key lock requests. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Average Wait Time (msec) performance counters for the key instance.

Collector: LocksColl
KeyLockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of new key locks and lock conversions that the lock manager requested per second. To calculate this value, PATROL uses the SQL Server Lock Requests/sec performance counter for the key instance.

Collector: LocksColl
KeyLockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of key lock requests that required a caller to wait. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Lock Requests/sec performance counters for the key instance.

Collector: LocksColl
LockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of all locks and lock conversions that the lock manager requested per second. To calculate this value, PATROL uses the SQL Server Lock Requests/sec performance counter.

Collector: LocksColl
LockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of all lock requests that required a caller to wait. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Lock Requests/sec performance counters.

Collector: LocksColl
PageLockAvgWaitTime

Microsoft SQL Server 7.0 and later only.

Displays (in milliseconds) the average amount of wait time that was caused by page lock requests. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Average Wait Time (msec) performance counters for the page instance.

Collector: LocksColl
PageLockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of new page locks and lock conversions that the lock manager requested per second. To calculate this value, PATROL uses the SQL Server Lock Requests/sec performance counter for the page instance.

Collector: LocksColl
PageLockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of page lock requests that required a caller to wait. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Lock Requests/sec performance counters for the page instance.

Collector: LocksColl
PageLocksExclusive

Microsoft SQL Server 6.5 only.

Displays the number of page locks that are exclusive. To calculate this value, PATROL uses the SQL Server 6.5 Page Locks - Exclusive performance counter.

Collector: LocksColl
PageLocksShared

Microsoft SQL Server 6.5 only.

Displays the number of page locks that are shared. To calculate this value, PATROL uses the SQL Server 6.5 Page Locks - Shared performance counter.

Collector: LocksColl
PageLocksTotal

Microsoft SQL Server 6.5 only.

Displays the total number of page locks. To calculate this value, PATROL uses the SQL Server 6.5 Page Locks - Total performance counter.

Collector: LocksColl
PageLocksUpdate

Microsoft SQL Server 6.5 only.

Displays the number of update page locks. To calculate this value, PATROL uses the SQL Server 6.5 Page Locks - Update performance counter.

Collector: LocksColl
RIDLockAvgWaitTime

Microsoft SQL Server 7.0 and later only.

Displays (in milliseconds) the average amount of wait time that was caused by row ID lock requests. To calculate this value, PATROL uses the SQL Server Locks Waits/sec and Average Wait Time (msec) performance counters.

Collector: LocksColl
RIDLockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of new row ID locks and lock conversions that the lock manager requested per second. To calculate this value, PATROL uses the SQL Server Locks Requests/sec performance counter.

Collector: LocksColl
RIDLockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of row ID lock requests that required a caller to wait. To calculate this value, PATROL uses the SQL Server Locks Waits/sec and Lock Requests/sec performance counters.

Collector: LocksColl
TableLockAvgWaitTime

Microsoft SQL Server 7.0 and later only.

Displays (in milliseconds) the average amount of wait time that was caused by table lock requests. To calculate this value, PATROL uses the SQL Server Locks Waits/sec and Average Wait Time (msec) performance counters.

Collector: LocksColl
TableLockRequestsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of new table locks and lock conversions that the lock manager requested per second. To calculate this value, PATROL uses the SQL Server Lock Requests/sec performance counter.

Collector: LocksColl
TableLockRequestWaitPercent

Microsoft SQL Server 7.0 and later only.

Displays the percentage of table lock requests that required a caller to wait. To calculate this value, PATROL uses the SQL Server Lock Waits/sec and Lock Requests/secperformance counters.

Collector: LocksColl
TableLocksExclusive

Microsoft SQL Server 6.5 only.

Displays the number of table locks that are exclusive. To calculate this value, PATROL uses the SQL Server 6.5 Table Locks - Exclusive performance counter.

Collector: LocksColl
TableLocksShared

Microsoft SQL Server 6.5 only.

Displays the number of table locks that are shared. To calculate this value, PATROL uses the SQL Server 6.5 Table Locks - Shared performance counter.

Collector: LocksColl
TableLocksTotal

Microsoft SQL Server 6.5 only.

Displays the total number of table locks. To calculate this value, PATROL uses the SQL Server 6.5 Table Locks - Total performance counter.

Collector: LocksColl
TotalBlockingLocks

Microsoft SQL Server 6.5 only.

Displays the total number of locks that are blocking other processes. To calculate the value of this parameter, PATROL uses the SQL Server 6.5 Total Blocking Locks performance counter.

Collector: LocksColl
TotalExclusiveLocks

Microsoft SQL Server 6.5 only.

Displays the total number of locks that are all exclusive. To calculate the value of this parameter, PATROL uses the SQL Server 6.5 Total Exclusive Locks performance counter.

Collector: LocksColl
TotalLocks

Microsoft SQL Server 6.5 only.

Displays the total number of locks that SQL Server is using. To calculate the value of this parameter, PATROL uses the SQL Server 6.5 Total Locks performance counter.

Collector: LocksColl
TotalSharedLocks

Microsoft SQL Server 6.5 only.

Displays the total number of locks that are shared. To calculate the value of this parameter, PATROL uses the SQL Server 6.5 Total Shared Locks performance counter.

Collector: LocksColl
Network Application Class
CommandQueueLength

Microsoft SQL Server 6.5 only.

Displays the number of client requests that are waiting for worker threads from SQL Server.

Collector: SQLServerColl
NetReadsPerSec

Microsoft SQL Server 6.5 only.

Displays the number of tabular data stream (TDS) packets that are read from the network per second. TDS is the protocol that SQL Server uses to communicate with a client.

Collector: SQLServerColl
NetWritesPerSec

Microsoft SQL Server 6.5 only.

Displays the number of tabular data stream (TDS) packets that are written to the network per second. TDS is the protocol that SQL Server uses to communicate with a client.

Collector: SQLServerColl
PacketErrors

Monitors the number of packet errors that SQL Server encounters while reading and writing network packets. This value represents the number of errors that occur between polls of the @@PACKET_ERRORS global variable.

Collector: GlobalVarsColl
PacketsReceivd

Monitors the number of network packets that SQL Server receives during the between polls of the @@PACK_RECEIVED global variable.

Collector: GlobalVarsColl
PacketsSent

Monitors the number of network packets that SQL Server sends between polls of the @@PACK_SENT global variable.

Collector: GlobalVarsColl
Object Application Class
ObjectDataSizeMB

Displays (in megabytes) the total amount of space that is used by data in the table or index which you are monitoring.

Collector: ObjectSizeColl
ObjectReservedSizeMB

Displays (in megabytes) the total amount of space that is reserved for use by the table or index which you are monitoring, including space for data and system information and space not used.

Collector: ObjectSizeColl
RowCountEstimate

Provides an estimate of the number of rows in the table. This parameter is not available when the monitored object is an index.

Collector: ObjectSizeColl
Performance Application Class
CacheHitRatio

Displays the percentage of requests for data that the SQL Server can satisfy from memory (data cache) rather than reading the data from a disk. To calculate this value, PATROL uses the SQL Server => Cache Hit Ratio performance counter for SQL Server 6.5 and the SQL Server:Buffer Manager => Buffer Cache Hit Ratio performance counter for SQL Server 7.0. For recommendations, see the online Help.

Collector: SQLServerColl
CpuBusy

Monitors the percentage of time that SQL Server is busy between polls of the @@CPU_BUSY global variable.

Collector: GlobalVarsColl
CpuIdle

Monitors the percentage of time that SQL Server is idle between polls of the @@IDLE global variable.

Collector: GlobalVarsColl
CpuIoBusy

Monitors the percentage of time that SQL Server performs input and output operations between polls of the @@IO_BUSY global variable.

Collector: GlobalVarsColl
ResponseExecTime

Provides the total operating response time (in milliseconds). The value of this parameter includes the time it takes a sample SQL statement to connect to SQL Server, execute a simple query, and return a response. See ResponseColl for information on how to change the sample SQL statement.

Collector: ResponseColl
ResponseSqlTime

Provides the amount of time (in milliseconds) that it takes SQL Server to execute a simple query when a sample SQL statement is executed. This parameter is formed by subtracting the connect and disconnect times from the information gathered by ResponseColl, leaving only the amount of time that the SQL Server took to execute the query.

Collector: ResponseColl
TransactionsPerSec

Displays the number of Transact-SQL command batches that are executed per second. This number is affected by all constraints, such as, I/O, number of users, cache size, and complexity of the requests. PATROL uses the SQL Statistics => Bath Requests/sec performance counter to calculate the value of this parameter.

Collector: SQLServerColl
Procedure Cache Application Class
PCProcBuffersActivePct

Monitors the percentage of procedure buffers that are actively used. To calculate this value, PATROL uses the SQL Server - Procedure Cache performance object for SQL Server 6.5 and the DBCC PROCCACHE command for SQL Server 7.0 and 2000.

Collector: ProcedureCacheColl
PCProcBuffersUsedPct

Monitors the percentage of procedure buffers in the procedure cache that are used. To calculate this value, PATROL uses the SQL Server - Procedure Cache performance object for SQL Server 6.5 and the DBCC PROCCACHE command for SQL Server 7.0 and 2000.

Collector: ProcedureCacheColl
PCProcCacheActivePct

Monitors the percentage of procedure cache that is active. To calculate this value, PATROL uses the SQL Server - Procedure Cache performance object for SQL Server 6.5 and the DBCC PROCCACHE command for SQL Server 7.0 and 2000.

Collector: ProcedureCacheColl
PCProcCacheUsedPct

Monitors the percentage of procedure cache that is used. To calculate this value, PATROL uses the SQL Server - Procedure Cache performance object for SQL Server 6.5 and the DBCC PROCCACHE command for SQL Server 7.0 and 2000.

Collector: ProcedureCacheColl
Published Application Class
ReplicatedCmdsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of replication commands that have been read out of the transaction log of the publication database and delivered to the distribution database per second.

Collector: ReplicationColl
ReplicatedTrans

Microsoft SQL Server 6.5 only.

Displays the number of transactions in the transaction log of the publication database that are marked for distribution but have not yet been delivered to the distribution database.

Collector: ReplicationColl
ReplicatedTransPerSec

Displays the number of transactions that were read out of the transaction log for the publication database and delivered to the distribution database per second.

Collector: ReplicationColl
ReplicationLatency

Microsoft SQL Server 6.5 only.

Displays the number of milliseconds between the time that a transaction marked for replication is entered into the transaction log of the publication database and it is read out of the log and delivered to the distribution database.

Collector: ReplicationColl
Subscribers Application Class
DeliveredCmdsPerSec

Microsoft SQL Server 7.0 and later only.

Displays the number of delivered commands per second in the distribution database. This value is calculated by using the Delivered Cmds/sec performance counter under the SQLServer:Replication Dist. object.

Collector: ReplicationColl
DeliveredTrans

Microsoft SQL Server 6.5 only.

Displays the number of delivered transactions in the distribution database.

Collector: ReplicationColl
DeliveredTransPerSec

Displays the number of transactions delivered per second.

Collector: ReplicationColl
DeliveryLatency

Displays the number of milliseconds that a transaction remains in the distribution database before it is delivered to the subscription server.

Collector: ReplicationColl
UnDeliveredTrans

Microsoft SQL Server 6.5 only.

Provides the number of undelivered transactions in the distribution database.

Collector: ReplicationColl
UserDefined Counters Application Class
UserDefCounter1

Displays the user defined Windows NT performance counters 1 through 10 that SQL Server sets.

Collector: UserDefined CountersColl
Users Application Class
UserBlocked

Gives a warning if one user process is blocked longer than the blocked detection time. Goes into alarm when two or more user processes are blocked longer than the blocked detection time. Change the blocked detection time for all SQL Server user processes by using the KM Admin => User Monitoring Admin => Configure Auto User Monitoring menu command.Change the blocked detection time for the selected user process through the Change Local Defaults menu command.

Collector: UserColl
UserColl

Collects data for the Users application class; sets all values for user and process parameters within the class.
UserCpu

Displays the CPU time that a user connection and checkpoint process used since the last poll of the UserColl parameter.

Collector: UserColl
UserIdle

Generates a warning if one user process remains idle longer than the idle detection time.

Change the idle detection time for all SQL Server user processes by using the KM Admin => User Monitoring Admin => Configure Auto User Monitoring menu command under a Server application. Change the idle detection time for the selected user process by using the Change Local Defaults menu command under a User application.

Collector: UserColl
UserIo

Displays the number of disk reads and writes for the user connection being monitored.

Collector: UserColl
UserMemUsage

Displays the amount of memory (in 2 KB pages for SQL Server 6.5; in 8 KB pages in SQL Server 7.0 and later) allocated to a user connection.

Collector: UserColl
UserTotCpu

Displays the cumulative CPU time for a user connection and checkpoint process.

Collector: UserColl
UserTotIo

Displays the cumulative total number of disk reads and writes for the current statement.

Collector: UserColl















PATROL for Microsoft Windows Servers 3.0.03


Table 23 PATROL for Microsoft Windows Servers 3.0.03
Parameter



PATROL Knowledge Module for Microsoft Windows Active Directory 1.5.01
AD_AD_ADDRESS_BOOK Application Class
AdAbAnrRate

Reports the rate at which the Active Directory server is receiving ambiguous name resolution requests as a result of Address Book activity.

Collector: AdPerfCollector
AdAbBrowseRate

Reports the rate at which the Active Directory server is receiving Address Book browse requests.

Collector: AdPerfCollector
AdAbClientSessions

Reports the number of active Address Book client sessions on the Active Directory server.

Collector: AdPerfCollector
AdAbMatchRate

Reports the rate at which Address Book matches are occurring on the Active Directory server.

Collector: AdPerfCollector
AdAbPropertyReadRate

Collector: Reports the rate at which Address Book property read operations are occurring on the Active Directory server.

Collector: AdPerfCollector
AdAbProxyLookupRate

Reports the rate at which Address Book proxy lookup operations are occurring on the Active Directory server.

Collector: AdPerfCollector
AdAbSearchRate

Reports the rate at which Address Book search operations are occurring on the Active Directory server.

Collector: AdPerfCollector
AD_AD_COLLECTOR Application Class
AdCollector

Collects and refreshes cached information about the domain controller that is required for the other collector parameters to collect successfully. This parameter does not populate any parameter values.
AdDiskCollector

Collects the parameter information for the parameters

AdmDiskSpaceUsed
AdDiskSpaceAvailable parameters.

AdFsmoCollector

Collects data from FSMO-related parameters

AdFsConnectivity
AdFsRoleChanged

AdPerfCollector

Collects performance-related data for the following parameters and application classes:

AdServerNameTransRate
AdThreadsInUse
AdClientNameTransRate
AdWriteRate
AdSearchRate
AdReadRate
AD_AD_ADDRESS_BOOK
AD_AD_LDAP
AD_AD_REPLICATION
AD_AD_SAM

AdReplicationCollector

Collects replication status and latency for the following parameters:

AdIntersiteReplicationStatus
AdIntrasiteReplicationLatency
AdIntrasiteReplicationStatus

AD_AD_FSMO_ROLE_CONNECTIVITY Application Class
AdFsConnectivity

Reports whether the domain controller that holds the schema master role is allowing LDAP connections. The operations master role server is pinged frequently to determine network availability. Attempts to connect through LDAP are not performed as often because LDAP connections use a greater amount of server resources.

Configure the frequency of the LDAP connection test by changing the value of the agent configuration variable ConnStatusSched. The default value for each FSMO role is stored in the configuration database.



AdFsRoleChanged

Detects and reports when a master operations FSMO role is moved to or from the current DC and when the current DC acquires the role.
AD_AD_FSMO_ROLE_CONNECTIVITY_CONT Application Class
The AD_AD_FSMO_ROLE_CONNECTIVITY_CONT application class is the parent container for all the AD_AD_FSMO_ROLE_CONNECTIVITY application class instances. The single instance is named FSMO Connectivity.
AD_AD_LDAP Application Class
AdLdActiveThreads

Reports the current number of threads in use by the LDAP subsystem of the local directory service.

Collector: AdPerfCollector
AdLdBindRate

Reports the number of successful LDAP binds. If the parameter is in alarm, an annotated data point provides the reason that LDAP cannot be connected.

Collector: AdPerfCollector
AdLdClientSessions

Reports the number of currently connected LDAP client sessions.

Collector: AdPerfCollector
AdLdConnectStatus

Reports whether or not an LDAP connection is available. If the parameter is in alarm, the parameter provides the reason that LDAP cannot be connected.

Collector: AdPerfCollector
AdLdPercentSearches

Reports the percentage of directory searches coming from LDAP.

Collector: AdPerfCollector
AdLdPercentWrites

Reports the percentage of directory writes coming from LDAP.

Collector: AdPerfCollector
AdLdResponseTime

Reports the amount of time required to issue an LDAP bind operation. The bind operation is performed locally on the domain controller to eliminate network latency.

Note: If the bind operation fails, a data point is not reported for that collection cycle.

Collector: AdPerfCollector
AdLdSearchRate

Reports the rate at which LDAP clients perform search operations.

Collector: AdPerfCollector
AdLdWriteRate

Reports the rate at which LDAP clients perform write operations.

Collector: AdPerfCollector
AD_AD_REPLICATION Application Class
AdRpFailedSyncRequests

Reports the number of unsuccessful synchronization requests processed since the last collection cycle.

Collector: AdPerfCollector
AdRpInboundByteRate

Reports the rate at which bytes of data are arriving at the Active Directory server.

Collector: AdPerfCollector
AdRpInboundObjectRate

Reports the rate at which objects are arriving that need to be added to the current Active Directory Server.

Collector: AdPerfCollector
AdRpInboundPropertyRate

Reports the rate at which property changes are arriving at the Active Directory server.

Collector: AdPerfCollector
AdRpInboundValueRate

Reports the rate at which values are arriving at the Active Directory server.

Collector: AdPerfCollector
AdRpOutboundByteRate

Reports the rate at which bytes of data are leaving the Active Directory server.

Collector: AdPerfCollector
AdRpOutboundObjectRate

Reports the rate at which objects that need to be added to other Active Directory servers have left the current Active Directory server since the last collection cycle.

Collector: AdPerfCollector
AdRpOutboundPropertyRate

Reports the rate at which property changes have left the Active Directory server since the last collection cycle.

Collector: AdPerfCollector
AdRpOutboundValueRate

Reports the rate at which values are leaving the Active Directory server.

Collector: AdPerfCollector
AdRpPendingSyncRepl

Reports the number of directory synchronizations that are queued for this server but have not yet been processed.

Collector: AdPerfCollector
AdRpSuccessSyncRequests

Reports the number of synchronization requests that were successfully processed since the last collection cycle.

Collector: AdPerfCollector
AdRpSyncRequests

Reports the number of synchronization requests processed since the last collection cycle.

Collector: AdPerfCollector
AD_AD_SAM Application Class
AdSmCreateObjAttemptRate

Reports the number of Security Account Manager (SAM) create-user and create-machine attempts per second since the last collection cycle.

Collector: AdPerfCollector
AdSmCreateObjFailureRate

Reports the number of failed Security Account Manager (SAM) create-user and create-machine attempts per second since the last collection cycle.

Collector: AdPerfCollector
AdSmCreateObjSuccessRate

Reports the number of successful Security Account Manager (SAM) create-user and create-machine attempts per second since the last collection cycle.

Collector: AdPerfCollector
AdSmEvaluationRate

Reports the rate that the Active Directory server has received SAM-initiated group evaluations since the last collection cycle. This value is an aggregate of the following performance counters:

SAM Account Group Membership Evaluations per second
SAM GC Evaluations per second
SAM non-Transitive Membership Evaluations per second
SAM Resource Group Membership Evaluations per second
SAM Transitive Membership Evaluations per second
SAM Universal Group Membership Evaluations per second

Collector: AdPerfCollector
AdSmPercentReads

Reports the percentage of directory-read operations initiated from the Security Account Manager (SAM).

Collector: AdPerfCollector
AdSmPercentSearches

Reports the percentage of directory searches initiated from the Security Account Manager (SAM).

Collector: AdPerfCollector
AdSmPercentWrites

Reports the percentage of directory-write operations initiated from the Security Account Manager (SAM).

Collector: AdPerfCollector
AdSmQueryRate

Reports the number of display-information query operations plus the number of enumerations that are occurring on the Active Directory server. This value is an aggregate of the following performance counters:

SAM Display Information Queries per second
SAM Enumerations per second

Collector: AdPerfCollector
AD_AD_SERVER Application Class
AdClientNameTransRate

Reports the number of Active Directory client name translations issued against the Active Directory server since the last collection cycle.

Collector: AdPerfCollector
AdCollector

Collects and refreshes cached information about the domain controller that is required for the other collector parameters to collect successfully. This parameter does not populate any parameter values.
AdDiskCollector

Collects the parameter information for the AdDiskSpaceUsed and AdDiskSpaceAvailable parameters.
AdDiskSpaceAvailable

Reports the amount of disk space available on the current volume that hosts the Active Directory data repository.

Collector: AdDiskCollector
AdDiskSpaceUsed

Reports the amount of disk space used by the Active Directory data repository.

Collector: AdDiskCollector
AdIntersiteReplicationStatus

Reports whether replication for this domain controller is occurring properly between sites in the domain.

Note: This parameter is inactive by default. Each discovery cycle, the KM checks to see if the current DC is a bridgehead server. If the current server becomes a bridgehead server, then the parameter becomes active. Because the active/inactive status is determined programmatically, changing the active/inactive setting for the parameter has no effect on the active/inactive status at runtime.

Collector: AdReplicationCollector
AdIntrasiteReplicationLatency

Reports the average replication latency between domain controllers within the site/domain and the current domain controller. Data points are annotated with the maximum latency reported and the name of the domain controllers to which the current domain controller is replicating.

Note: This parameter is inactive by default. Each discovery cycle, the KM checks to see if more than one DC is in the current site. If there is more than one DC in the site, then the parameter becomes active. Because the active/inactive status is determined programmatically, changing the active/inactive setting for the parameter has no effect on the active/inactive status at runtime.

Collector: AdReplicationCollector
AdIntrasiteReplStatus

Reports whether replication is occurring properly within the site/domain for this domain controller.

Note: This parameter is inactive by default. Each discovery cycle, the KM checks to see if more than one DC is in the current site. If there is more than one DC in the site, then the parameter becomes active. Because the active/inactive status is determined programmatically, changing the active/inactive setting for the parameter has no effect on the active/inactive status at runtime.

Collector: AdReplicationCollector
AdReadRate

Reports the number of Active Directory read operations issued against the Active Directory server since the last collection cycle.

Collector: AdPerfCollector
AdSearchRate

Reports the number of Active Directory search operations issued against the Active Directory server since the last collection cycle.

Collector: AdPerfCollector
AdServerNameTransRate

Reports the number of Active Directory server name translations issued against the Active Directory server.

Collector: AdPerfCollector
AdSysvolShared

Reports whether or not Sysvol is shared. Sysvol must be shared for group policy to be replicated and applied to domain controllers and other objects.

Collector: AdDiskCollector
AdThreadsInUse

Reports the number of threads in use by the Active Directory server.

Collector: AdPerfCollector
AdWriteRate

Reports the number of Active Directory write operations issued against the Active Directory server.

Collector: AdPerfCollector
PATROL KM for Microsoft Cluster Server 1.5.01
MCS_Cluster Application Class
ClusterAvailability

Reports how long the cluster has been up and running as a percentage of hours from January 1 of the current year to the current date.

Collector: ClusterUptimeColl
ClusterStatus

Displays whether the cluster is up/down as a whole and on each specific node.

Collector: ClusterObjectStatusColl
ClusterUptime

Reports how long the cluster has been up and running as a number of hours to the current date.

Collector: ClusterUptimeColl
ClusterUptimeColl

Collects cluster uptime information and sets the values for the ClusterAvailability and ClusterUptimeparameters.
MCS_Clusters Application Class
McsCheckConfiguration

Displays the KM configuration verification information. Alarms if a problem is detected.
McsGatewayStatus

Reports the availability of the McsGateway. When McsGateway is up and running, the parameter value is 0. When McsGateway is down, the parameter value is 1.

Note: The parameter value updates only if more than 5 minutes have passed since the last update, or if you refresh the process cache.
McsGwConAvailable

Reports if there is a working connection between the McsGateway and the PATROL Agent by having the McsService send a message through the McsGateway to the PATROL Agent. The McsService sends a status message every five minutes.

Note: The parameter value updates only if the last event is more than 5 minutes old, or if you update the process cache.
McsServiceStatus

Reports the availability of the McsService. When the service is running, the parameter value is 0. When the service is down, the parameter value is 1.
MCS_Collectors Application Class
ClusterObjectsColl

Searches for available cluster objects and then populates a variable in PatrolAgent memory, which will be read by the discovery process of related application classes. The parameter value is set to 1 when an error condition occurs and information cannot be collected.
ClusterObjectInfoColl

Collects cluster object information for all cluster objects except resources. The parameter value is set to 1 when an error condition occurs.
ClusterObjectStatusColl

Collects cluster status information for all cluster objects except resources. The parameter value is set to 1 when an error condition occurs.
ClusterResourceInfoColl

Collects information about cluster resources. The parameter value is set to 1 when an error condition occurs and information cannot be collected.
ClusterResTypeDLLVerColl

Collects information about cluster resource-type DLLs. The parameter value is set to 1 when an error condition occurs and information cannot be collected.
TraceConfigFileAvailable

Checks whether the KM configuration file MCS_Trace_ClusterName.cfg is available and switches trace on/off for application class discovery and all dependent parameters according to the file.
MCS_Group_Resources Application Class
FileShareUnavailable

Monitors whether the cluster file share is accessible from a client. The user defined in the agents config-database /AgentSetup/defaultAccount must have the permissions to map the appropriate file shares.
FreeSpace

Displays the free space on the disk. An annotation shows the free space for each partition.
ResourceStatus

Displays the status of a selected resource.

Collector: ClusterObjectStatusColl
MCS_Groups Application Class
CheckIPResourceColl

Pings the group IP resource (address) if available and publishes the ping response and response time.

Note: CheckIPResourceColl is launched with the PtPing.exe command. This command will fail if the /Agentsetup/defaultAccount does not have administrator privileges.
GroupFailover

Indicates that a failover has occurred. The failover may have occurred due to a failure or a manual move.
GroupStatus

Displays the group status as online, partial online, offline, unknown, or failed.

Collector: ClusterObjectStatusColl
IPResourceRespTime

Displays the response time measured by ping. If the group contains more than one IP resource, CheckIPResourceColl sets the parameter value to the maximum average response time and writes an annotation containing a list of average response times for all IP resources in the current group.

Collector: CheckIPResourceColl.
IPResourceUnAvailable

Displays an annotation that shows the IP address of the group if a resource does not respond to the ping command.

Collector: CheckIPResourceColl
MCS_Network_Interfaces Application Class
InterfaceStatus

Displays the availability status of the network interface on each node. The status levels are:

Collector: ClusterObjectStatusColl
MCS_Networks Application Class
NetworkStatus

Displays the availability status of the network.

ClusterObjectStatusColl
MCS_Nodes Application Class
ClusterLogFileError

Reacts on keyword matching in the cluster log file. f no keywords are specified, this parameter is offline.
ClusterLogFileSize

Monitors the size of the cluster log file when cluster diagnostic logging (logging mode) is enabled. If logging is disabled, this parameter is offline.
NodeStatus

Displays the operational status of a selected node. The status levels are:

Collector: ClusterObjectStatusColl
MCS_Performance Application Class
AvWorkLoad

Displays the average processor time of the cluster nodes.
WorkLoadDelta

Displays the workload delta of the cluster nodes compared to a baseline.

Collector: AvWorkLoad
MCS_Quorum Application Class
BackupClusterDatabase

Creates a backup of the cluster database and shows the backup status.
QuorumInfoColl

Collects quorum information.
QuorumSize

Displays the quorum log file size.

Note: Until the first poll response is received from the cluster, the QuorumSize parameter is offline.
PATROL History Loader 1.5.00
History Propagator Application
fileTransSize

Reports the total size of all files that are to be loaded into database tables.

Collector: GetHistoryData
GetHistoryData

Executes the dump_hist utility and copies the data to the target machine.

Note: If you use the default polling cycle of every 60 minutes, this parameter will create a large amount of network traffic to each History Loader computer. To reduce network traffic, create a local (customized) parameter on each History Loader computer and set the polling cycle of each local parameter to run at different intervals (for example, one polling cycle every 90 minutes, another polling cycle every 12 hours, etc.).
LastSendStatus

Reports the status (successful or failed transfer) of the last data transmission.

Collector: GetHistoryData
numUnsuccTxns

Reports the number of consecutive unsuccessful data transmissions while the dump_hist utility is running.

Collector: GetHistoryData
RDBMS History Loader Applications
DB2 History Loader
FilesWaiting

Reports the number of history data files waiting to be loaded into database tables.

Collector: LoaderStats
LoaderErrors

Reports the number of History Loader errors that have occurred.

Collector: LoaderStats
LoaderStats

Collects information for PATROL History Loader. Sets the values of FilesWaiting, LoaderEvents, ServerFileSpaceUsed parameters.
LoadHistoryData

Loads the history data files from the History Propagator into the specified database.

If an error occurs, the parameter moves the error message to the error file. The parameter displays the full text of the session that generated the error in an error log file.

Note: If you use the default polling cycle of every Saturday, this parameter will use a large amount of CPU on each RDBMS computer. To reduce CPU usage, change the parameter polling cycle to run more frequently (for example, once or twice per day).
ServerFileSpaceUsed

Reports the space used (in megabytes) by history data files waiting to be loaded into database tables.

Collector: LoaderStats
Microsoft SQL Server History Loader
FilesWaiting

Reports the number of history data files waiting to be loaded into database tables.

Collector: LoaderStats
LoaderErrors

Displays the number of load errors that have occurred.

Collector: LoaderStats
LoaderStats

Collects information for PATROL History Loader. Sets the values of FilesWaiting, LoaderEvents, ServerFileSpaceUsed parameters.
LoadHistoryData

Loads the history data files from the History Propagator into the specified database.

If an error occurs, the parameter moves the error message to the error file. The parameter displays the full text of the session that generated the error in an error log file.

Note: If you use the default polling cycle of every Saturday, this parameter will use a large amount of CPU on each RDBMS computer. To reduce CPU usage, change the parameter polling cycle to run more frequently (for example, once or twice per day).
ServerFileSpaceUsed

Reports the space used (in megabytes) by history data files waiting to be loaded into database tables.

Collector: LoaderStats
Oracle Server History Loader
FilesWaiting

Reports the number of history data files waiting to be loaded into database tables.

Collector: LoaderStats
LoaderErrors

Displays the number of load errors that have occurred.

Collector: LoaderStats
LoaderStats

Collects information for PATROL History Loader. Sets the values of FilesWaiting, LoaderEvents, ServerFileSpaceUsed parameters.
LoadHistoryData

Loads the history data files from the History Propagator into the specified database.

If an error occurs, the parameter moves the error message to the error file. The parameter displays the full text of the session that generated the error in an error log file.

Note: If you use the default polling cycle of every Saturday, this parameter will use a large amount of CPU on each RDBMS computer. To reduce CPU usage, change the parameter polling cycle to run more frequently (for example, once or twice per day).
ServerFileSpaceUsed

Reports the space used (in megabytes) by history data files waiting to be loaded into database tables.

Collector: LoaderStats
Sybase SQL Server History Loader
FilesWaiting

Reports the number of history data files waiting to be loaded into database tables.

Collector: LoaderStats
LoaderErrors

Displays the number of load errors that have occurred.

Collector: LoaderStats
LoaderStats

Collects information for PATROL History Loader. Sets the values of FilesWaiting, LoaderEvents, ServerFileSpaceUsed parameters.
LoadHistoryData

Loads the history data files from the History Propagator into the specified database.

If an error occurs, the parameter moves the error message to the error file. The parameter displays the full text of the session that generated the error in an error log file.

Note: If you use the default polling cycle of every Saturday, this parameter will use a large amount of CPU on each RDBMS computer. To reduce CPU usage, change the parameter polling cycle to run more frequently (for example, once or twice per day).
ServerFileSpaceUsed

Reports the space used (in megabytes) by history data files waiting to be loaded into database tables.

Collector: LoaderStats
PATROL KM for Microsoft Network Load Balancing 1.5.01
LBS_Cluster Application Class
LbsClusterColl

Serves as the collector for the LBS_Cluster class.
LbsClusterMemberNodes

Displays a list of the Network Load Balancing nodes that are being monitored for this cluster, along with the host priority and status of each monitored node.

Collector: LbsClusterColl
LbsClusterStatus

Displays the status of the cluster.

Collector: LbsClusterColl
LBS_Clusters Application Class
LbsClustersColl

Serves as the collector for the LBS_Clusters application class.
LbsClustersTotalClusterCount

Reports the number of Network Load Balancing clusters being monitored by the Knowledge Module (KM).

Collector: LbsClustersColl
LbsClustersTotalNodeCount

Reports the number of Network Load Balancing nodes currently being monitored by the Knowledge Module (KM).

Collector: LbsClustersColl
LBS_Events Application Class
LbsEvtColl

Serves as the collector for the LBS_Events application class.
LbsEvtDailySysLogErrors

Reports the sum total of Network Load Balancing errors recorded in the Microsoft Windows Servers Event System Logs within the current 24-hour period for all monitored cluster nodes. This parameter displays an alarm when an error event is found in the System Log.

Each node within a Network Load Balancing cluster records the error messages about other nodes. For example, if node x has port rules that are inconsistent with the rest of the cluster nodes port rules, each node records the error message node X does not have the same number or type of port rules as this host.

Collector: LbsEvtColl
LbsEvtDailySysLogInformation

Reports the sum total of Network Load Balancing information events recorded in the Microsoft Windows Servers Event System Logs for all monitored cluster nodes.

Collector: LbsEvtColl
LbsEvtDailySysLogWarnings

Reports the sum total of Network Load Balancing warnings recorded in the Microsoft Windows Event Servers System Logs for all monitored cluster nodes. This parameter displays a warning when an error event is found in the System Log.

Collector: LbsEvtColl
LBS_Node Application Class
LbsNodeColl

Serves as the collector for the LBS_Node application class.
LbsNodeStatus

For each monitored node, reports the node status and initiates an alarm condition if the node is down or is no longer functioning as part of the cluster.

Collector: LbsNodeColl






WmiStatus

Checks if a connection to the WMI namespace \\<node_name>\root\microsoftnlb can be established. If the connection is successful, the value is set to 0. Otherwise, the value is set to 1.
LBS_Performance Application Class
LbsPerfAvailableBytes

Displays the amount of physical memory currently available on the node.

Collector: LbsPerfColl
LbsPerfAvailBytesPct

Displays the percentage of total physical memory that is available on the node.

Collector: LbsPerfColl
LbsPerfColl

Serves as the collector for the LBS_Performance application class.
LbsPerfCpuUsagePct

Displays the total CPU usage percent for all processes running on the node and alarms when the percentage passes a threshold.

Collector: LbsPerfColl
LbsPerfPageFileUsagePct

Displays the page file usage percent and alarms when the percentage exceeds a threshold.

Collector: LbsPerfColl
LbsPerfWebSvcConn

Displays the current number of Web Service connections.

Collector: LbsPerfColl
PATROL for Microsoft Windows Domain Services 1.5.01
NT_DFS_ROOT Application Class
DfsCollector

Serves as the collector for the NT_DFS_ROOT application class.
DfsConnectionCount

Monitors the number of users connected to the current DFS share.

Collector: DfsCollector
DfsConnectionPercent

Monitors the percentage of the maximum number of connections that is currently in use. If no maximum is set, this parameter will not be enabled.

Collector: DfsCollector
DfsEvtLogErrorCount

Monitors the number of DFS related error events that have occurred in the Windows NT event log since the last collection cycle. Displays an alarm when this value is greater than 0.

Collector: DfsCollector
DfsEvtLogInfoCount

Monitors the number of DFS-related information events that have occurred in the event log since the last collection cycle.

Collector: DfsCollector
DfsEvtLogWarningCount

Monitors the number of DFS-related warning events that have occurred in the event log since the last collection cycle. Creates a warning when this value is greater than 0.

Collector: DfsCollector
DfsLinkCount

Monitors the number of DFS links that are defined to the current root DFS server.

Collector: DfsCollector
DfsLinkCountChg

Raises a warning any time the number of links defined to the DFS changes.

Collector: DfsCollector
DfsRootReplicaCount

Moitors the number of root replica servers that are defined for the current DFS root.

Collector: DfsCollector
DfsRootReplicaCountChg

Raises a warning any time the number of configured root replicas changes.

Collector: DfsCollector
DfsServiceStatus

Monitors whether or not the Distributed File System (DFS) service is running. This is done by querying the status of the service via the service control manager routines. Alarms whenever the DFS server is not running.

Collector: DfsCollector
NT_DFS_ROOT_REPLICA Application Class
DfsReplicaCollector

Serves as the collector for the NT_DFS_ROOT_REPLICA application class.
DfsReplicaConnectTime

Indicates the amount of time, in milliseconds, required to connect to and disconnect from the root replica share name.

Collector: DfsReplicaCollector
DfsReplicaServiceStatus

Monitors the status of the Distributed File System (DFS) service on the server that is configured as a root replica.

Collector: DfsReplicaCollector
DfsReplicaStatus

Indicates whether or not the root replica server can be connected to. This test is done by attempting to connect to the replica server.

Collector: DfsReplicaCollector
NT_DFS_LINK Application Class
DfsLinkCollector

Serves as the collector for the NT_DFS_LINK application class.
DfsLinkConnectTime

Monitors the amount of time required to connect to and disconnect from the link.

Collector: DfsLinkCollector
DfsLinkReplicaCount

Monitors the number of link replicas that are defined for the current link.

Collector: DfsLinkCollector
DfsLinkReplicaCountChg

Raises a warning any time the number of link replicas defined to the current link changes.

Collector: DfsLinkCollector
DfsLinkStatus

Monitors whether or not the link is available to the DFS root on the DFS server.

Collector: DfsLinkCollector
NT_DFS_LINK_REPLICA Application Class
DfsLinkReplicaCollector

Serves as the collector for the NT_DFS_LINK_REPLICA application class.
DfsReplicationStatus

Monitors whether or not the current DFS replica link is the same as the link it is replicating.

Collector: DfsLinkReplicaCollector
NT_DHCP Application Class
DhAckRate

Displays the rate at which acknowledgments are received per minute.

Collector: DhCollector
DhCollector

Serves as the collector for the NT_DHCP application class.
DhDeclineRate

Displays the rate of DHCP declines received by the DHCP server per minute.

Collector: DhCollector
DhNackRate

Displays the rate at which non-acknowledgments are received per minute.

Collector: DhCollector
DhOfferRate

Displays the rate at which offers are sent per minute.

Collector: DhCollector
DhPercentLeasesAvailable

Calculates the percentage of total leases that are available to clients.

Collector: DhCollector
DhReleaseRate

Displays the rate at which IP addresses are released per minute.

Collector: DhCollector
DhRequestRate

Displays the rate at which DHCP requests are received per minute.

Collector: DhCollector
DhScopeCount

Monitors the number of scope definitions managed by the DHCP server. A PATROL event is raised any time the specified value changes.

Collector: DhCollector
DhServiceStatus

Monitors whether or not the DHCP service is running. Displays an alarm when the DHCP service is not running.

Collector: DhCollector
DhTotalLeaseAvail

Monitors the number of DHCP leases available. Alarms when the number of available leases falls below the specified threshold.

Collector: DhCollector
DhTotalLeasesInUse

Monitors the number of DHCP leases currently in use.

Collector: DhCollector
DhTotalStaticCount

Monitors the number of static leases (reserved IP addresses) that are defined for the DHCP server.

Collector: DhCollector
NT_DHCP_SCOPE Application Class
DhsCollector

Serves as the collector for the DHCP_SCOPE service.
DhsLeasesAvailable

Monitors the number of DHCP leases that are available in the current scope. Alarms when the number of available leases falls below the specified threshold.

Collector: DhCollector
DhsLeasesInUse

Monitors the number of DHCP leases that are in use in the current scope.

Collector: DhCollector
DhsPercentLeaseAvailable

Calculates the percentage of the total number of leases available to clients for the specified scope.

Collector: DhCollector
DhsStaticCount

Monitors the number of static leases (reserved IP addresses) defined in the current scope.

Collector: DhCollector
NT_DNS Application Class
DnCollector

Serves as the collector for the NT_DNS application class.
DnQueryFailureRate

Monitors the average number of failed queries per minute.

Collector: DnCollector
DnQueryRate

Monitors the average number of queries received per minute.

Collector: DnCollector
DnQueryResponseTime

Records the number of milliseconds the DNS server takes to process a sample request.

Collector: DnCollector
DnQuerySuccessRate

Monitors the average number of successful queries per minute.

Collector: DnCollector
DnServiceStatus

Monitors whether the DNS service is running. If the DNS service is stopped or pending, this parameter will alarm.

Collector: DnCollector
NT_DNS_2000 Application Class
DnCollector

Serves as the collector for the NT_DNS_2000 application class.
DnDynUpdateQueuedRate

Monitors the rate at which dynamic updates are being queued by the DNS server.

Collector: DnCollector
DnDynUpdateRecvRate

Monitors the rate at which dynamic updates are being received at the DNS server each minute.

Collector: DnCollector
DnDynUpdateRejectRate

Monitors the rate at which dynamic updates are being rejected by the DNS server.

Collector: DnCollector
DnDynUpdateTimeoutRate

Monitors the rate per minute at which dynamic updates are failing due to timeout. Raises an alarm any time this value is greater than 0.

Collector: DnCollector
DnDynUpdateWriteRate

Monitors the rate at which dynamic updates are written to the DNS database each minute.

Collector: DnCollector
DnEvtLogErrorCount

Monitors the number of DNS-related error events that have occurred in the Windows NT event log since the last collection cycle. Displays an alarm when this value is greater than 0.

Collector: DnCollector
DnEvtLogInfoCount

Monitors the number of DNS-related information events that have occurred in the Windows NT event log since the last collection cycle.

Collector: DnCollector
DnEvtLogWarningCount

Monitors the number of DNS-related warning events that have occurred in the Windows NT event log since the last collection cycle. Displays a warning when this value is greater than 0.

Collector: DnCollector
DnQueryFailureRate

Monitors the number of failed queries per minute. Alarms when the count exceeds a user-defined threshold. Calculated using DnQueryRate and DnQuerySuccessRate.

Collector: DnCollector
DnQueryRate

Monitors the average number of queries received per minute. Alarms when the count exceeds a user-defined threshold.

Collector: DnCollector
DnQueryResponseTime

Records the number of milliseconds the DNS server takes to process a sample request.

Collector: DnCollector
DnQuerySuccessRate

Monitors the number of successful queries per minute. Alarms when the count exceeds a user-defined threshold.

Collector: DnCollector
DnSecUpdateFailRate

Monitors the rate per minute at which secure updates are failing on the DNS database. Raises an alarm when this value is greater than 0.

Collector: DnCollector
DnSecUpdateRecvRate

Monitors the rate per minute at which secure updates are being received by the DNS server each minute.

Collector: DnCollector
DnServiceStatus

Monitors whether or not the DNS service is running by querying the status of the service through the service control manager routines. Displays an alarm when the DNS service is not running.

Collector: DnCollector
DnWinsLookupRate

Monitors the rate per minute at which WINS queries are being received by the DNS server.

Collector: DnCollector
DnWinsResponseRate

Monitors the rate per minute at which responses to WINS queries are being processed at the DNS server.

Collector: DnCollector
DnWinsReverseLookupRate

Reports the rate per minute at which reverse lookup WINS queries are being received by the DNS server.

Collector: DnCollector
DnWinsReverseResponseRate

Reports the rate per minute at which reverse lookup WINS queries are being processed by the DNS server.

Collector: DnCollector
NT_DOMAIN Application Class
DmBdcCount

Provides a count of all of the BCD NT servers that are members of the Domain and are active.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmCollector

Serves as the collector for the NT_DOMAIN class.
DmDcCount

Provides a count of all of the BDC NT servers or DC Windows 2000 servers that are members of the Domain and are active.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmDhcpSrvCount

Monitors the number of DHCP Servers in the domain.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmLicenseCount

Monitors the number of workstation licenses in use on the primary domain controller.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmMstrBrowserStat

raises a PATROL event and alarms if a new Master Browser is elected for the Windows NT 4 domain.

Note: This Parameter is inactive on Windows 2000 domain controllers.

Collector: DmCollector
DmNodeCount

Provides a count of all computers that are active members of the Domain.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmRasConnCount

Monitors the number of remote access connections that are active in the domain.

Collector: DmCollector
DmRasConnDenied

Monitors the number of remote access connections denied within the domain.

Collector: DmCollector
DmServerCount

Provides a count of all servers that are active members of the Domain.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmServerStatus

Monitors the current status of the primary domain controller. Alarms when the server is unavailable.

Collector: DmCollector
DmSessionCount

Provides a count of all active user sessions on the primary domain controller.

Collector: DmCollector
DmTrustRelCount

Monitors the number of trust relationships associated with the primary domain controller (PDC). An event is raised any time the value changes.

Collector: DmCollector
DmWinsSrvCount

Monitors the servers running WINS within the domain. A PATROL event is raised if the number of WINS servers changes.

Note: If this parameter is made active and NETBIOS is disabled, the parameter will be offline.

Collector: DmCollector
DmWksCount

Provides a count of all workstations that are active members of the domain.

Collector: DmCollector
NT_MEMBER_SERVER Application Class
SvCollector

Serves as the collector for the NT_MEMBER_SERVER application class.
SvIdleSessionCount

Provides a count of all user sessions that have been idle for a specified amount of time. Alarms when the count reaches the user-defined threshold.

Collector: SvCollector
SvServerStatus

Monitors the current status of the server. Alarms when the server is unavailable.

Collector: SvCollector
SvSessionCount

Provides a count of all the user sessions that are active on the current server.

Collector: SvCollector
NT_RAS Application Class
RaCollector

Serves as the collector for the NT_RAS application class.
RaConnectionsAvail

Monitors the number of RAS devices that are currently available.

Collector: RaCollector
RaConnectionsInUse

Monitors the number of RAS connections currently in use.

Collector: RaCollector
RaServiceStatus

Monitors whether or not the RAS service is running. Displays an alarm when the RAS service is not running.

Collector: RaCollector
NT_RAS_DEVICE Application Class
RdByteRecvRate

Monitors the rate at which the RAS device is receiving data.

Collector: RdCollector
RdByteTransRate

Report the rate at which the RAS device is transmitting data.

Collector: RdCollector
RdCollector

Serves as the collector for the NT_RAS_DEVICE class.
RdConnDenied

Monitors the number of times there have been failed logins on the specific device.

Collector: RdCollector
RdConnectedUser

Lists the name of the user connected with this device.

Collector: RdCollector
RdConnectTime

Monitors the amount of time a user has been connected to the RAS device.

Collector: RdCollector
RdDeviceStatus

Monitors the current status of each RAS device. Alarms when the RAS device is not connected.

Collector: RdCollector
RdErrorRate

Monitors the rate at which communication errors are occurring on the RAS device.

Collector: RdCollector
RdIdleConnectTime

Monitors the amount of time a user has been connected to the RAS device in an idle state.
NT_REPLICATION Application Class
RpCollector

Serves as collector for the NT_REPLICATION application class.
RpServiceStatus

Monitors the status of the Directory Replicator Service running on the PATROL Agent server. Alarms when the service is not available.

Collector: RpCollector
NT_REPLICATION_DIR Application Class
RpdCollector

Serves as the collector for the NT_REPL_DIR application class.
RpdReplicationStatus

Monitors the status of the replication of each directory tree. (Each directory tree is monitored to determine if the replication is occurring and that the information is accurate.) Alarms if the replication does not occur or the data does not match after the replication.

Collector: RpdCollector
NT_REPL_SVR Application Class
RpsCollector

Serves as the collector for the NT_REPL_SVR application class.
RpsServiceStatus

Monitors whether or not the Directory Replicator service is running on the server to which the agent machine is replicating. Alarms when the Replicator service is not running.

Collector: RpdCollector
NT_REMOTE_SERVERS Application Class
MsCollector

Serves as the collector for the NT_REMOTE_SERVERS application class.
MsConnectResponse

Monitors the amount of time the remote server takes to report connection requests.

Collector: MsCollector
MsConnectStatus

Monitors whether a connection test was successful.

Collector: MsCollector
MsPatrolAgentStatus

Gives the status of the PATROL Agent running on a remote server. Alarms when the agent is not available.

Collector: MsCollector
MsPingResponse

Monitors the amount of time required to perform an ICMP ping against the current network server. Alarms if there is no response from the remote server.

Collector: MsCollector
MsServerAvailability

Monitors the percentage of time each server is available to the domain for use.

Collector: MsCollector
NT_SHARES Application Class
ShCollector

Serves as the collector for the NT_SHARES application class.
ShConnCount

Monitors the number of users currently connected to a given network share.

Collector: ShCollector
ShConnPercent

Monitors the percentage of total connections that are allowed for the current share. If no limit is specified, this parameter is set to zero.

Collector: ShCollector
ShDevicePercent

Monitors the percentage of total disk space on the device used by the current shared directory.

Collector: ShCollector
ShSpaceUsed

Monitors the amount of disk space used by the current network shared device.

Collector: ShCollector
ShThresholdPercent

Monitors the percentage of the user-specified threshold that is used by the current shared directory. Alarms if the percentage is greater than 100 percent of the user-specified threshold.

Collector: ShCollector
NT_TRUST Application Class
TrAcceptedLogins

Monitors the number of logins accepted from the outside trusted domain represented by this application instance.

Collector: TrCollector
TrCollector

Serves as the collector for the NT_TRUST application class.
TrDeniedLogins

Monitors the number of logins from outside domains that are refused due to an invalid trust relationship.

Collector: TrCollector
TrExtAcceptedLogins

Monitors the number of successful logins from the current domain to the outside trusting domain represented by the current application instance.

Collector: TrCollector
TrExtDeniedLogins

Monitors the number of logins denied from the current domain to the outside trusting domain represented by the current application instance.

Collector: TrCollector
TrRelationshipStatus

Validates that the trust relationship is active and in use by other domains within the environment.

Collector: TrCollector
TrResponseTime

Measures the connection response time to a trusting domains.

Collector: TrCollector
NT_USER_ACCOUNTS Application Class
UsAuthenticatedByBDC

Provides BDC authentication data. In a Windows 2000 domain, this parameter is disabled.

Collector: UsCollector
UsCollector

Serves as the collector for the NT_USER_ACCOUNTS application class.
UsDaysSinceLogin

Monitors the number of days that have passed since the user logged into the domain.

Collector: UsCollector
UsDiskSpaceInUse

Monitors the amount of disk space in use by the users home directory.

Collector: UsCollector
UsTimeLoggedIn

Monitors the number of minutes the user account has been logged in. If the user account is not logged in, the parameter is set to zero.

Collector: UsCollector
NT_WINS Application Class
WnCollector

Serves as the collector for the NT_WINS application class.
WnConflictRate

Monitors the number of conflicts per minute. A conflict occurs when a registration or renewal is attempted and the name or address already exists within the database.

Collector: WnCollector
WnQueryFailureRate

Monitors the number of failures per minute on the WINS server.

Collector: WnCollector
WnQueryRate

Monitors the number of queries per minute on the WINS server.

Collector: WnCollector
WnQuerySuccessRate

Monitors the number of successful queries per minute by the WINS server.

Collector: WnCollector
WnRegistrationRate

Monitors the rate at which registrations are received on the WINS service. A registration occurs when a client workstation sends its name to the WINS service to be added to the database.

Collector: WnCollector
WnReleaseFailureRate

Monitors the number of failed releases per minute.

Collector: WnCollector
WnReleaseRate

Displays the rate at which the WINS server receives messages that a WINS client is no longer operating. A release message allows the WINS server to free the name for future use.

Collector: WnCollector
WnReleaseSuccessRate

Monitors the number of successful releases per minute.

Collector: WnCollector
WnRenewalRate

Monitors the rate at which the WINS server receives renewal requests.

Collector: WnCollector
WnServiceStatus

Monitors whether or not the WINS service is running on each of the configured servers. This query can be run from the PATROL Agent running on a primary domain controller or backup domain controller against any host in the domain that has an installed WINS service. Alarms when the WINS service is not executing.

Collector: WnCollector
NT_WINS_PARTNER Application Class
WpCollector

Serves as the collector for the NT_WINS_PARTNER application class.
WpReplicationFailures

Monitors the number of failures within the current WINS partner.

Collector: WpCollector
PATROL for Microsoft COM+ 1.3.00
COM_APPLICATION Application Class
ComAppCpuUsage

Displays the applications CPU usage in percent format.

Collector: ComApplicationCollector
ComApplicationCollector

Collects information for the COM_APPLICATION application class.
ComApplicationStatus

Reports whether the COM+ application is active. The parameter alarms if the application is active.

Collector: ComApplicationCollector
ComAppPrivateMemory

Displays the applications private memory usage in kilobytes.

Collector: ComApplicationCollector
ComAppThreadCount

Displays the applications thread count.

Collector: ComApplicationCollector
ComCreateReleaseChange

Displays the difference between the number of component instances released and the number of component instances created.

Collector: ComApplicationCollector
ComInstanceCreateRate

Displays the rate at which component instances are created

Collector: ComApplicationCollector
ComInstanceReleaseRate

displays the rate at which component instances are released.

Collector: ComApplicationCollector
ComTransactionAbortRate

Displays the rate at which transactions are aborted.

Collector: ComApplicationCollector
COM_DTC Application Class
DtcAbortedTrans

Reports the total number of aborted transactions. This total does not include forced aborts (manually resolved aborts). This total is reset to zero whenever you restart MS_DTC.

Collector: DtcCollector
DtcAbortedTransPerSec

Reports the rate of aborted transactions per second. This total does not include forced comments (manually resolved comments).

Collector: DtcCollector
DtcActiveTrans

Reports the current number of active transactions.

Collector: DtcCollector
DtcActiveTransMax

Reports the highest number of concurrently active transactions since the MS DTC was last started.

Collector: DtcCollector
DtcCollector

Collects information for the DTC consumer parameters.
DtcCommittedTrans

Reports the cumulative total of committed transactions. This total does not include forced commits (manually resolved commits). This total is reset to zero whenever you restart MS DTC.

Collector: DtcCollector
DtcCommittedTransPerSec

Reports the rate of committed transactions per second. This total does not include forced commits (manually resolved commits).

Collector: DtcCollector
DtcErrorLogEvents

Reports the number of error events in the Application Log of the Windows 2000 Event Viewer related to the MS DTC service since the last collection cycle. It raises an alarm if the count is over zero.

Collector: DtcCollector
DtcForcedAbortTrans

Reports the cumulative total of forced-abort transactions. This total is reset to zero whenever you restart MS DTC.

Collector: DtcCollector
DtcForcedCommitTrans

Reports the cumulative total of forced-commit transactions. This total is reset to zero whenever you restart MS DTC.

Collector: DtcCollector
DtcInDoubtTrans

Reports the number of information events in the Application Log of the Windows 2000 Event Viewer related to the MS DTC service since the last collection cycle.

Collector: DtcCollector
DtcInfoLogEvents

Reports the number of Windows 2000 information log events related to the DTC runtime environment since the last collection cycle.

Collector: DtcCollector
DtcResponseTimeAvg

Reports the average response time in milliseconds. Response time is the duration of a transaction from the point at which it began to the point at which it committed.

Collector: DtcCollector
DtcResponseTimeMax

Reports the maximum response time in milliseconds. Response time is the duration of a transaction from the point at which it began to the point at which it committed.

Collector: DtcCollector
DtcResponseTimeMin

Reports the minimum response time in milliseconds. Response time is the duration of a transaction from the point at which it began to the point at which it committed.

Collector: DtcCollector
DtcStatus

Reports the status of the DTC service and raises an error any time the service is down.

Collector: DtcCollector
DtcTransPerSec

Reports the number of transactions per second.

Collector: DtcCollector
DtcWarningLogEvents

Reports the number of warning events in the Application Log of the Windows 2000 Event Viewer related to the MS DTC service since the last collection cycle. It raises a warning if the count is over zero.

Collector: DtcCollector
COM_PLUS Application Class
ComActiveApplications

Reports the number of active COM+ applications.

Collector: ComCollector
ComCollector

Retrieves data for the COM_PLUS consumer parameters.
ComErrorLogEvents

Reports the number of error events in the Application Log of the Windows 2000 Event Viewer related to the COM+ runtime environment since the last collection cycle. It raises an alarm if the count is over zero.

Collector: ComCollector
ComEventSystemStatus

Reports the status of the COM+ Event System Service and alarms any time the service is down.

Collector: ComCollector
ComInfoLogEvents

Reports the number of information events in the Application Log of the Windows 2000 Event Viewer related to the COM+ runtime environment since the last collection cycle.

Collector: ComCollector
ComProcessCount

Reports the number of dllhost.exe processes that are running and alarms if the count goes to zero.

Collector: ComCollector
ComWarningLogEvents

Reports the number of warning events in the Application Log of the Windows 2000 Event Viewer related to the COM+ runtime environment since the last collection cycle and raises a warning if the count is over zero.

Collector: ComCollector
MTS_MTS Application Class
MtsActivePackages

Displays the number of active packages.

Collector: MtsCollector
MtsCollector

Serves as a collector for all parameters in the application class.
MtsDtcStatus

Displays whether the MS DTC service is running. If the MS DTC service is not running, the parameter is placed in an alarm state.

Collector: MtsCollector
MtsErrorLogEvents

Displays the number of error log events logged since the prior collection interval.

Collector: MtsCollector
MtsInfoLogEvents

Displays the number of information log events logged since the prior collection interval.

Collector: MtsCollector
MtsWarningLogEvents

Displays the number of warning log events logged since the prior colleciton interval.

Collector: MtsCollector
MtsProcessCount

Displays the number of mtx processes running on the agent machine.

Collector: MtsCollector
MTS_PACKAGE Application Class
MtsComCreateInstanceRate

Displays the rate at which component instances are created.

Collector: MtsPackageCollector
MtsComReleaseInstanceRate

Displays the rate at which component instances are released.

Collector: MtsPackageCollector
MtsPackageCollector

Serves as a collector for all parameters in the MTS_PACKAGE application class.
MtsPackageCpuUsage

Displays package CPU usage in percent.

Collector: MtsPackageCollector
MtsPackagePrivateMemory

Displays package private memory usage in kilobytes.

Collector: MtsPackageCollector
MtsPackageStatus

Displays whether or not the package is active.

Collector: MtsPackageCollector
MtsPackageThreadCount

Displays the package thread count.

Collector: MtsPackageCollector
MtsReleaseCreateDelta

Displays the difference between the number of component instances released and the number of component instances created.

Collector: MtsPackageCollector
MtsTransactionAbortRate

Displays the rate at which transactions are aborted.

Collector: MtsPackageCollector
PATROL for Microsoft Message Queue 1.4.00
MQ_IS Application Class
MqIsAccessCount

Reports the total number of times the MQIS was accessed.

Collector: MqIsColl
MqIsColl

Collects data for the MQ_IS application class.
MqIsErrors

Reports the total number of MQIS accesses that resulted in an error being returned to the application.

Collector: MqIsColl
MqIsReplicateIn

Reports the total number of replication requests received.

Collector: MqIsColl
MqIsReplicateOut

Reports the total number of replication requests sent.

Collector: MqIsColl
MqIsSynchIn

Reports the total number of synchronization requests received.

Collector: MqIsColl
MqIsSynchOut

Reports the total number of synchronization requests that were answered.

Collector: MqIsColl
MqIsWriteReqSent

Reports the total number of write requests sent.

Collector: MqIsColl
MQ_QUEUES Application Class
MqqQueueColl

Collects information about individual queues managed by the MSMQ service.
MqqJournalMsgBytes

Displays the number of kilobytes used by all messages in the queue.

Collector: MqqQueueColl
MqqJournalMsgCount

Displays the number of messages in the journal queue.

Collector: MqqQueueColl
MqqMessageBytes

Displays the size of all messages in the journal queue.

Collector: MqqQueueColl
MqqMessageCount

Displays the number of messages currently in the queue.

Collector: MqqQueueColl
MQ_ROUNDTRIP Application Class
MqRoundtripTime

Schedules the roundtrip MSMQ message time between the MSMQ server and another, operator-selected, MSMQ server.

Collector: MqRoundtripTime
MQ_SERVER Application Class
MqInMessageRate

Displays the rate at which messages are received by the MSMQ service.

Collector: MqServerColl
MqIPSessions

Displays the number of IP sessions connected to the MSMQ service.

Collector: MqServerColl
MqIPXSessions

Displays the number of IPX sessions connected to the MSMQ service.

Collector: MqServerColl
MqMessageBytes

Displays the size of all message queues managed by the MSMQ service.

Collector: MqServerColl
MqMessageCount

Displays the number of messages currently managed by the MSMQ service.

Collector: MqServerColl
MqMessageTime

Displays the roundtrip MSMQ message time between the MSMQ server and another, operator-selected, MSMQ server.

Collector: MqServerColl
MqOutMessageRate

Displays the rate at which messages are sent by the MSMQ service.

Collector: MqServerColl
MqServerColl

Collects information about the status of the MSMQ service.
MqStatus

Displays the status of the MSMQ service.

Collector: MqServerColl
MQ_SESSIONS Application Class
MqSessionsColl

Serves as the collector for the MQ_SESSIONS application class.
MqsInByteRate

Reports the rate at which data is being received over the MSMQ session.

Collector: MqSessionsColl
MqsInBytes

Reports the total number of bytes received during the MSMQ session.

Collector: MqSessionsColl
MqsInMsgCount

Reports the total number of messages received during the session.

Collector: MqSessionsColl
MqsInMsgRate

Reports the rate at which data is being received over the MSMQ session.

Collector: MqSessionsColl
MqsOutByteRate

Reports the rate at which data is being sent over the MSMQ session.

Collector: MqSessionsColl
MqsOutBytes

Reports the total number of bytes sent during the MSMQ session.

Collector: MqSessionsColl
MqsOutMsgCount

Reports the total count of messages sent during the session.

Collector: MqSessionsColl
MqsOutMsgRate

Reports the rate at which MSMQ messages are being sent over the MSMQ session.

Collector: MqSessionsColl
PATROL Knowledge Module for Microsoft Windows OS 3.8.02
ALL COMPUTERS Application Class
SNMPConfig

Configures the SNMP service for the computer.
SNMPStart

Attempts to start the SNMP subagent if it fails. If the start attempt is unsuccessful, the parameter tries to start the SNMP main agent.
NT_BSK Application Class
BskStatus

Displays the status of the Blue Screen detection and the status of changes made to the systems Stop error configuration parameters. This parameter can have the following values:

0 No action is necessary.
1 The system crash settings have been changed. For the new settings to take effect, the computer must be rebooted.
2 The system has crashed (blue screen). PATROL performs the actions specified by the NT_BSK application.

INET_NTS Application Class
dataRecvRate

Indicates the activity level of IIS. This parameter measures the rate at which data is received from all clients. IIS can receive data through any IIS based server including FTP and WWW. IIS4 installations may optionally include SMTP and NNTP servers.

Collector: msPerfMonitor
dataSentRate

Indicates the activity level of IIS. This parameter measures the rate at which data is sent, or transmitted, to all clients. IIS can send data through any IIS based server including FTP and WWW. IIS4 installations may optionally include SMTP and NNTP servers.

Collector: msPerfMonitor
msPerfMonitor

Collects the data for dataSentRate and dataRecvRate. To manually initiate the collection of data for dataSentRate and dataRecvRate this parameter can be updated from the PATROL Console.
serviceStatus

Measures the availability of the IIS services. This parameter contains a value from zero to one to indicate the status of the services. When all of the services are started, the value is one. When all of the services are stopped or paused, then the value is zero. If some services are started, and others are stopped or paused, the value is an average of all the services status.

Using status values of zero and one, it is very easy to obtain an availability report by looking at the average of this parameter over a period of history. For example, if the average is taken over a history of seven days, and produces the value 0.987 then the service availability is 98.7%.

The list of all IIS services is read from the configuration variable /InetNtsSetup/ServiceList.
NT_CACHE Application Class
CACCacheColl

Collects cache statistics from the cache performance objects in the Windows Performance Database.
CACcachCopyReadHitsPercent

Displays the percentage of cache copy read requests. A copy read is a file read operation that is satisfied by a memory copy from a cache page to the application's buffer.

Collector: CACCacheColl
CACcachCopyReadsPerSec

Displays the frequency of reads from cache pages that involve a memory copy of the data from the cache to the application's buffer.

Collector: CACCacheColl
NT_COMPOSITES Application Class
CPARMCollector

Collects information for the defined composite parameters.
CPARMResult

Displays the results of the composite parameter calculation for the specified composite parameter.

Collector: CPARMCollector
CPARMExpression

Displays the composite parameter definition.

Collector: CPARMCollector
CPARMGeneratedCodeText

Displays the PSL that was generated by the NT_Composites expression generator and used to determine the composite parameter value.

Collector: CPARMCollector
NT_CompositesColl Application Class
NT_CompositesColl

Collects information for the defined composite parameters.
NT_CPU Application Class
CPUprcrInterruptsPerSec

Displays the number of device interrupts encountered by the processor. An interrupt occurs when a device has completed a task or when it requires attention. Normal thread execution is suspended during interrupts. An interrupt may cause the processor to switch to another, higher priority thread.

Collector: CPUProcessorColl
CPUprcrPrivTimePercent

Displays the percentage of processor time spent in privileged mode in non-idle threads. Device drivers for most devices except graphics adapters and printers execute in privileged mode, as well as the Windows NT service layer, the executive routines, and the Windows NT kernel.

Collector: CPUProcessorColl
CPUprcrProcessorTimePercent

Displays a percentage of the time that a processor is busy executing the threads of a process. When in the alarm state, this parameter graph displays an annotation (usually denoted by *) that you can click to display the names of the top 10 processes that are using the most CPU resources.

Collector: CPUProcessorColl
CPUprcrUserTimePercent

Displays the percentage of CPU time currently being spent in user mode doing commands and tasks initiated by users. All application code and subsystem code executes in user mode. This value helps identify how much time a particular process spends executing in User versus Privileged Mode.

Collector: CPUProcessorColl
CPUProcessorColl

Collects processor statistics from the processor performance objects in the Windows Performance Database.
NT_EVINSTS Application Class
ELMError

Displays the number of error type events in each polling cycle. The ELMError parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Report the number of events that match the filter criteria during each collection period.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Error as one of the monitored event types.

Collector: ELMColl
ELMErrorNotification

Indicates immediately when an Error event has occurred. The ELMErrorNotification parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Error as one of the monitored event types.

Collector: ELMColl
ELMFailureAudit

Displays the number of failure audit type events in each polling cycle. The ELMFailureAudit parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Report the number of events that match the filter criteria during each collection period.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Failure Audit as one of the monitored event types.

Collector: ELMColl
ELMFailureAuditNotification

Indicates immediately when a Failure Audit event has occurred. The ELMFailureAuditNotification parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Failure Audit as one of the monitored event types.

Collector: ELMColl
ELMInformation

Displays the number of information type events in each polling cycle. The ELMInformation parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Report the number of events that match the filter criteria during each collection period.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Information as one of the monitored event types.

Collector: ELMColl
ELMNotification

Indicates immediately when an event of any type has occurred. The ELMNotification parameter is displayed only when you select the following option when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.

Collector: ELMColl
ELMInformationNotification

Indicates immediately when a Information event type has occurred. The ELMInformationNotification parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Information as one of the monitored event types.

Collector: ELMColl
ELMOtherTypes

Displays the number of events specified as Other that occur during each polling cycle. Events designated as Other are events of a type other than the following standard Windows event types:

Information
Warning
Error
Success Audit
Failure Audit

The ELMOtherTypes parameter is displayed only when you select the following option when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Report the number of events that match the filter criteria during each collection period.

Collector: ELMColl
ELMOtherTypesNotification

Indicates immediately when an event specified as Other has occurred. An event specified as Other is an event that is not one of the following standard Windows event types:

Information
Warning
Error
Success Audit
Failure Audit

The ELMOtherTypesNotification parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Other as one of the monitored event types.

Collector: ELMColl
ELMStatus

Displays the number of events occurring in each polling cycle, or the number of events notified by the Patrol Event Log Manager.

Collector: ELMColl
ELMSuccessAudit

Displays the number of success audit type events in each polling cycle. The ELMSuccessAudit parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Report the number of events that match the filter criteria during each collection period.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Success Audit as one of the monitored event types.

Collector: ELMColl
ElmSuccessAuditNotification

Indicates immediately when a Success Audit event has occurred. The ELMSuccessAuditNotification parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Success Audit as one of the monitored event types.

Collector: ELMColl
ELMWarning

Displays the number of warning type events during each polling cycle. The ELMWarning parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Report the number of events that match the filter criteria during each collection period.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Warning as one of the monitored event types.

Collector: ELMColl
ELMWarningNotification

Indicates immediately when a Warning event has occurred. The ELMWarningNotification parameter is displayed only when you select the following options when configuring the event filter:

From the General tab of Configure Windows Event Monitoring window, you select the option Notifiy PATROL immediately when an event matches the filter criteria.
From the Event Type tab of the Configure Windows Event Monitoring window, you select Warning as one of the monitored event types.

Collector: ELMColl
EvRptOfError

Report of the Error type events that occurred in the polling cycle.

Collector: ELMColl
EvRptOfFailureAudit

Report of Failure Audit type events that occurred during the polling cycle. The EvRptOfFailure parameter is displayed only when you select the option Write event details to text parameter.

Collector: ELMColl
EvRptOfInformation

Report of Information type events that occurred in the polling cycle. The EvRptOfInformation parameter is displayed only when you select the option Write event details to text parameter.

Collector: ELMColl
EvRptOfStatus

Displays the text output of event descriptions that occurred in the polling cycle, or the events notified by the Patrol Event Log Manager. The EvRptOfStatus parameter is displayed only when you select the following options when configuring the event filter:

From the Event Type tab of the Configure Windows Event Monitoring window, you select the option Consolidate event types when reporting results.
From the Event Handling tab of the Configure Windows Event Monitoring window, you select the option Write event details to text parameter.

Collector: ELMColl
EvRptOfSuccessAudit

Report of Success Audit type events that occurred in the polling cycle. The EvRptOfSuccessAudit parameter is displayed only when you select the option Write event details to text parameter.

Collector: ELMColl
EvRptOfWarning

Report of Warning type events that occurred in the polling cycle. The EvRptOfWarning parameter is displayed only when you select the option Write event details to text parameter.

Collector: ELMColl
EvRptOfOtherTypes

Report of events designated as Other that occur during each polling cycle. 

Collector: ELMColl
NT_EVLOGFILES Application Class
ELMColl

Collects information from the Windows Event Log.
ELMEvFileFreeSpacePercent

Displays the ratio of the free space available on the event log file to the total space allocated for the event log file. This parameter is not available if the monitored event log file is set to:

Overwrite events older than 0 days, or
Overwrite events as needed

This parameter contains a recovery action that automatically backs up and purges the event log files when ELMEvFileFreeSpacePercent enters an alarm state. PATROL does not execute this recovery action if the log is allowed to be overwritten.

Collector: ELMColl
NT_FTP Application Class
FTPFtpColl

Collects FTP statistics from the FTP performance objects in the Windows Performance Database.
FTPftpBytesRcvdPerSec

Displays the number of bytes received per second from the FTP protocol.

Collector: FTPFtpColl
FTPftpBytesSentPerSec

Displays the number of bytes sent per second using the FTP protocol.

Collector: FTPFtpColl
FTPftpBytesTotalPerSec

Displays the total rate of bytes transferred by the FTP server, including those bytes sent and received.

Collector: FTPFtpColl
FTPftpConnectionAttempts

Displays the number of FTP connection attempts that have been made.

Collector: FTPFtpColl
FTPftpCurrAnonymousUsers

Displays the number of anonymous users currently logged into the selected FTP server.

Collector: FTPFtpColl
FTPftpCurrConnections

Displays the number ofcurrent connections to the FTP server.

Collector: FTPFtpColl
FTPftpCurrNonAnonymousUsers

Displays the number ofusers, excluding anonymous users, currently logged into the selected FTP server.

Collector: FTPFtpColl
FTPftpFilesRcvd

Displays the number offiles received from the FTP protocol.

Collector: FTPFtpColl
FTPftpFilesSent

Displays the number of files sent using the FTP protocol.

Collector: FTPFtpColl
FTPftpFilesTotal

Displays the total number of files sent and received using the FTP protocol.

Collector: FTPFtpColl
FTPftpLoginAttempts

Displays the number of FTP login attempts that have been made.

Collector: FTPFtpColl
FTPftpMaxAnonymousUsers

Displays the maximum number of anonymous users allowed on the selected FTP server.

Collector: FTPFtpColl
FTPftpMaxConnections

Displays the maximum number of concurrent connections that the FTP server can handle.

Collector: FTPFtpColl
FTPftpMaxNonAnonymousUsers

Displays the maximum number of users, excluding anonymous users, allowed on the FTP server.

Collector: FTPFtpColl
FTPftpTotalAnonymousUsers

Displays the total number of anonymous users logged on the FTP server.

Collector: FTPFtpColl
FTPftpTotalNonAnonymousUsers

Displays the total number of users, excluding anonymous users, logged into the FTP server.

Collector: FTPFtpColl
NT_HEALTH Application Class
DiskUsage

Monitors the cumulative status of system disks. By default, the DiskUsage parameter enters an alarm state when disk usage on any of the system disks causes the NT_LOGICAL_DISKS\LDldFreeSpacePercent parameter to enter an alarm state.

Collector: HealthCollector
EventLogErrors

Monitors the number of event log errors recorded in all of the monitored event logs. By default, the EventLogErrors parameter enters an alarm state when the NT_EVINSTS\ELMError parameter for any of the monitored event logs enters an alarm state.

Collector: HealthCollector
HealthCollector

Collects the data and sets the values for the NT_HEALTH parameters.
HealthSummary

Displays a text parameter that shows the status of all of the parameters that the NT_HEALTH parameters gather data from.

Collector: HealthCollector
MemoryUsage

Displays the amount of memory in use. This value is calculated using the MEMmemAvailableBytes parameter and the total system memory.

Collector: HealthCollector
ProcessorUtilization

Displays the overall CPU utilization for the server. By default, the ProcessorUtilization parameter enters an alarm state when the CPU utilization of any of the system processors causes the NT_CPU\CPUprcrProcessorTimePercent parameter to enter an alarm state.

Collector: HealthCollector
ResourceContention

Monitors the server for resource contention and enters an alarm state when it detects that multiple threads are contending for a shared resource and the resource cannot respond adequately.

The ResourceContention parameter enters an alarm state when both of these conditions are met:

the NT_CPU\CPUprcrPrivTimePercent and the NT_CPU\CPUprcrUserTimePercent parameters are above 45%
the NT_CPU\CPUprcrProcessorTimePercent parameter is at 95%

Collector: HealthCollector
SystemPaging

Monitors the server for high system paging. The SystemPaging parameter appears in an alarm state when system paging is high. System paging is defined as (NT_MEMORY\MEMmemPagesInputPerSec divided by NT_MEMORY\MEMmemPageFaultsPerSec) multiplied by 100.

the NT_MEMORY\MEMmemPageFaultsPerSec parameter is greater than the NT_MEMORY\MEMmemCacheFaultsPerSec parameter
the NT_MEMORY\MEMmemPagesInputPerSec divided by the NT_MEMORY\MEMmemPageFaultsPerSec is greater than 0.10

Collector: HealthCollector
NT_ICMP Application Class
ICMPIcmpColl

Collects ICMP statistics from the NT ICMP object.
ICMPicmpMessagesOutboundErrors

Displays the number of ICMP messages that this entity did not send due to problems discovered within ICMP such as lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram. In some implementations there may be no types of error that contribute to this counter's value.

Collector: ICMPIcmpColl
ICMPicmpMessagesPerSec

Displays the total rate that ICMP messages are received and sent by the entity. The rate includes those messages received or sent in error.

Collector: ICMPIcmpColl
ICMPicmpMessagesRcvdErrors

Displays the number of ICMP messages that the entity received but determined as having errors (bad ICMP checksums, bad length, etc.).

Collector: ICMPIcmpColl
ICMPicmpMessagesRcvdPerSec

Displays the rate that ICMP messages are received by the entity. The rate includes those messages received in error.

Collector: ICMPIcmpColl
ICMPicmpMessagesSentPerSec

Displays the rate at which sending ICMP messages is attempted by the entity. The rate includes those messages sent in error.

Collector: ICMPIcmpColl
ICMPicmpRcvdDestUnreachable

DIsplays the number of ICMP Destination Unreachable messages received.

Collector: ICMPIcmpColl
NT_IP Application Class
IPIpColl

Collects TCP/IP statistics.
IPipDatagsForwardedPerSec

Displays the rate of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities that do not act as IP Gateways, this rate will include only those packets that were Source-Routed via this entity, and the Source-Route option processing was successful.

Collector: IPIpColl
IPipDatagsOutboundDiscarded

Displays the number of output IP datagrams for which no problems were encountered to prevent their transmission to their destination, but which were discarded (for example, because of lack of buffer space.) This counter would include datagrams counted in Datagrams Forwarded if any such packets met this (discretionary) discard criterion.

Collector: IPIpColl
IPipDatagsOutboundNoRoute

Displays the number of IP datagrams discarded because no route could be found to transmit them to their destination. This value includes any packets counted in Datagrams Forwarded that meet this `no route' criterion.

Collector: IPIpColl
IPipDatagsRcvdAddressErrors

Displays the number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This value includes invalid addresses (e.g., 0.0. 0.0) and addresses of unsupported Classes (e.g., Class E). For entities that are not IP Gateways and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.

Collector: IPIpColl
IPipDatagsRcvdDeliveredPerSec

Displays the rate that input datagrams are successfully delivered to IP user-protocols (including ICMP).

Collector: IPIpColl
IPipDatagsRcvdDiscarded

Displays the number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). This value does not include any datagrams discarded while awaiting re-assembly.

Collector: IPIpColl
IPipDatagsRcvdHeaderErrors

Displays the number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.

Collector: IPIpColl
IPipDatagsRcvdPerSec

Displays the rates that IP datagrams are received from the interfaces, including those in error.

Collector: IPIpColl
IPipDatagsRcvdUnknownProtocol

Displays the number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.

Collector: IPIpColl
IPipDatagsSentPerSec

Displays the rate that IP datagrams are supplied to IP for transmission by local IP user-protocols (including ICMP). It does not include any datagrams counted in IPipDatagsForwardedPerSec.

Collector: IPIpColl
IPipFragFailures

Displays the number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their `Don't Fragment' flag was set. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPIpColl
IPipFragedDatagsPerSec

Displays the rate that datagrams are successfully fragmented at this entity. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPIpColl
IPipFragsCreatedPerSec

Displays the rate that IP datagram fragments have been generated as a result of fragmentation at this entity. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPIpColl
IPipFragsRcvdPerSec

Displays the rate that IP fragments that need to be re-assembled at this entity are received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPIpColl
IPipFragsReassembledPerSec

Displays the rate that IP fragments are successfully re-assembled. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPIpColl
IPipFragsReassemblyFailures

Displays the number of failures detected by the IP re-assembly algorithm (for whatever reason: timed out, errors, etc.) This is not necessarily a count of discarded IP fragments since some algorithms (notably RFC 815) can lose track of the number of fragments by combining them as they are received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPIpColl
NT_IPX Application Class
IPXIpxColl

Collects IPX statistics from the IPX performance objects in the Windows Performance Database.
IPXipxBytesTotalPerSec

Displays the frame bytes and datagram bytes per second. This is the total rate of bytes sent to or received from the network by the protocol, counting only the bytes in frames (packets) which carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxConnectionsCanceled

Displays the number of connections that were canceled.

Collector: IPXIpxColl
IPXipxConnectionsNoRetries

Displays the number of connections that were successfully made on the first try.

Collector: IPXIpxColl
IPXipxConnectionsOpen

Displays the number of connections currently open for this protocol.

Collector: IPXIpxColl
IPXipxConnectionSessTimeouts

Displays the number of connections that were dropped due to a session timeout. This number is an accumulator and shows a running total.

Collector: IPXIpxColl
IPXipxConnectionsWithRetries

Displays the number of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed.

Collector: IPXIpxColl
IPXipxDatagBytesPerSec

Displays the datagram bytes per second that are processed by the computer. This number is the sum of datagrams bytes that are sent or received. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDatagBytesRcvdPerSec

Displays the datagram bytes per second that are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDatagBytesSentPerSec

Displays the datagram bytes per second that are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDatagsPerSec

Displays the datagrams per second that are processed. This number is the sum of datagrams sent and received. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDatagsRcvdPerSec

Displays the datagrams per second that are received by the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDatagsSentPerSec

Displays the datagrams per second that are sent from the computer. A datagram is a connectionless packet whose delivery to a remote computer is not guaranteed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDisconnectsLocal

Displays the number of session disconnections that were initiated by the local computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxDisconnectsRemote

Displays the number of session disconnections that were initiated by the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxExpirationsAck

Displays the number of T2 timer expirations. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxExpirationsResponse

Displays the number of T2 timer expirations. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFailuresAdapter

Displays the number of connections that were dropped due to an adapter failure. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFailuresLink

Displays the number of connections that were dropped due to a link failure. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFailuresNoListen

Displays the number of connections that were rejected because the remote computer was not listening for connection requests. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFailuresNotFound

Displays the number of connection attempts that failed because the remote computer could not be found. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFailuresResourceLocal

Displays the number of connections that failed because of resource problems or shortages on the local computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFailuresResourceRemote

Displays the number of connections that failed because of resource problems or shortages on the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFrameBytesRcvdPerSec

Displays the data bytes per second received by the computer. This number only counts the frames (packets) that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFrameBytesRejPerSec

Displays the data bytes per second that are rejected. This number only counts the bytes in data frames, or packets, that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFrameBytesResentPerSec

Displays the data bytes per second re-sent by the computer. This number only counts the bytes in frames that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFrameBytesPerSec

Displays the data bytes per second that are processed by the computer. This counter is the sum of data frame bytes sent and received. This number only counts the frames or packets that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFrameBytesSentPerSec

Displays the data bytes per second that are sent by the computer. This number only counts the bytes in frames (packets) that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFramesPerSec

Displays the data frames (packets) per second that are processed by the computer. This number only counts the frames or packets that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFramesRcvdPerSec

Displays the frames per second that are received by the computer. This number includes both control and data frames. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFramesRejPerSec

Displays the data frames per second that are rejected. This number only counts the frames (packets) that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFramesResentPerSec

Displays the data frames (packets) per second that are re-sent by the computer. This number only counts the frames or packets that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxFramesSentPerSec

Displays the rate that data frames are sent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: IPXIpxColl
IPXipxPktsPerSec

Displays the rate that packets are processed by the computer. This count is the sum of Packets Sent and Packets Received per second. This value includes all packets processed, control and data.

Collector: IPXIpxColl
IPXipxPktsRcvdPerSec

Displays the rate at which the computer receives packets. This value includes all packets (control and data) processed.

Collector: IPXIpxColl
IPXipxPktsSentPerSec

Displays the rate that packets are sent by the computer. This value includes all packets (control and data) processed.

Collector: IPXIpxColl
NT_JOBS Application Class
JobActiveProcessCount

Displays the number of active processes in the job object. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobKernelTime

Displays job kernel time (in seconds) for the current period. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobPageFaultsPerSec

Displays the number of page faults per second. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobPercentActProcessLimit

Displays the number of active processes in the job object. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobPercentMemoryLimit

Displays the memory usage of a job as a percentage of the total job memory limit. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobPercentUserTimeLimit

Displays the total job user time as a percentage of the job user time limit. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobPrivTimePercent

Displays the percentage of total time that the job spent executing in privileged mode. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobProcessorTime

Displays job processor time (in seconds) for this period. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobProcessorTimePercent

Displays the amount of processor time used by a job versus total processor time. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobRulesChanged

Displays the number of changed job rules. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobTerminatedProcessCount

Displays the number of processes terminated because of a limit violation. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobTotalKernelTime

Displays the total job kernel time in seconds. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobTotalPageFileSize

Displays the total page file size of a job in kilobytes. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobTotalProcessCount

Displays the total number of processes (active and terminated) associated with the job. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobTotalProcessorTime

Displays the total processor time (in seconds) used by the job. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobTotalUserTime

Displays the total user time of a job in seconds. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobUserTime

Displays a jobs user time in seconds for the current period. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
JobUserTimePercent

Displays the amount of time a job spent executing in user mode, versus the total amount of time the job spent executing. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
NT_JOBS_CONTAINER Application Class
JobsObjectColl

Collects data for all instances of the NT_JOBS application classes.

NT_JOBS_PROCESS Application Class
PROCDown

Displays the status of a process. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCHandleCount

Displays the number of handles associated with a process. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCIODataBytesPerSec

Displays the rate at which the process is issuing bytes to I/O operations, including file, network, and device I/O operations. I/O operations that involve control operations are not included. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCIODataOpersPerSec

Displays the rate at which the process is issuing read and write I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCIOReadBytesPerSec

Displays the rate at which the process is issuing read bytes from I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCIOReadOpersPerSec

Displays the rate at which the process is issuing read I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCIOWriteBytesPerSec

Displays the rate at which the process is writing bytes to I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCIOWriteOpersPerSec

Displays the rate at which the process is issuing write I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCMemoryLimitExceed

Reports whether the processor memory limit for a job has been exceeded. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCPageFaultsPerSec

Displays the number of page faults per second for the process. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCPageFileBytes

Displays the size of the processs page file, in kilobytes. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCPercentMemoryLimit

Displays the percentage of memory used by the process versus the total memory limit. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCPercentUserTimeLImit

Displays the percentage of time used by the process versus the user time limit. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCPrivTimePercent

Displays the percentage of time that the process spent executing in privileged mode. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCProcessorTimePercent

Displays the percentage of processor time used to complete a process. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCRunning

Displays the status of a process. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCStatus

Displays the process status. By tracking this parameter over time, you can determine when the process went down or was restarted. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCThreadCount

Displays the thread count for the process. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCUserTimeLimitExceed

Indicates whether a process exceeded the set user time limit. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCUserTimePercent

Displays the percentage of time that a process executed in user time mode. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl
PROCWorkingSet

Displays the working set size (in kilobytes) used by the process during the polling cycle. This parameter is available only on Windows 2000 systems.

Collector: JobsObjectColl

Collects logical disk statistics from the logical disk performance objects in the Windows Performance Database.
NT_LOGICAL_DISKS Application Class
LDldDiskQueueLength

Displays the number of requests outstanding on the disk, including requests currently in service. This is an instantaneous value at the time the data was collected.

Collector: LDLogicalDiskColll
LDldDiskTimePercent

Displays the percentage of elapsed time that the selected disk drive is busy servicing read or write requests.

Collector: LDLogicalDiskColl
LDldFreeMegabytes

Displays the amount of unused space on the disk drive in megabytes (MB). Applications that write to drives with limited space can cause operating system stress and possible failures. By default, PATROL takes no action when this parameter displays an alarm or warning.

Collector: LDLogicalDiskColl
LDldFreeSpacePercent

Displays the percentage of free space available on the selected logical disk. Applications that write to drives with limited space can cause operating system stress and possible failures. This parameter contains a recovery action that automatically clears the temp directory when LdldFreeSpacePercent enters an alarm state.

Collector: LDLogicalDiskColl
LDldIdleTimePercent

Displays the percentage of time that the disk was idle.

Collector: LDLogicalDiskColl

NT_LOGICAL_DISKS_CONTAINER Application Class
LDDiskQuotaColl

Collects data for consumer parameters in the NT_LOGICAL_DISKS application class.
LDLogicalDiskColl

NT_MEMORY Application Class
MEMMemoryColl

Collects memory statistics from the memory performance objects in the Windows Performance Database.
MEMmemAvailableBytes

Displays the number of megabytes of physical memory currently available to processes, but is not related to the amount of physical memory installed in your server.

The value of MEMmemAvailableBytes is calculated by adding the space on the Zeroed, Free, and Standby memory lists. Zeroed memory is filled with zeros to prevent later processes from seeing data used by a previous process. Free memory is ready for use by any process. Standby memory has been removed from a process's working set on route to disk but is still available for recall.

Collector: MEMMemoryColl
MEMmemCacheBytes

Displays the number of megabytes currently in use by the system cache. The system cache is used to buffer data retrieved from disk or LAN. The system cache uses memory not in use by active processes in the computer.

Collector: MEMMemoryColl
MEMmemCacheFaultsPerSec

Displays the frequency of cache faults. Cache faults occur whenever the cache manager does not find a file's page in the immediate cache.

Collector: MEMMemoryColl
MEMmemPageFaultsPerSec

Displays the number of hard and soft page faults in the processor.

Collector: MEMMemoryColl
MEMmemPagesInputPerSec

Displays the number of pages read from the disk to resolve memory references to pages that were not in memory at the time of the reference. This parameter also includes paging activity incurred by the system cache accessing file data for applications. This activity is referred to as hard page faults.

Collector: MEMMemoryColl
MEMmemPagesOutputPerSec

Displays the number of pages written to disk because the pages have been modified in main memory.

Collector: MEMMemoryColl
MEMmemPagesPerSec

Displays the number of hard page faults for the processor, and the value often determines whether or not your system needs more RAM.

The number of hard page faults is equal to the number of pages read from, or written to, disk to resolve memory references to pages that were not in memory at the time of the reference. The parameters value is the sum of the MEMmemPagesInputPerSec and MEMmemPagesOutputPerSec parameters.

Collector: MEMMemoryColl
NT_NETBEUI Application Class
BEUNetBEUIColl

Collects NetBEUI statistics from the NetBEUI performance objects in the Windows Performance Database.
BEUbeuBytesTotalPerSec

Displays the total rate of bytes sent to or received from the network, including only the packets that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuConnectionsCanceled

Displays the number of connections canceled.

Collector: BEUNetBEUIColl
BEUbeuConnectionSessTimeouts

Displays the number of connections that were dropped because the current session timed out.

Collector: BEUNetBEUIColl
BEUbeuConnectionsNoRetries

Displays the number of connections that were successful on the first try.

Collector: BEUNetBEUIColl
BEUbeuConnectionsOpen

Displays the number of connections that are currently open.

Collector: BEUNetBEUIColl
BEUbeuConnectionsWithRetries

Displays the total count of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed. This value is a running total.

Collector: BEUNetBEUIColl
BEUbeuDatagBytesPerSec

Displays the rate that datagram bytes are processed by the computer. This value is the sum of datagram bytes that are sent and received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuDatagBytesRcvdPerSec

Displays the rate that datagram bytes are received by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuDatagBytesSentPerSec

Displays the rate that datagram bytes are sent from the computer.

Collector: BEUNetBEUIColl
BEUbeuDatagsPerSec

Displays the rate that datagrams are processed by the computer. This value is the sum of datagrams that are sent and received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuDatagsRcvdPerSec

Displays the rate at which the computer receives datagrams. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuDisconnectsLocal

Displays the number of disconnected sessions that were initiated by the local computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuDisconnectsRemote

Displays the number of disconnected sessions that were initiated by a remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFailuresAdapter

Displays the number of connections that were rejected as a result of a failed adapter. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFailuresLink

Displays the number of connections that were rejected as a result of a failed link. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFailuresNoListen

Displays the number of connections that failed because the remote computer was not listening for connection requests. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFailuresNotFound

Displays the number of connections that failed because the remote computer could not be found. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFailuresResourceLocal

Displays the number of connections that failed due to resource problems or shortages on the local computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFailuresResourceRemote

Displays the number of connections that failed due to resource problems or shortages on the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFrameBytesPerSec

Displays the rate that data bytes are processed by the computer. This value is the sum of data frame bytes sent and received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFrameBytesRcvdPerSec

Displays the rate at which the computer receives data bytes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFrameBytesRejPerSec

Displays the rate at which the computer rejected data bytes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFrameBytesResentPerSec

Displays the rate that data bytes are resent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFrameBytesSentPerSec

Displays the rate that data bytes are sent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFramesPerSec

Displays the rate at which the computer processes data frames. This value is the sum of data frames that are sent and received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFramesRcvdPerSec

Displays the rate at which the computer receives data frames. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFramesRejPerSec

Displays the rate that data frames, or packets, are rejected by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFramesResentPerSec

Displays the rate that data frames, or packets, are resent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuFramesSentPerSec

Displays the rate that data frames are sent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuPiggybackAckQuePerSec

Displays the rate that piggybacked acknowledgements are queued. A piggyback acknowledgement is an acknowledgement to a received packet that is sent along in an outgoing packet to the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuPiggybackAckTimeouts

Displays the number of times that a piggyback acknowledgment could not be sent because there was no outgoing packet to the remote on which to piggyback. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuPktsPerSec

Displays the rate at which the computer processes packets. This value is the sum of data and control packets that are sent and received.

Collector: BEUNetBEUIColl
BEUbeuPktsRcvdPerSec

Displays the rate at which the computer receives packets. This value is the sum of data and control packets.

Collector: BEUNetBEUIColl
BEUbeuPktsSentPerSec

Displays the rate that packets are sent by the computer. This value is the sum of data and control packets.

Collector: BEUNetBEUIColl
BEUbeuWindowSendAve

Displays the running average number of data bytes that were sent before waiting for an acknowledgment from the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
BEUbeuWindowSendMaximum

Displays the maximum number of data bytes that will be sent before waiting for an acknowlegment from the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BEUNetBEUIColl
NT_NETBIOS Application Class
BIONetBIOSColl

Collects NetBios statistics from the NWLink NetBIOS performance objects in the Windows Performance Database.
BIObioBytesTotalPerSec

Displays the rate of bytes sent to or received from the network, but only counts the bytes in frames, or packets, that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioConnectionSessTimeouts

Displays the number of connections that were dropped due to a session timeout.

Collector: BIONetBIOSColl
BIObioConnectionsCanceled

Displays the number of connections that were canceled.

Collector: BIONetBIOSColl
BIObioConnectionsNoRetries

Displays the total number of connections that were successfully made on the first try.

Collector: BIONetBIOSColl
BIObioConnectionsOarepen

Displays the number of connections currently open for this protocol.

Collector: BIONetBIOSColl
BIObioConnectionsWithRetries

Displays the number of connections that were made after retrying the attempt. A retry occurs when the first connection attempt failed. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDatagBytesPerSec

Displays the rate that datagram bytes are processed by the computer. This value is the sum of datagram bytes that are sent and received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDatagBytesRcvdPerSec

Displays the rate that datagram bytes are received by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDatagBytesSentPerSec

Displays the rate that datagram bytes are sent from the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDatagsPerSec

Displays the rate at which the computer processes datagrams. This value is the sum of datagrams that are sent and received.This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDatagsRcvdPerSec

Displays the rate at which the computer receives datagrams. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDatagsSentPerSec

Displays the rate that datagrams are sent from the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDisconnectsLocal

Displays the number of session disconnections that were initiated by the local computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioDisconnectsRemote

Displays the number of session disconnections that were initiated by the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioExpirationsAck

Displays the count of T2 timer expirations. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioExpirationsResponse

Displays the count of T1 timer expirations. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFailuresAdapter

Displays the number of connections that were dropped due to an adapter failure. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFailuresLink

Displays the number of connections that were dropped due to a link failure. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFailuresNoListen

Displays the number of connections that were rejected because the remote computer was not listening for connection requests. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFailuresNotFound

Displays the number of connection attempts that failed because the remote computer could not be found. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFailuresResourceLocal

Displays the number of connections that failed because of resource problems or shortages on the local computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFailuresResourceRemote

Displays the number of connections that failed because of resource problems or shortages on the remote computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFrameBytesPerSec

Displays the rate at which the computer processes data bytes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFrameBytesRcvdPerSec

Displays the rate at which the computer receives data bytes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFrameBytesRejPerSec

Displays the number of data bytes per second that are rejected. This value only counts the bytes in data frames (packets) that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFrameBytesResentPerSec

Displays the rate that data bytes are re-sent by the computer. This value only counts the bytes in frames that carry data.

Collector: BIONetBIOSColl
BIObioFrameBytesSentPerSec

Displays the rate that data bytes are sent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFramesPerSec

Displays the rate that data frames are processed by the computer. This value is the sum of data frames that are sent and received. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFramesRcvdPerSec

Displays the rate that data frames are received by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFramesRejPerSec

Displays the rate that data frames are rejected. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFramesResentPerSec

Displays the number of data frames (packets) per second that are re-sent by the computer. This value only counts the frames or packets that carry data. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioFramesSentPerSec

Displays the rate that data frames are sent by the computer. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: BIONetBIOSColl
BIObioPktsPerSec

Displays the rate that Redirector is processing data packets. One packet usually includes many bytes. Hopefully each packet has protocol overhead. You can determine the efficiency of this path by dividing the Bytes/sec by this counter to determine the average number of bytes transferred/packet. You can also divide this counter by Operations/sec to determine the average number of packets per operation, another measure of efficiency.

Collector: BIONetBIOSColl
BIObioPktsRcvdPerSec

Displays the rate that packets are received by the computer. This counter is the sum of data and control packets.

Collector: BIONetBIOSColl
BIObioPktsSentPerSec

Displays the rate that packets are sent by the computer. This counter is the sum of data and control packets.

Collector: BIONetBIOSColl
NT_NETWORK Application Class
NETNetworkInterfaceColl

Collects network interface statistics from the network interface performance objects in the Windows Performance Database.
NETniBytesRcvdPerSec

Displays the rate that bytes are received on the interface; this rate includes framing characters. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: NETNetworkInterfaceColl
NETniBytesSentPerSec

Displays the rate that bytes are sent on the interface; this rate includes framing characters. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: NETNetworkInterfaceColl
NETniBytesTotalPerSec

Displays the rate that bytes are sent and received on the interface; this rate includes framing characters. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: NETNetworkInterfaceColl
NETniCurrentBandwidth

Displays an estimate of the computers current bandwidth in bits per second (bps). This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: NETNetworkInterfaceColl
NETniOutputQueueLength

Displays the length in packets of the output packet queue and can indicate network bottlenecks. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: NETNetworkInterfaceColl
NETniPktsOutboundErrors

Displays the outbound packets that could not be sent as a result of errors.

Collector: NETNetworkInterfaceColl
NETniPcktsPerSec

Displays the rate that packets are sent and received on the network.

Collector: NETNetworkInterfaceColl
NETniPcktsRcvdPerSec

Displays the rate that packets are received on the network.

Collector: NETNetworkInterfaceColl
NETniPcktsSentPerSec

Displays the rate that packets are sent on the network.

Collector: NETNetworkInterfaceColl
NETniPktsRcvdErrors

Displays the inbound packets that contained errors. As a result, the error packets were not delivered to a higher-layer protocol.

Collector: NETNetworkInterfaceColl
NT_NTFS_JOURNAL Application Class
LDJournalStatistics

Displays statistics for the journal change instance.

Collector: NA
NT_NTFS_MOUNT Application Class
LDldDiskQueueLength

Displays the number of requests outstanding on the disk, including requests currently in service. This is an instantaneous value at the time the data was collected.

Collector: LDLogicalDiskColll
LDldDiskTimePercent

Displays the percentage of elapsed time that the selected disk drive is busy servicing read or write requests.

Collector: LDLogicalDiskColl
LDldFreeMegabytes

Displays the amount of unused space on the disk drive in megabytes (MB). Applications that write to drives with limited space can cause operating system stress and possible failures. By default, PATROL takes no action when this parameter displays an alarm or warning.

Collector: LDLogicalDiskColl
LDldFreeSpacePercent

Displays the percentage of free space available on the selected logical disk. Applications that write to drives with limited space can cause operating system stress and possible failures. This parameter contains a recovery action that automatically clears the temp directory when LdldFreeSpacePercent enters an alarm state.

Collector: LDLogicalDiskColl
LDldIdleTimePercent

Displays the percentage of time that the disk was idle.

Collector: LDLogicalDiskColl
NT_NTFS_QUOT A Application Class
LDQuotaPercentageUsed

Displays the percentage of user disk quota that has been used.

Collector: LDDiskQuotaColl
LDQuotaUserInformation

Displays the disk quota user information.

Collector: LDDiskQuotaColl
LDQuotaUserQuotaUsed

Displays the amount (in megabytes) of user disk quota that has been used.

Collector: LDDiskQuotaColl
NT_OBJECT Application Class
SYSObjectsColl

Collects object statistics from the object performance objects in the Windows Performance Database.
NT_PAGEFILE Application Class
PAGEBadConfiguration

A text parameter that displays error messages when the total page size is smaller than the real memory in the system. If the real memory on the system is 2GB or greater, the PAGEBadConfiguration parameter is not active. To disable this parameter, set the following pconfig variable as shown:

/NTOSKM/Pagefile/page_bad_config_switch = no

Collector: PAGEPageColl
PAGEPageColl

Collects paging statistics from the paging file performance objects in the Windows Performance Database.
PAGEpgUsagePercent

Displays the percentage of the page file currently in use.

Collector: PAGEPageColl
PAGEpgUsagePercentTotal

Displays the percentage of the page file currently in use. This value is an average percentage of all the page files on the system. The parameter PAGEpgUsagePercent shows individual page file usage.

Collector: PAGEPageColl
NT_PHYSICAL_DISKS Application Class
PDMissingPerfObject

Displays text data about the missing physical disk performance object

Collector: PDPhysicalDiskColl
PDPhysicalDiskColl

Collects physical disk statistics from the physical disk performance objects in the Windows Performance Database.
PDpdDiskQueueLength

Displays the number of requests outstanding on the disk at the time the performance data is collected.

Collector: PDPhysicalDiskColl
PDpdDiskTimePercent

Displays the percentage of elapsed time that the disk spends servicing read or write requests. Good disk performance enhances virtual memory performance and reduces the elapsed time required to load programs that perform a large number of I/O requests. Disk performance may be impacted by a shortage of physical memory.

Collector: PDPhysicalDiskColl
NT_PRINTER_CONTAINER Application Class
NtprColl

Collects printer statistics.
NT_PRINTER Application Class
PrAccessFailed

Displays a stoplight indicating that access to the printer failed. This parameter is not displayed if the printer was accessed successfully.

Collector: NtprColl
PrAverageNumberOfPages

Displays the average number of pages for jobs that are currently in a print queue.

Collector: NtprColl
PrCreated

Monitors when a new printer is created for the host.

Collector: NtprColl
PrDestroyed

Monitors when a new printer is removed from the host.

Collector: NtprColl
PrError

Displays a stoplight indicating that the printer is in an error state. This parameter is not displayed if the printer is not in error.

Collector: NtprColl
PrJobStalled

Displays a stoplight indicating that one or more jobs have been in the printer queue longer than the WARN or ALARM threshold. If the printer is offline, PATROL does not display this parameter. The default WARN and ALARM thresholds are 2 and 4 hours respectively. To change the WARN or ALARM thresholds, right click the top-level NT_PRINTER_CONTAINER application and choose KM Commands => Alarm Threshold from the pop-up menu.

Collector: NtprColl
PrNumberOfJobs

Displays the number of jobs currently queued on a printer.

Collector: NtprColl
PrOffline

Displays a stoplight indicating that the printer is offline. This parameter is not displayed if the printer is not online.

Collector: NtprColl
PrOnline

Displays a stoplight indicating that the printer is online. This parameter is not displayed if the printer is not online.

Collector: NtprColl
PrOtherStatus

Displays a text message if the printer status is not indicated by one of the stoplight printer parameters; that is, PrAccessFailed, PrError, PrOffline, PrOnline, or PrOutofPaper.

Collector: NtprColl
PrOutofPaper

Displays a stoplight indicating that the printer is out of paper. This parameter is not displayed if the printer is not out of paper.

Collector: NtprColl
PrPaused

Displays a stoplight indicating that the printer is paused. This parameter is not displayed if the printer is not paused.

Collector: NtprColl
PrPendingDeletion

Displays a stoplight indicating that the printer has pending deletion of jobs. This parameter is not displayed if the printer is not in a pending deletion state.

Collector: NtprColl
PrServerUnknown

Displays a text message indicating that a printer could not be found, or that the printer name is unknown.

Collector: NtprColl
PrStatus

Displays the current status of a printer.

Collector: NtprColl
NT_PROCESS Application Class
PROCDown

Indicates that the associated process is not running. This parameter appears and is active only when the associated process is down (not running).

Collector: PROCProcessColl
PROCIODataBytesPerSec

Displays the rate at which the process is issuing bytes to I/O operations, including file, network, and device I/O operations. I/O operations that involve control operations are not included. This parameter is available only on Windows 2000 systems.

Collector: PROCProcessColl
PROCIODataOpersPerSec

Displays the rate at which the process is issuing read and write I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: PROCProcessColl
PROCIOReadBytesPerSec

Displays the rate at which the process is issuing read bytes from I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: PROCProcessColl
PROCIOReadOpersPerSec

Displays the rate at which the process is issuing read I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: PROCProcessColl
PROCIOWriteBytesPerSec

Displays the rate at which the process is writing bytes to I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: PROCProcessColl
PROCIOWriteOpersPerSec

Displays the rate at which the process is issuing write
I/O operations, including file, network, and device I/O operations. This parameter is available only on Windows 2000 systems.

Collector: PROCProcessColl
PROCPageFaultsPerSec

Displays the number of page faults per second by the threads executing in this process. A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory.

Collector: PROCProcessColl
PROCPageFileBytes

Displays the current number of bytes this process has used in the paging file.

Collector: PROCProcessColl
PROCPrivTimePercent

Displays the percentage of elapsed time that this process's threads have spent executing code in privileged mode.

Collector: PROCProcessColl
PROCProcessColl

Collects process statistics from the process performance objects in the Windows Performance Database.
PROCProcessorTimePercent

Displays the percentage of elapsed time the selected process used the processor to execute instructions. Use this parameter to learn the distribution of processor time between processes. This parameter contains a recovery action that automatically attempts to kill a process when PROCProcessorTimePercent is in alarm for a specified amount of time.

Collector: PROCProcessColl
PROCRunning

Indicates that the associated process is running. This parameter appears and is active only when the associated process is running.

Collector: PROCProcessColl
PROCStatus

Displays the status of the associated process. This parameter has the following values:

0 indicates that the process is running
1 indicates that the process is down
2 process is running, but this is an undesirable state and warrants an alarm

Collector: PROCProcessColl
PROCThreadCount

Displays the number of threads currently active in this process. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: PROCProcessColl
PROCUserTimePercent

Displays the percentage of elapsed time that this process's threads have spent executing code in user mode.

Collector: PROCProcessColl
PROCWorkingSet

Displays the current number of bytes in the working set of this process. The working set is the set of memory pages touched recently by the threads in the process.

Collector: PROCProcessColl
NT_PROCESS_CONTAINER Application Class
PROCTopProcs

Displays the 10 processes that use the most CPU time. The parameter is updated in each polling cycle. The process list is added to the annotations for PROCprocProcessorTimePercent for alarm and warning states.

Collector: PROCProcessColl
NT_PROCESS_GROUP Application Class
PROCActiveProcessCount

Displays the number of the active processes in the process group.

Collector: PROCProcessColl
NT_REGISTRY Application Class
RegistryCollector

Collects data for NT_REGISTRY consumer parameters.
RegQuotaInUsePercent

Displays the percentage of Registry quota being used. If the value of this parameter is consistently higher than the Warning threshold, you should increase the maximum size of the Registry.

Collector: RegistryCollector
NT_REGISTRY_GROUP Application Class
Report

Reports all update activities of the keys in the group.

Collector: RegistryCollector
Total_RegSetValue

Tracks set value activities of the keys in the group.

Collector: RegistryCollector
Total_RegDeleteValue

Tracks delete value activities of the keys in the group.

Collector: RegistryCollector
Total_RegCreateKey

Tracks create key activities of the keys in the group.

Collector: RegistryCollector
Total_RegDeleteKey

Tracks delete key activities of the keys in the group.

Collector: RegistryCollector
Total_UpdateFrequency

Tracks all update activities of the keys in the group.

Collector: RegistryCollector
NT_REGISTRY_GROUP_NO_ALARM Application Class
Report

Reports the all update activities of the keys in the group.

Collector: RegistryCollector
Total_RegSetValue

Tracks Set Value activities of the keys in the group.

Collector: RegistryCollector
Total_RegDeleteValue

Tracks delete value activities of the keys in the group.

Collector: RegistryCollector
Total_RegCreateKey

Tracks create key activities of the keys in the group.

Collector: RegistryCollector
Total_RegDeleteKey

Tracks delete key activities of the keys in the group.

Collector: RegistryCollector
Total_UpdateFrequency

Tracks all update activities of the keys in the group.

Collector: RegistryCollector
NT_SECURITY Application Class
SECsvrErrorsAccessPermissions

Displays the number of times people attempted to open files and failed because of insufficient permissions to the file. A high number of failures can indicate that someone is trying to randomly access files that are not adequately protected.

Collector: SVRServerColl
SECsvrErrorsGrantedAccess

Displays the number of times people attempted to open files and were denied. A high number of denied-access errors can indicate that someone is attempting to access files without the correct authorization.

Collector: SVRServerColl
SECsvrErrorsLogon

Displays the total number of failed login attempts to the server since the system started. A high number of failed logon attempts can indicate that someone is trying to guess passwords, which could pose a breach in the security of the server.

Collector: SVRServerColl
SECsvrErrorsLogonDelta

Displays the number of failed logon attempts to the server during each collection period. A high number of failed logon attempts can indicate that someone is trying to guess passwords, possibly using a password-cracking program, which could pose a breach in the security of the server.

Collector: SVRServerColl
NT_SERVER Application Class
SVRServerColl

Collects server statistics from the server performance objects in the Windows Performance Database.
SVRsvrBytesTotalPerSec

Displays the number of bytes the server has sent to and received from the network. This value provides an overall indication of how busy the server is. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SVRServerColl
SVRsvrContextBlksQueuedPerSec

Displays the rate (in seconds) at which that work context blocks were placed on the server's FSP queue to await server action. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SVRServerColl
SVRsvrServerSessions

Displays the number of sessions currently active in the server. This value indicates current server activity.

Collector: SVRServerColl
SVRsvrSessionsErroredOut

Displays the number of sessions that have been closed because of unexpected error conditions. This value indicates how frequently network problems are causing dropped sessions on the server.

Collector: SVRServerColl
SVRsvrSessionsForcedOff

Displays the number of sessions that have been forced to logoff.

Collector: SVRServerColl
SVRsvrSessionsLoggedOff

Displays the number of sessions that have terminated normally. Use this measurement with SVRsvrSessionsErroredOut and SVRsvrSessionsTimedOut to determine the ratio between error or timed-out sessions to normal terminations. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SVRServerColl
SVRsvrSessionsTimedOut

Displays the number of sessions that were closed because their idle time exceeded the auto-disconnect parameter for the server.

Collector: SVRServerColl
NT_SERVICES Application Class
Note:Only one of the following parameters are active at any given time:

SvcContinuePending
SvcDown
SvcPause
SvcPausePending
SvcRunning
SvcStartPending
SvcStopPending
SvcNotResponding

ServiceStatus

Indicates whether a service is up or down. By default, when a service is stopped, this parameter enters an Alarm state. However, for a particular monitored service, you can specify that the parameter enters a Warn state instead. For more information about changing the default behavior, see the PATROL KM for Windows OS online Help.

The status levels are:
0 = running
1 = start pending
2 = stop pending (first time)
3 = pause pending (first time)
4 = continue pending (first time)
5 = pause
6 = start pending (after first time)
7 = stop pending (after first time)
8 = pause pending (after first time)
9 = continue pending (after first time)
10 = stopped
11 = status unknown (If ServiceStatus has this value, the parameter SvcUnkownStatus is displayed in an alarm state.)

Collector: NT_SERVICES Application Discovery
SvcContinuePending

Indicates that the status of the service is Continue Pending.

Collector: NT_SERVICES Application Discovery
SvcDown

Indicates that the service is down.

Collector: NT_SERVICES Application Discovery
SvcNotResponding

Indicates that the service is not responding. This parameter is active only if the executable that you provide determines that the monitored service is not responding. If the service is not responding, the SvcNotResponding and SvcStatus parameters enter an alarm state. For more information, see the PATROL KM for Windows OS online Help.

Collector: NT_SERVICES Application Discovery
SvcPaused

Indicates that the service is paused.

Collector: NT_SERVICES Application Discovery
SvcPausePending

Indicates that the service status is Pause Pending.

Collector: NT_SERVICES Application Discovery
SvcRunning

Indicates that the service is running.

Collector: NT_SERVICES Application Discovery
SvcStartPending

Indicates that the service status is Start Pending.

Collector: NT_SERVICES Application Discovery
SvcStopPending

Indicates that the service status is Stop Pending.

Collector: NT_SERVICES Application Discovery
SvcUnknownStatus

Indicates that the service state is unknown.

Collector: NT_SERVICES Application Discovery
NT_SERVICES_CONTAINER Application Class
ServiceColl

Collects information about service status, service CPU usage, and service memory usage.
NT_SYSTEM Application Class
SYSSystemColl

Collects system statistics from the system performance objects in the Windows Performance Database.
SYSobjProcesses

Displays the number of processes in the computer at the time of data collection.

Collector: SYSObjectsColl
SYSobjThreads

Displays the number of threads in the computer.

Collector: SYSObjectsColl
SYSsysContextSwitchesPerSec

Displays the rate of switches, in seconds, from one thread to another. Thread switches can occur either inside a single process or across processes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
SYSsysProcessorQueueLength

Displays the length of the processor queue in number of threads. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
SYSsysSystemCallsPerSec

Displays the number of calls per second made to Windows system service routines. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
SYSsysSystemUpTime

Displays the time, in seconds, that the computer has been up and running.

Collector: SYSSystemColl
NT_TCP Application Class
TCPTcpColl

Collects TCP statistics from the NT TCP object.
TCPtcpConnectionFailures

Displays the number of times TCP connections have made a direct transition to

the CLOSED state from either the SYN-SENT state or the SYN-RCVD state
the LISTEN state from the SYN-RCVD state

Collector: TCPTcpColl
TCPtcpConnectionsActive

Displays the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.

Collector: TCPTcpColl
TCPtcpConnectionsEstablished

Displays the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.

Collector: TCPTcpColl
TCPtcpConnectionsReset

Displays the number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.

Collector: TCPTcpColl
TCPtcpSegmentsPerSec

Displays the rate that TCP segments are sent or received using the TCP protocol. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
TCPtcpSegmentsRcvdPerSec

Displays the rate that segments are received, including those received in error. This count includes segments received on currently established connections. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
TCPtcpSegmentsReTransPerSec

Displays the rate that segments are retransmitted, that is, segments transmitted containing one or more previously transmitted bytes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
TCPtcpSegmentsSentPerSec

Displays the rate that segments are sent, including those on current connections, but excluding those containing only retransmitted bytes. This parameter is inactive by default. You can activate this parameter from the PATROL Console KM tab.

Collector: SYSSystemColl
NT_UDP Application Class
UDPUdpColl

Collects UDP statistics from the NT UDP object.
UDPudpDatagsPerSec

Displays the rate that UDP datagrams are sent or received.

Collector: UDPUdpColl
UDPudpDatagsRcvdErrors

Displays the number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.

Collector: UDPUdpColl
UDPudpDatagsRcvdPerSec

Displays the rate that UDP datagrams are delivered to UDP users.

Collector: UDPUdpColl
UDPudpDatagsSentPerSec

Displays the rate that UDP datagrams are sent.

Collector: UDPUdpColl
PATROL_NT Application Class
PADeltaBetweenExecSecs

Displays the number of seconds between executions. This value is the RUNQ_DELTA variable.
PAErrorLogFileSize

Displays the size (in bytes) of the Agent error log file.
PAInternalErrors

Displays the number of miscellaneous internal errors.
PAOustandingJobs

Displays the number of currently executing jobs on the PATROL Agent and the time at which they were executed.
PATotalErrors

Displays the total number of errors detected by the PATROL Agent.
PAUserErrors

Displays the number of errors that have occurred in user-specified commands. These commands can be commands or tasks that you have executed through the following:

interactive command dialog boxes
command windows
task windows
user-defined menu items

PAWorkRateExecsMin

Displays the number of operating system process executions performed per minute by the PATROL Agent.
PATROL Wizard for Microsoft Performance Monitor and WMI 2.0.03
NT_PERFMON_COUNTER Applcation Class
Value

The actual name of this parameter derived from the name of the parent object. By default, this parameter does not have any alarm thresholds unless you set them when you create the parameter.

Collector: PerCounterCollector
PerCounterCollector

Collects performance monitor data from Microsoft's Performance Monitor counters and supplies it to the parameters you created.
NT_WMI_COUNTER Applcation Class
Value

The actual name of this parameter derived from the name of the parent object. By default, this parameter does not have any alarm thresholds unless you set them when you create the parameter.

Collector: WmiCounterCollector
WmiCounterCollector

Collects data from Microsoft's WMI data and supplies it to the parameters you created.















PATROL for Microsoft Window Terminal Services 2.1.02


Table 24 PATROL for Microsoft Windows Terminal Services 2.1.02
Parameter



WTS_PROCESS_CONTAINER Application Class
PrCollector

Serves as the collector for WTS_PROCESS consumer parameters.
WTS_PROCESS Application Class
PrCpuUtilization

Monitors the percentage of CPU used by this process.

Collector: PrCollector
PrElapsedTime

Monitors the total elapsed time this process has been running.

Collector: PrCollector
PrHandleCount

Monitors the total number of handles currently open by this process.

Collector: PrCollector
PrPageFaults

Monitors the rate at which page faults occur in the threads executing in this process.

Collector: PrCollector
PrPageFilebytes

Monitors the current number of megabytes that this process has used in the paging file(s).

Collector: PrCollector
PrPeakPageFilebytes

Monitors the maximum number of megabytes that this process has used in the paging file(s).

Collector: PrCollector
PrPeakVirtualMemory

Monitors the maximum number of megabytes of virtual address space the process has used at any one time.

Collector: PrCollector
PrPeakWorkingMemory

Monitors the maximum number of megabytes in the working set at any point in time.

Collector: PrCollector
PrPrivateMemory

Monitors the current number of megabytes that this process has allocated that cannot be shared with other processes.

Collector: PrCollector
PrPrivTimePct

Monitors the percentage of elapsed time that all threads for this process have spent executing in privileged mode.

Collector: PrCollector
PrUserTimePct

Monitors the percentage of elapsed time that all threads for this process have spent executing in user mode.

Collector: PrCollector
PrVirtualMemory

Monitors the current size in megabytes of the virtual address space in use by this process.

Collector: PrCollector
PrdWorkingMemory

Monitors the number of megabytes that are currently allocated to this processs working set (memory).

Collector: PrCollector
WTS_SESSION_CONTAINER Application Class
SeCollector

Serves as the collector for WTS_SESSION consumer parameters.
WTS_SESSION Application Class
SeCpuUtilization

Monitors the CPU percentage being used by the session instance.

Collector: SeCollector
SeDuration

Monitors the total elapsed time, in minutes, that the session has been connected and disconnected.

Collector: SeCollector
SeInputAsyncFrameError

Monitors the number of input async framing errors. These errors are typically caused by a noisy transmission line.

Collector: SeCollector
SeInputAsyncOverflow

Monitors the number of input async overflow errors. These errors can be caused by a lack of buffer space available on the host.

Collector: SeCollector
SeInputAsyncOverrun

Monitors the number of input async overrun errors. These errors can be caused by the baud rate being faster than the computer can handle, or a non-16550 serial line being used. Overruns can also occur if too many high-speed serial lines are active at one time for the processor to handle.

Collector: SeCollector
SeInputAsyncParityError

Monitors the number of input parity errors that occur during asynchronous communication with a client. These can be caused by a noisy transmission line.

Collector: SeCollector
SeInputBytes

Monitors the total number of bytes, including data and all protocol overhead, input during this session.

Collector: SeCollector
SeInputCompressFlushes

Monitors the number of input compression dictionary flushes. The compression dictionary is flushed when the data cannot be compressed to allow new data a better chance of being compressed.

Collector: SeCollector
SeInputCompressedBytes

Monitors the number of bytes input after compression.

Collector: SeCollector
SeInputCompressionRatio

Monitors the compression ratio of the server input data stream.

Collector: SeCollector
SeInputErrors

Monitors the number of input errors of all types that occur on this session.

Collector: SeCollector
SeInputFrames

Monitors the number of frames (packets) input during the session.

Collector: SeCollector
SeInputNonProtocolBytes

Monitors the number of bytes input on this session after all protocol-overhead has been removed.

Collector: SeCollector
SeInputNonProtocolFrames

Monitors the number of frames input after any additional protocol-added frames have been removed.

Collector: SeCollector
SeInputProtocolBytesPct

Monitors the ratio (efficiency) of the total number of bytes input (SeInputBytes) and the number of non-protocol bytes (SeInputNonProtocolBytes) input during this session. The calculation is (SeInputNonProtocolBytes / SeInputBytes) * 100.

Collector: SePctCollector
SeInputProtocolFramcesPct

Monitors the ratio (efficiency) of the total number of frames input (SeInputFrames) and the number of non-protocol frames input during this session.

Collector: SePctCollector
SeInputTimeouts

Monitors the total number of timeouts on the communication line as seen from the client side of the connection. Timeouts are typically due to noisy transmission lines or in having the protocol timeout set too short.

Collector: SeCollector
SeInputTransportErrors

Monitors the number of Terminal Services transport-level errors on input.

Collector: SeCollector
SeInputWaitForOutBuffer

Monitors the number of times that a wait for an available send buffer was done by the protocols on the client side of the connection.

Collector: SeCollector
SeOutputAsyncFrameError

Monitors the number of output async framing errors. These errors could be caused by hardware or noisy-line problems.

Collector: SeCollector
SeOutputAsyncOverflow

Monitors the number of output async overflow errors.

Collector: SeCollector
SeOutputAsyncOverrun

Monitors the number of output async overrun errors.

Collector: SeCollector
SeOutputAsyncParityError

Monitors the number of output async parity errors. These errors can be caused by a hardware or line problem.

Collector: SeCollector
SeOutputBytes

Monitors the total number of bytes, including data and all protocol overhead, output during this session.

Collector: SeCollector
SeOutputCompressFlushes

Monitors the number of output compression dictionary flushes. The compression dictionary is flushed when the data cannot be compressed to allow new data a better chance of being compressed.

Collector: SeCollector
SeOutputCompressedBytes

Monitors the number of bytes output after compression.

Collector: SeCollector
SeOutputCompressionRatio

Monitors the compression ratio of the server output data stream.

Collector: SeCollector
SeOutputErrors

Monitors the number of output errors of all types.

Collector: SeCollector
SeOutputFrames

Monitors the number of frames (packets) output during this session.

Collector: SeCollector
SeOutputNonProtocolBytes

Monitors the number of bytes output during this session after all protocol-overhead has been removed.

Collector: SeCollector
SeOutputNonProtocolFrames

Monitors the number of frames output before any additional protocol frames have been added.

Collector: SeCollector
SeOutputProtocolBytesPct

Monitors the ratio (efficiency) of the total number of bytes input (SeOutputBytes) and the number of non-protocol bytes (SeOutputNonProtocolBytes) input during this session. The calculation is (SeOutputNonProtocolBytes / SeOutputBytes) * 100.

Collector: SePctCollector
SeOutputProtocolFramesPct

Monitors the ratio (efficiency) of the total number of frames output (SeOutputFrames) and the number of non-protocol frames output during this session.

Collector: SePctCollector
SeOutputTimeouts

Monitors the total number of timeouts on the communication line from the host side of the connection. Timeout is typically due to noisy transmission lines or in having the protocol timeout set too short.

Collector: SeCollector















PATROL for Netware 1.6.00


Table 25 PATROL for Netware 1.6.00
Parameter



NW_CONNECTIONS Application Class
NWCollConnections

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_CONNECTIONS application class; sets the NW_CONNECTIONS consumer parameters.
NWTCurrConnects

Monitors the number of current network connections for the server.

Collector: NWCollConnections
NWTCurrStations

Monitors the number of current stations connected to the server.

Collector: NWCollConnections
NWTMaxConnects

Monitors the maximum number of connections allowed on the server.

Collector: NWCollConnections
NWTMaxStations

Monitors the maximum number of stations allowed on the server.

Collector: NWCollConnections
NWTPeakConnects

Tracks the largest number of connections to the network that have been made up to the current time.

Collector: NWCollConnections
NWTPeakStations

Tracks the largest number of stations in the network that have been made up to the current time.

Collector: NWCollConnections
NW_CPU Application Class
NWCCPUSpeed

Monitors the CPU speed of the server.

Collector: NWCollCPU
NWCCurrIdleLoops

Monitors the current number of idle loops.

Collector: NWCollCPU
NWCIdleCount

Displays the total number of idle loops in the system.

Collector: NWCollCPU
NWCMaxIdleLoops

Monitors the maximum number of idle loops allowed in the system.

Collector: NWCollCPU
NWCollCPU

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_CPU application class. It sets the NW_CPU consumer parameters.
NWCUtilization

Monitors CPU usage.

Collector: NWCollCPU
NW_DISK Application Class
NWCollDisk

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_DISK application class. It sets the NW_DISK consumer parameters.
NWDDirtyBlocks

Monitors the number of dirty blocks on the disk.

Collector: NW_Disk
NWDKBsRead

Monitors the number of kilobytes read from the disk.

Collector: NW_Disk
NWDKBsWritten

Monitors the number of kilobytes written to the disk.

Collector: NW_Disk
NWDReads

Monitors the total number of reads from the disk.

Collector: NW_Disk
NWDRequests

Monitors the total number of requests against the disk.

Collector: NW_Disk
NWDTotalIOs

Monitors the total number of I/O operations.

Collector: NW_Disk
NWDTotalKBs

Monitors the total number of kilobytes read from and written to the disk.

Collector: NW_Disk
NWDWrites

Monitors the total number of writes to the disk.

Collector: NW_Disk
NW_FILESYSTEM Application Class
NWCollFilesystem

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_FileSystem application class. It sets the NW_FILESYSTEM consumer parameters.
NWFCreates

Monitors the number of file systems created.

Collector: NWCollFilesystem
NWFDeletes

Monitors the number of file systems deleted.

Collector: NWCollFilesystem
NWFDirSearches

Monitors the number of directory searches performed against the system.

Collector: NWCollFilesystem
NWFFATSectDirty

Monitors the number of dirty sections on the FAT file system.

Collector: NWCollFilesystem
NWFFATSectWritt

Monitors the number of sections written on the FAT file system.

Collector: NWCollFilesystem
NWFKBsRead

Monitors the number of kilobytes read from the file system.

Collector: NWCollFilesystem
NWFKBsWritten

Monitors the number of kilobytes written to the file system.

Collector: NWCollFilesystem
NWFOpens

Monitors the number of open file systems.

Collector: NWCollFilesystem
NWFReads

Monitors the number of reads against the file system.

Collector: NWCollFilesystem
NWFRecordLocks

Monitors the number of records locked in the file system.

Collector: NWCollFilesystem
NWFRenames

Monitors the number of renamed files in the server.

Collector: NWCollFilesystem
NWFTotalFileIO

Monitors the total file I/O operations on the server.

Collector: NWCollFilesystem
NWFTotalFileKBs

Monitors the total number of kilobytes available in the file system.

Collector: NWCollFilesystem
NWFTransactions

Monitors the total number of transactions against the file system.

Collector: NWCollFilesystem
NWFWrites

Monitors the number of writes to the file system.

Collector: NWCollFilesystem
NW_MEMORY Application Class
NWCollMemory

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_MEMORY application class. It sets the NW_MEMORY consumer parameters.
NWMAllocMem

Monitors the amount of allocated memory that is available on the server.

Collector: NWCollMemory
NWMCacheBuffSize

Monitors the size of the cache buffer on the server.

Collector: NWCollMemory
NWMCacheMem

Monitors the amount of cache memory that is available on the server.

Collector: NWCollMemory
NWMCurrCacheBuff

Monitors the current number of cache buffers on the server.

Collector: NWCollMemory
NWMDirCacheBuffs

Monitors the number of directory cache buffers on the server.

Collector: NWCollMemory
NWMDrtyCacheBuff

Monitors the number of dirty cache buffers on the server.

Collector: NWCollMemory
NWMMovMem

Monitors the amount of movable memory that is available on the server.

Collector: NWCollMemory
NWMNonMovMem

Monitors the amount of non-movable memory that is available on the server.

Collector: NWCollMemory
NWMOrigCacheBuff

Monitors the original number of cache buffers on the server before any changes were made.

Collector: NWCollMemory
NWMPermMem

Monitors the amount of permanent memory that is available on the server.

Collector: NWCollMemory
NWMRcvBuffs

Monitors the number of buffers available on the server for receiving data.

Collector: NWCollMemory
NWMTotalKnownMem

Monitors the amount of total known memory that is available on the server.

Collector: NWCollMemory
NWMTotalWorkMem

Monitors the amount of total working memory that is available on the server.

Collector: NWCollMemory
NWMUnusedAllocMem

Monitors the amount of unused allocated memory that is available on the server.

Collector: NWCollMemory
NWMUnusedPermMem

Monitors the amount of unused permanent memory that is available on the server.

Collector: NWCollMemory
NWMUsedAllocMem

Monitors the amount of used allocated memory on the server.

Collector: NWCollMemory
NWMUsedPermMem

Monitors the amount of used permanent memory on the server.

Collector: NWCollMemory
NW_MISCELLANEOUS Application Class
NWMiscServer

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_MISCELLANEOUS application class. It sets the NW_MISCELLANEOUS consumer parameters.
NWSFilesOpen

Monitors the number of files that are open on the server.

Collector: NWMiscServer
NWSPkStationsInUse

Monitors the peak number of stations in use.

Collector: NWMiscServer
NWSServiceProcs

Sets the maximum number of service processes that the operating system may create.

Collector: NWMiscServer
NWSStationsInUse

Monitors the number of stations that are currently in use on the server.

Collector: NWMiscServer
NW_NDS Application Class
NWCollNDS

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_NDS application class. It sets the NW_NDS consumer parameters.
NWRAbortPartitionOps

Reports the number of abort partition operations on the NetWare server.

Collector: NWCollNDS
NWRAddEntry

Reports the number of NDS add entry operations on the NetWare server.

Collector: NWCollNDS
NWRAddPartition

Reports the number of NDS add partition operations on the NetWare server.

Collector: NWCollNDS
NWRAddReplica

Reports the number of NDS Add Replica operations on the NetWare server.

Collector: NWCollNDS
NWRAuditSkulking

Reports the number of NDS Audit Skulking operations on the NetWare server.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRBackupEntry

Reports the number of NDS Backup Entries operations.

Collector: NWCollNDS
NWRBeginAuthenticate

Reports the number of NDS Begin Authenticate operations.

Collector: NWCollNDS
NWRBeginLogin

Reports the number of NDS Begin Login operations.

Collector: NWCollNDS
NWRBeginMoveEntry

Reports the number of NDS Begin Move Entry operations.

Collector: NWCollNDS
NWRChangePassword

Reports the number of NDS Change Password operations.

Collector: NWCollNDS
NWRChangeReplicaType

Reports the number of NDS Change Replica Type operations.

Collector: NWCollNDS
NWRChangeTreeName

Reports the number of NDS Change Tree Name operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRChkLoginRestricts

Reports the number of NDS Check Login Restriction operations.

Collector: NWCollNDS
NWRCloseIteration

Reports the number of NDS Close Iteration operations.

Collector: NWCollNDS
NWRCompare

Reports the number of NDS Compare operations.

Collector: NWCollNDS
NWRCreatSubordinateRef

Reports the number of NDS Create Subordinate Reference operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRCreateBacklink

Reports the number of NDS Create Backlink operations. Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRCreateEntryDir

Reports the number of NDS Create Entry Directory operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRDefineAttr

Reports the number of NDS Define Attribute operations.

Collector: NWCollNDS
NWRDefineClass

Reports the number of NDS Define Class operations.

Collector: NWCollNDS
NWRDeleteExternalRef

Reports the number of NDS Delete External Reference operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRDesignateNewMaster

Reports the number of NDS Designate New Master operations.

Collector: NWCollNDS
NWREndUpdateReplica

Reports the number of NDS End Update Replica operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWREndUpdateSchema

Reports the number of NDS End Update Schema operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRFinishAuthenticate

Reports the number of NDS Finish Authenticate operations.

Collector: NWCollNDS
NWRFinishLogin

Reports the number of NDS Finish Login operations.

Collector: NWCollNDS
NWRFinishMoveEntry

Reports the number of NDS Finish Move Entry operations.

Collector: NWCollNDS
NWRGetEffectiveRights

Reports the number of NDS Get Effective Rights operations.

Collector: NWCollNDS
NWRGetReplicaRootID

Reports the number of NDS Get Replica Root ID operations.

Collector: NWCollNDS
NWRGetServerAddress

Reports the number of NDS Get Server Address operations.

Collector: NWCollNDS
NWRInspectEntry

Reports the number of NDS Inspect Entry operations.

Collector: NWCollNDS
NWRJoinPartition

Reports the number of NDS Join Partition operations.

Collector: NWCollNDS
NWRLinkReplica

Reports the number of NDS Link Replica operations. Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRList

Reports the number of NDS List operations.

Collector: NWCollNDS
NWRListContainClasses

Reports the number of NDS List Contain Classes operations.

Collector: NWCollNDS
NWRListPartition

Reports the number of NDS List Partition operations.

Collector: NWCollNDS
NWRLogout

Reports the number of NDS Logout operations.

Collector: NWCollNDS
NWRModifyClassDef

Reports the number of NDS Modify Class Definition operations.

Collector: NWCollNDS
NWRModifyEntry

Reports the number of NDS Modify Entry operations.

Collector: NWCollNDS
NWRModifyRdn

Reports the number of NDS Modify Rdn operations.

Collector: NWCollNDS
NWROpenStream

Reports the number of NDS Open Stream operations.

Collector: NWCollNDS
NWRPartitionEntryCount

Reports the number of NDS Partition Entry Count operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRRead

Reports the number of NDS Read operations.

Collector: NWCollNDS
NWRReadAttrDef

Reports the number of NDS Read Attribute Definition operations.

Collector: NWCollNDS
NWRReadClassDef

Reports the number of NDS Read Class Definition operations.

Collector: NWCollNDS
NWRReadEntryInfo

Reports the number of NDS Read Entry Information operations.

Collector: NWCollNDS
NWRReadReferences

Reports the number of NDS Read References operations.

Collector: NWCollNDS
NWRReadSyntaxes

Reports the number of NDS Read Syntax operations.

Collector: NWCollNDS
NWRReleaseMoveEntry

Reports the number of NDS Release Move Entry operations.

Collector: NWCollNDS
NWRRemoveAttrDef

Reports the number of NDS Remove Attribute Definition operations.

Collector: NWCollNDS
NWRRemoveClassDef

Reports the number of NDS Remove Class Definition operations.

Collector: NWCollNDS
NWRRemoveEntry

Reports the number of NDS Remove Entry operations.

Collector: NWCollNDS
NWRRemoveEntryDir

Reports the number of NDS Remove Entry Directory operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRRemovePartition

Reports the number of NDS Remove Partition operations.

Collector: NWCollNDS
NWRRemoveReplica

Reports the number of NDS Remove Replica operations.

Collector: NWCollNDS
NWRRenameExternalRef

Reports the number of NDS Rename External Reference operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRRepairRing

Reports the number of NDS Repair Ring operations.

Collector: NWCollNDS
NWRRepairTimestamps

Reports the number of NDS Repair Timestamps operations.

Collector: NWCollNDS
NWRResolveName

Reports the number of NDS Resolve Name operations.

Collector: NWCollNDS
NWRRestoreEntry

Reports the number of NDS Restore Entry operations.

Collector: NWCollNDS
NWRSearch

Reports the number of NDS Search operations.

Collector: NWCollNDS
NWRSearchFilter

Reports the number of NDS Search Filter operations.

Collector: NWCollNDS
NWRSetKeys

Reports the number of NDS Set Keys operations.

Collector: NWCollNDS
NWRSplitPartition

Reports the number of NDS Split Partition operations.

Collector: NWCollNDS
NWRStartUpdateReplica

Reports the number of NDS Start Update Replica operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRStartUpdateSchema

Reports the number of NDS Start Update Schema operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRSyncPartition

Reports the number of NDS Synchronize Partition operations.

Collector: NWCollNDS
NWRSyncSchema

Reports the number of NDS Synchronize Schema operations.

Collector: NWCollNDS
NWRTotalActivity

Reports the number of NDS Total Activity operations.

Collector: NWCollNDS
NWRUpdateReplica

Reports the number of NDS Update Replica operations.

Collector: NWCollNDS
NWRUpdateSchema

Reports the number of NDS Update Schema operations.

Note: The NDS verb counter is not defined for the NetWare 5 NDS tree; it always returns a value of zero.

Collector: NWCollNDS
NWRVerifyPassword

Reports the number of NDS Verify Password operations.

Collector: NWCollNDS
NW_NETWORK Application Class
NWCollNetwork

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_NETWORK application class. It sets the NW_NETWORK consumer parameters.
NWNAllPackets

Monitors the number of packets that are available on the server.

Collector: NW_CollNetwork
NWNKBsRcvd

Monitors the number of kilobytes received from the network on the server.

Collector: NW_CollNetwork
NWNKBsXmtd

Monitors the number of kilobytes that have been transmitted across the network.

Collector: NW_CollNetwork
NWNPacketsRcvd

Monitors the number of kilobytes that have been received from the network on the server.

Collector: NW_CollNetwork
NWNPacketsRoutd

Monitors the number of packets that have been routed through the network.

Collector: NW_CollNetwork
NWNPacketsXmtd

Monitors the number of packets that have been transmitted across the network.

Collector: NW_CollNetwork
NWNTotalKBs

Monitors the total number of kilobytes processed by the server as network traffic.

Collector: NW_CollNetwork
NWNTotalPackets Parameter

Monitors the total number of packets processed by the server.

Collector: NW_CollNetwork
NW_NLMS Application Class
NWCollNLMS

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_NLMS application class. It sets the NW_NLMS consumer parameters.
NWLAllocatedMem

Monitors the allocated memory for the NLM; applies for all NLM parameters.

Collector: NWCollNLMS
NWLCacheBelow16Mb

Monitors the cache that falls below 16 megabytes for the NLM.

Collector: NWCollNLMS
NWLCacheMovable

Monitors movable cache on the server for the NLM.

Collector: NWCollNLMS
NWLCacheNonMovable

Monitors non-movable cache on the server.

Collector: NWCollNLMS
NWLPermMem

Monitors permanent memory on the server.

Collector: NWCollNLMS
NWLSemiPermMem

Monitors semipermanent memory on the server.

Collector: NWCollNLMS
NW_SERVER Application Class
NWCollServer

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_SERVER application class. It sets the NW_SERVER consumer parameters.
NWSPctCPUUtil

Displays the percentage of CPU utilization; calculated as (TotalLoops - IdleLoops)/TotalLoops.

Collector: NWCollServer
NWSPctDrtyCachBuff

Displays the percentage of dirty cache buffers; calculated as DirtyBlocks/CurrentBuffers.

Collector: NWCollServer
NWSPctCurrDiskReq

Displays the percentage of current disk requests; calculated as DiskRequests/MaxConDiskWrites.

Collector: NWCollServer
NWSPctServProc

Displays the percentage of service processes; calculated as ServiceProcesses/MaxServiceProcesses.

Collector: NWCollServer
NWSPctRecvBuff

Displays the percentage of receive buffers; calculated as ReceiveBuffers/MaxReceiveBuffers.

Collector: NWCollServer
NWSPctDirCacheBuff

Displays the percentage of directory cache buffers; calculated as DirCacheBuffers/MaxDirCacheBuffers.

Collector: NWCollServer
NWSPctVolPurgable

Displays the percentage of the volume that is purgeable; calculated as PurgableKBs/TotalKBs.

Collector: NWCollServer
NWSPctStationConn

Displays the percentage of stations that are connected; calculated as CurrentStations/MaxStations.

Collector: NWCollServer
NWSReadWriteRatio

Displays the read/write ratio; calculated as DiskReads/(DiskWrites + DiskReads).

Collector: NWCollServer
NWSCacheHitRatio

Displays the cache hit ratio; calculated as FileSystemReads/(FileSystemReads + DiskReads).

Collector: NWCollServer
NWSPctAvailDirSlot

Displays the percentage of available directory slots; calculated as AvailableDirectorySlots/TotalDirectorySlots.

Collector: NWCollServer
NWSPctMemAlloc

Displays the percentage of memory allocated; calculated as AllocMemory/TotalWorkMemory.

Collector: NWCollServer
NWSPctMemAllocUsed

Displays the percentage of allocated memory that is actually used; calculated as UsedAllocMemory/AllocMemory.

Collector: NWCollServer
NWSPctMemCache

Displays the percentage of memory that is used for the cache; calculated as CacheMemory/TotalWorkMemory.

Collector: NWCollServer
NWSPctMemCacheUsed

Displays the percentage of used cache memory; calculated as CurrentBuffers/OriginalBuffers.

Collector: NWCollServer
NWSPctVolumeUsed

Displays the percentage of the volume that is used; calculated as VolumeUsedKBs/VolumeTotalKBs.

Collector: NWCollServer
NWSCurrBuffers

Displays the number of buffers that are currently available.

Collector: NWCollServer
NWSDiskReads

Displays the number of disk reads that have been performed since the NW_SERVER application was initiated.

Collector: NWCollServer
NWSDiskWrites

Displays the number of disk writes that have been performed since the NW_SERVER application was initiated.

Collector: NWCollServer
NWSFileSysReads

Displays the number of file system reads that have been performed since the NW_SERVER application was instantiated.

Collector: NWCollServer
NWSFreeKBs

Displays the amount of free memory that is available.

Collector: NWCollServer
NWSKBsRecvd

Displays the number of kilobytes that have been received from the network since NW_SERVER was instantiated.

Collector: NWCollServer
NWSKBsSent

Displays the number of kilobytes that have been sent to the network since NW_SERVER was instantiated.

Collector: NWCollServer
NWSPacketsRecvd

Displays the number of packets that have been received from the network since NW_SERVER was instantiated.

Collector: NWCollServer
NWSPacketsSent

Displays the number of packets that have been sent to the network since NW_SERVER was instantiated.

Collector: NWCollServer
NW_USERS Application Class
NWCollUsers

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_USERS application class. It sets the NW_USERS consumer parameters.
NWUKBsReadPerMin

Monitors the user files read per minute.

Collector: NWCollUsers
NWUKBsWrittenPerMin

Monitors the number of user files written per minute.

Collector: NWCollUsers
NWURequestsPerMin

Monitors the number of user requests per minute.

Collector: NWCollUsers
NW_VOLUME Application Class
NWCollVolume

Obtains data by sending an event to the PATROL Event Manager requesting data for the NW_VOLUME application class. It sets the NW_VOLUME consumer parameters.
NWVAvailDirSlots

Monitors the number of available directory slots on the volume.

Collector: NWCollVolume
NWVAvailKBs

Monitors the number of kilobytes available on the volume.

Collector: NWCollVolume
NWVFreeKBs Parameter

Monitors the number of free kilobytes available on the volume.

Collector: NWCollVolume
NWVNotYetPurgKBs

Monitors the number of kilobytes that have not yet been purged from the volume.

Collector: NWCollVolume
NWVPurgKBs

Monitors the number of kilobytes purged from the volume.

Collector: NWCollVolume
NWVTotalDirSlots

Monitors the total number of directory slots on the volume.

Collector: NWCollVolume
NWVTotalKBs

Monitors the total number of kilobytes in the volume.

Collector: NWCollVolume
NWVUsedKBs

Monitors the number of kilobytes used on the volume.

Collector: NWCollVolume
NWVUsedDirSlots

Monitors the total number of used directory slots on the volume.

Collector: NWCollVolume
















PATROL for OpenVMS 2.6.00


Table 26 PATROL for OpenVMS 2.6.00
Parameter



VMS Computer Class
SNMPStart

Starts the SNMP Master Agent.
VMS_CLUSTER Application Class
CLUCPUBusy

Displays the percentage of CPU in use. The amount of CPU includes activity in all processor modes (except idle time) for each node.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CLUEnqDeqRate

Displays the rate of all local incoming and outgoing ENQs, DEQs, and conversions per second.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CLUMemoryInUse

Displays the percentage of memory in use on each node. The percentage calculation is 100% minus the ratio of the free list size to the total available memory.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CLUmembers

Lists the number of cluster.

Collector: SYSreadMonBinaryColl
VMS_CPU Application Class
CPUAVEExecutiveMode

Displays the average percentage of time that all CPUs spent in executive mode; it is calculated by adding the CPUExecutiveMode parameter values for each CPU and dividing by the number of CPUs.

This parameter appears the VMS_CPU application container window.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CPUAVEIdleMode

Displays the average percentage of time that all CPUs execute in idle loop mode; it is calculated by adding the CPUIdleMode parameter values for each CPU and dividing by the number of CPUs.This parameter measures the average available CPU cycles when processes are not blocked because of memory or IO limitations. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is CPUIdleModeAgentHostnameAgentPort.dat.

Collector: SYSreadMonBinaryColl
CPUAVEInterruptStack

Displays the average percentage of time all CPUs execute on the interrupt stack; it is calculated by adding the CPUInterruptStack parameter values for each CPU and dividing by the number of CPUs. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is CPUInterruptStackAgentHostnameAgentPort.dat.

Collector: SYSreadMonBinaryColl
CPUAVEKernelMode

Displays the average percentage of time all CPUs execute in kernel mode; it is calculated by adding the CPUKernelMode parameter values for each CPU and dividing by the number of CPUs. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is CPUKernelModeAgentHostnameAgentPort.dat.

Collector: SYSreadMonBinaryColl
CPUAVEMPSync

Displays the average time all CPUs spent synchronizing multiple CPUs; it is calculated by adding the CPUMPSync parameter values for each CPU and dividing by the number of CPUs.

Collector: SYSreadMonBinaryColl
CPUAVESupervisorMode

Displays the average percentage of time all CPUs spent in supervisor mode; it is calculated by adding the CPUSupervisorMode parameter values for each CPU and dividing by the number of CPUs.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CPUAVEUserMode

Displays the average percentage of time all CPUs spent in user mode executing instructions; it is calculated by adding the CPUUserMode parameter values for each CPU and dividing by the number of CPUs.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CPUErrCount

Displays the number of CPU errors by executing the OpenVMS show error command.

Collector: application discovery
CPUExecutiveMode

Displays the percentage of time spent in executive mode.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CPUIdleMode

Displays the percentage of time the CPU executes in the idle loop; measures the available CPU cycle when processes are not blocked because of memory or IO limitations. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is CPUIdleMode AgentHostname AgentPort.dat.

Collector: SYSreadMonBinaryColl
CPUInterruptStack

Displays the percentage of time the CPU executes on the interrupt stack. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is CPUInterruptStack AgentHostname AgentPort.dat.

Collector: SYSreadMonBinaryColl
CPUKernelMode

Displays the percentage of time the CPU executes in kernel mode. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is CPUKernelMode AgentHostname AgentPort.dat.

Collector: SYSreadMonBinaryColl
CPUMPSync

Displays the time spent synchronizing multiple CPUs.

Collector: SYSreadMonBinaryColl
CPUSupervisorMode

Displays the percentage of time that the CPU spent in supervisor mode.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
CPUUserMode

Displays the percentage of time that the CPU spent in user mode executing instructions.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_FILESYSTEM Application Class
BitmapAttempt

Displays the rate at which attempts were made to find entries in the bitmap cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
BitmapCacheHit

Displays the percentage of entry hits on the bitmap cache; the percentage calculation is the ratio of hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
DirDataAttempt

Displays the rate at which attempts were made to find directory data in the directory cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
DirDataCacheHit

Displays the percentage of directory data hits on the directory cache; the percentage calculation is the ratio of the hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
DirFCBAttempt

Displays the rate at which attempts were made to find directory file control blocks in the directory cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
DirFCBCacheHit

Displays the percentage of directory file control block hits on the directory cache; the percentage calculation is the ratio of hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
ExtentAttempt

Displays the rate at which attempts were made to find appropriate size extents in the extent cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
ExtentCacheHit

Displays the percentage of appropriate size extent hits on the extent cache; the percentage calculation is the ratio of hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FileHdrAttempt

Displays the rate at which attempts were made to find file headers in the file header cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FileHdrCacheHit

Displays the percentage of file header hits on the file header cache; the percentage calculation is the ratio of hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FileIDAttempt

Displays the rate at which attempts were made to find file identifiers in the file ID cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FileIDCacheHit

Displays the percentage of file identifier hits on the file ID cache; the percentage calculation is the ratio of hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSAllocationRate

Displays the rate of calls that caused allocation of disk space.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSCPUTickRate

Displays the rate at which CPU time was used by the file system (in 10-millisecond ticks).

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSCreateRate

Displays the rate at which new files were created.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSEraseRate

Displays the rate of erase operations issued by the file system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSFCPCallRate

Displays the rate at which QIO requests were received by the file system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSFileLookupRate

Displays the rate of file name lookup operations in file directories.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSFileOpenRate

Displays the rate at which files were opened.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSPageFaultRate

Displays the rate at which page faults occurred in the file system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSVolumeLockWait

Displays the rate of entry into a wait state due to contention for a volume synchronization lock. Volume synchronization locks are taken by the XQP during file creation, deletion, extension, and truncation operations.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FSWindowTurnRate

Displays the rate of file map window misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
QuotaAttempt

Displays the rate at which attempts were made to find entries in the quota cache.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
QuotaCacheHit

Displays the percentage of quota entry hits on the quota cache; the percentage calculation is the ratio of hits to the sum of hits plus misses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_IO Application Class
VMSIOBufferedIoRate

Displays the number of buffered IO operations performed per second on the system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIODirectIoRate

Displays the number of direct IO operations performed per second on the system. You should use PATROL history or MONITOR to determine normal operating values for this parameter; then adjust the alert range accordingly to trigger an alert and a recovery. MONITOR data files are placed in the directory defined by the logical PATROL$LOG. The file name is VMSIODirectIoRate AgentHostname AgentPort.dat.

Collector: SYSreadMonBinaryColl
VMSIOFileOpenRate

Displays the rate at which files were opened.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIOFreeListSize

Displays the pages on the free page list.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIOInswapRate

Displays the rate at which working sets are read into memory from the swap file.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIOLogNamTransRate

Displays the rate of logical name translations.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIOMbxWriteRate

Displays the rate of write to mailbox requests received by the system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIOModListSize

Displays the number of pages on the modified page list. 

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMSIOSplitXferRate

Displays the rate at which transfers were split into multiple IOs.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_LOGS Application Class
VMSLogFileSize

Displays the size of the log file in blocks.

Collector: VMS_LOGS discovery
VMS_MEMORY Application Class
DZeroFaultRate

Displays the rate at which zero-filled pages were allocated as a result of page faults.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FreeListFaultRate

Displays the rate at which pages were read from the free page list as a result of page faults.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
FreeListSize

Displays the number of pages on the free page list.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
GlobalValidFaultRate

Displays the rate of page faults for pages that are not in the process's working set but are in physical memory and are indicated as valid pages in the system-wide global page tables.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MEMErrCount

Displays the number of memory errors returned by the VMS show errors command.

Collector: application discovery
MEMFreePageWait

Displays the number of processes that are waiting for free memory page.

Collector: SYSreadMonBinaryColl
MEMMemoryUsed

Displays the percentage of physical memory in use.

Collector: SYSShowMemColl
MEMPageFaultRate

Displays the page fault rate for the system. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is MEMPageFaultRate.dat. Use PATROL history or MONITOR to determine normal operating values for this parameter; then adjust the output range accordingly to trigger an alert and a recovery.

Collector: SYSreadMonBinaryColl
MEMPageFileUsed

Displays the percentage of used page file space.
MEMPageReadIORate

Displays the percentage of read IO operations per second to the total page fault rate. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is MEMPageReadIoRate.dat.

Collector: SYSreadMonBinaryColl
MEMPageReadRate

Displays the rate of pages read from disk as a result of page faults.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MEMPageWriteIORate

Displays the rate of write IO operations to the page file.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MEMPageWriteRate

Displays the rate at which pages were written to the page file.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MEMSwapFileUsed

Displays the percentage of used swap file space.

Note: You must set up the alert range of this parameter before monitoring it.
ModifiedListFaultRate

Displays the rate of pages read from the modified page list as a result of page faults.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
ModifiedListSize

Displays the number of pages on the modified page list.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_NETWORK Application Class
NETDECnetBuffFailure

Displays the rate of DECnet receiver buffer failures.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
NETDECnetCongLoss

Displays the rate of DECnet transit congestion losses.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
NETDECnetPcktsRcv

Displays the rate at which local DECnet packets are being received.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
NETDECnetPcktsXmt

Displays the rate at which local DECnet packets are being sent.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
NETDECnetXPcktsRcv

Displays the rate at which remote DECnet packets are being sent through the system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_PATROLAGENT Application Class
PADeltaBetweenExecSecs

Displays the number of seconds between executions. This value is the RUNQ_DELTA variable.
PAInternalErrors

Displays the number of miscellaneous internal errors in the PATROL Agent.
PAOutstandingJobs

Displays the number of currently executing jobs on the PATROL Agent and the times they were executed.
PATotalErrors

Displays the total number of errors detected by the PATROL Agent.
PAUserErrors

Displays the number of errors that have occurred with user-specified commands in the PATROL Agent. These commands can be commands or tasks that you executed through interactive command dialog boxes, command windows, task windows, or user-defined menu items.
PAWorkRateExecsMin

Displays the number of instruction executions performed per minute by the PATROL Agent.
PAHistoryIndexSize

Displays the size of the PATROL Agent history index, which is the history database pointer file, DIR.IDX.
VMS_PROCESS Application Class
PROCCollidedPageWait

Displays the number of processes that are waiting for a faulted page in transition.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
PROCComputeState

Displays the number of processes that are in COM or COMO state.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
PROCFreePageWait

Displays the number of processes that are waiting for a free page of memory.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
PROCFreeProcessSlots

Displays the number of free process slots.

Collector: SYSreadMonBinaryColl
PROCMwaitState

Displays the number of processes that are waiting for the availability of a mutual exclusion semaphoring a dynamic resource. A MONITOR data file is placed in the directory defined by the logical PATROL$LOG. The file name is PROCMwaitState.dat.

Collector: SYSreadMonBinaryColl
PROCPageFaultWait

Displays the number of resident processes that are waiting for a page to be read as a result of a page fault.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
PROCProcessCount

Displays the number of processes that are currently running on the system.

Collector: SYSreadMonBinaryColl
PROCSuspended

Displays the number of resident processes that have executed a suspended request.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_PROCESS_PRESENCE Application Class
PROCBufIO

Displays the rate at which buffered I/Os are being used for the monitored process.
PROCDirIO

Displays the rate at which direct I/Os are being used for the monitored process.
PROCCPUPerc

Displays the total percentage of CPU which is being used by the monitored process.
PROCPageFaults

Displays the number of page faults per second used by the monitored process.
PROCPWSPeak

Displays the working set peak of the monitored process.
PROCPWSSize

Displays the working set size of the monitored process.
PROCProcessCount

Displays the number of processes found on a system which have an identical name, and have been spawned by the same username.

Note: When this parameter goes into a warn state, the KM stops updating and populating the rest of the VMS_PROCESS parameters. These parameters will retain the values they had before the PROCProcessCount parameter went into a warn state.
VMS_QUEUE Application Class
There are no parameters associated with the VMS_QUEUE application class.
VMS_QUEUE_BATCH Application Class
VMSQQueueLength

Displays the total number of jobs in the printer or batch queue. This number includes the jobs pending, jobs holding, and jobs executing.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_QUEUE_PRINTER Application Class
VMSQQueueLength

Displays the number of jobs in the printer or batch queue. This number includes the jobs pending, jobs holding, and jobs executing.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_RMS Application Class
RMSBlksPerExtend

Displays the average blocks per $Extend call on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBlksPerTrunc

Displays the blocks per $Truncate call on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBlockingASTRate

Displays the blocking AST rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBucketSplit

Displays the bucket split rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBytesPerGet

Displays the average number of bytes per $Get call on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBytesPerPut

Displays the average number of bytes per $Put call on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBytesPerRead

Displays the average number of bytes per read on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBytesPerUpdate

Displays the average number of bytes per $Update call on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSBytesPerWrite

Displays the average number of bytes per write on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSConvertedENQRate

Displays the converted ENQ rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSDeleteCallRate

Displays the $Delete call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSDEQRate

Displays the DEQ rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSExtendCallRate

Displays the $Extend call rate on a particular file. Set up the alert range of this parameter before monitoring it.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSFileColl

Works cooperatively with RMSStartMonRMSFiles to present the statistics of individual RMS files. The parameter opens the summary data file that was generated by RMSStartMonRMSFiles, sets the values of the consumer parameters, then deletes the summary data file after sending values to the consumers.
RMSFlushCallRate

Displays the $Flush call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSGlobalBufRead

Displays the global buffer read IO rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSGlobalBufWrite

Displays the global buffer write IO rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSGlobalCacheAttempt

Displays the global cache attempt rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSGlobalCacheHit

Displays the percentage of global cache hits on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSKeyFindCallRate

Displays the keyed $Find call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSKeyGetCallRate

Displays the keyed $Get call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSKeyPutCallRate

Displays the keyed $Put call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSLocalBufRead

Displays the local read I/O rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSLocalBufWrite

Displays the local buffer write I/O rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSLocalCacheAttempt

Displays the local cache attempt rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSLocalCacheHit

Displays the percentage of local cache hits on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSMultiBucketSplit

Displays the multibucket split rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSNewENQRate

Displays the new ENQ rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSReadCallRate

Displays the $Read call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSRfaFindCallRate

Displays the RFA $Find call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSRfaGetCallRate

Displays the RFA $Get call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSSeqFindCallRate

Displays the sequential $Find call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSSeqGetCallRate

Displays the sequential $Get call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSSeqPutCallRate

Displays the sequential $Put call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSTrunCallRate

Displays the $Truncate call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSUpdateCallRate

Displays the $Update call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
RMSWriteCallRate

Displays the $Write call rate on a particular file.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: RMSFileColl
VMS_SCS Application Class
SCSBuffDscRate

Displays the SCS queued for buffer descriptor rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSDGDiscardRate

Displays the SCS datagram discard rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSDGRcvRate

Displays the SCS datagram receive rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSDGSendRate

Displays the SCS datagram send rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSKbyteSendRate

Displays the SCS datagram send rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSKbytesMapRate

Displays the SCS kilobyte map rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSKbytesReqRate

Displays the SCS kilobyte request rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSMsgRcvRate

Displays the SCS message receive rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSMsgSendRate

Displays the SCS message send rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSReqDataRate

Displays the SCS request data rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSSendCreditRate

Displays the SCS queued for send credit rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SCSSendDataRate

Displays the SCS send data rate for a particular node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VMS_SYSTEM Application Class
DeadlockMsgRate

Displays the rate of incoming and outgoing messages required for deadlock detection.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPBuffWaitRate

Displays the rate at which buffer waits occur in the server. A buffer wait occurs when a request must wait for MSCP buffer memory.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPExtraFragRate

Displays the rate at which the server issues extra fragments. One or more extra fragments are created when, because of buffering constraints, the MSCP Server issues multiple IOs to fulfill a single IO request.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPFragmentedReqRate

Displays the rate at which fragmented requests occur. A fragmented request is a transfer that the server fragments because of buffering constraints.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReadReqRate

Displays the rate at which remote processor read IO transfers.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_1

Displays the number of I/O requests per second for packets whose sizes are less than or equal to 1 block. These requests are made by other members of the clusters to a local drive on the local node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_16-31

Displays the number of I/O requests per second for packets whose sizes are between 16 and 31 blocks.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_2-3

Displays the number of I/O requests per second for packets whose sizes are between 2 and 3 blocks. These requests are made by other members of the clusters to a local drive on the local node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_32-63

Displays the number of I/O requests per second for packets whose sizes are between 23 and 63 blocks. These requests are made by other members of the clusters to a local drive on the local node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_4-7

Displays the number of I/O requests per second for packets whose sizes are between 4 and 7 blocks. These requests are made by other members of the clusters to a local drive on the local node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_64Plus

Displays the number of I/O requests per second for packets whose sizes are greater than or equal to 64 blocks. These requests are made by other members of the clusters to a local drive on the local node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPReqSize_8-15

Displays the number of I/O requests per second for packets whose sizes are between 8 and 15 blocks. These requests are made by other members of the clusters to a local drive on the local node.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPServerIOReqRate

Displays the number of remote processor MSCP IO request transfers per second.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
MSCPWriteReqRate

Displays the rate at which remote processors request write MSCP IO transfers.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSBlkASTIncoming

Displays the rate of lock manager blocking ASTs that originate from other systems and are performed on this system.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSBlkASTOutgoing

Displays the rate of lock manager blocking ASTs that originate from this system and are performed on another system.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSBlockingAST

Displays the rate of lock manager blocking ASTs that originate from and are performed on this system.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSConENQIncoming

Displays the rate of lock conversion requests that originate from other systems and are performed on this system.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSConENQOutgoing

Displays the rate of lock conversion requests that originate from this system and are performed on another system.

Collector: SYSreadMonBinaryColl
SYSConvertedENQ

Displays the rate of lock conversion requests that originate from, and are performed, on this system.

Note: You must set up the alert range for this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYScreateMonBinaryColl

Continuously runs the monitor utility to collect data and load it into a file for use by the SYSreadMonBinaryColl collector. This collector will start the monitor collector if it is not running.
SYSDEQOutgoing

Displays the rate of unlock requests that originate from this system and are performed on another system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSDEQRate

Displays the rate of unlock requests that originate from, and are performed on, this system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSDEQRateIncoming

Displays the rate of unlock requests that originate from another system and are performed on this system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSInteractiveLogins

Displays the number of interactive logins available for use.
SYSNewENQRate

Displays the number of new lock requests that originate from and are performed on this system per second.

Collector: SYSreadMonBinaryColl
SYSNewENQRateIncoming

Displays the rate of new lock requests that originate from other systems and are performed on this system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSNewENQRateOutgoing

Displays the rate of new lock requests that originate from this system and are performed on another system.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
SYSreadMonBinaryColl

Periodically reads from the file created by the SYScreateMonBinaryColl collector and loads the data into consumer parameters.
SYSSetupColl

Sets the values of InfoBox items in various applications.
SYSShowMemColl

Executes the SHOW MEMORY command and collects the data from the output.
VMS_VOLUMES_Instance Application Class
VOLErrCount

Displays the number of errors accumulated on a particular disk volume. The parameter value will be updated only when the error count of the volume has changed.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VOLIOOperRate

Displays the rate at which IO operations occur on each disk. By comparing operation rates for all disks in the system, you can tell which disks are busy and which are idle.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VOLPctFull

Displays the disk volume's percentage of space used per its total capacity.

Collector: SYSreadMonBinaryColl
VOLQueueLength

Displays the number of outstanding IO request packets. The number includes the requests currently being serviced and those awaiting service.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VOLRespTime

Displays the average time it takes the disk to respond to an IO request. It is a measure of disk IO responsiveness.

Collector: SYSreadMonBinaryColl
VMS_VOLUMES_VOLUMESET Application Class
VOLSETErrCount

Displays the number of errors accumulated on a particular bound volume set.

Collector: SYSreadMonBinaryColl
VOLSETIOOperRate

Displays the rate at which IO operations occur on the disks in the bound volume set. By comparing operation rates for all disks in the system, you can tell which disks are busy and which are idle.

Collector: SYSreadMonBinaryColl
VOLSETPctFull

Displays the bound volume set's percentage of space used per its total capacity.

Collector: SYSreadMonBinaryColl
VOLSETQueueLength

Displays the number of outstanding IO request packets for the bound volume set. The number includes the requests currently being serviced and those awaiting service.

Note: You must set up the alert range of this parameter before monitoring it.

Collector: SYSreadMonBinaryColl
VOLSETRespTime

Displays the average time it takes the volume set to respond to an IO request. It is a measure of bound volume set IO responsiveness

Collector: SYSreadMonBinaryColl
















PATROL for Oracle 8.5.10


Table 27 PATROL for Oracle 8.5.10
Parameter



AVAILABILITY Application Class
Alerts

Shows the severity of the most recent Oracle error that was written to the alert log for this instance. Alarm means an Oracle error in the 0060000639 range was found in the alert log; warning means that an Oracle error with the filter you specified has been found.

The annotation displays the most recent ORA errors detected in the last polling cycle, and any error log filters that have been specified.
ArchFreeSpace

Shows the number of archive logs that can fit in the amount of free space remaining on the archive destination device. If the automated recovery actions have been set, that action will be taken when this parameter goes into alarm. The annotation displays the destination device, the space used and the space left on the device.

This parameter is not active for a remote instance and is not online if operating system components are not running. If the archive mode of the database is set to none, ArchFreeSpace is not active. Only those destinations whose BINDING is MANDATORY. If there is more than one archive log destination whose BINDING is MANDATORY, ArchFreeSpace is inactive, and a blank destination may appear in the Archiving State report.

Collector: CollAvailability
ArchFreeSpaceETF

Shows how long until no more archive logs can fit in the amount of free space remaining on the primary archive destination device. The annotation shows the day and time to failure or the reason data calculation cannot be done. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollETF
CannotExtend

Displays whether a segment in an autoextensible tablespace cannot extend due to a lack of operating system space or reaching the maximum space on the tablespace. Onlypermanent autoextensible tablespaces are monitored; if a non-autoextensible tablespace cannot extend, the FreeSpaceDeficit parameter goes into alarm.

You must have an operating system knowledge module loaded to display accurate information. If an OS KM is not loaded, the information that the Oracle software calculates is used. Not active for a remote instance.

Collector: CollAvailability
ConnectCheck

Checks for a timestamp that is set for the ConnectDB parameter. It then compares the timestamp from the current time to see if more than 2 minutes have passed. This helps determine if a database is hung, and if it is, the channel used by ConnectDB is closed.

If you disable the ConnectDB parameter, you should also disable the ConnectCheck parameter.
ConnectDB

Displays whether the database connection via the PATROL channel is active. If the parameter cannot connect to the database, it goes into alarm.

ConnectDB opens a new connection to the instance for each polling cycle, which may result in extra entries being added to the listener log. This is more likely to happen for a remote instance.

Collector: none (parameter collects own value)
ExtentsLeft

Reports the number of extents that can be added to the non-excluded object in a non-excluded user schema in a non-excluded table space that has the least number of extents left.

Tablespace, user and object exclusion are used in the calculations.

Collector: CollAvailability
ExtentsLeftETF

Reports how long until no more extents can be added to a non-excluded object in a non-excluded user schema in a non-excluded tablespace that is running out of extents. The annotation shows the day and time to failure or the reason data calculation cannot be done.

Collector: CollETF
ExtentsLeftPct

Graphs the percentage of extents that are left in a non-excluded object in a non-excluded user schema in a non-excluded tablespace. Tablespace, user and object exclusion are used in the calculations, and does not consider rollback segments.

Collector: CollAvailability
FreeSpace

Shows the percentage of space available in the non-excluded tablespace with the least amount of free space. When this parameter goes into alarm, the Free Space report for the tablespaces appears as the annotation.

This parameter considers tablespace exclusion in its calculations for warnings and alarms. If a tablespace is autoextensible, FreeSpace will never alarm for that tablespace. If all monitored tablespaces are autoextensible. CannotExtend monitors autoextended tablespaces and their segments.

Collector: CollAvailability
FreeSpaceDeficit

Indicates whether there is at least one segment that cannot allocate its next extent because of insufficient space. When this parameter alarms, the annotation reports all segments with insufficient available space.

This parameter is affected by tablespace, object, or user exclusions.

Collector: CollAvailability
FreeSpaceETF

Shows how long until there is no free space left in the non-excluded tablespaces.The annotation shows the day and time to failure or the reason data calculation cannot be done.

Collector: CollETF
InstanceStatus

Reports the status of the instance on the Oracle server. Instances in blackout mode or that have been shutdown from within PATROL are ignored to prevent false alarms.

Collector: CollAvailability
LockConflicts

The LockConflicts parameter provides all lock details for transation, DML, and PL/SQL locks.

If lock contention has been occuring for more than 2 minutes, the LockConflicts parameter goes into alarm. The value is the number of lock conflicts observed. When the parameter goes into alarm, the annotation is the Lock Conflict report.

Collector: CollAvailability
RSExtentsLeft

Reports the number of additional extents that are available to any rollback segment on the instance.

Tablespace, user and object exclusion are used in the calculations.

Collector: CollAvailability
RSExtentsLeftPct

Reports the minimum space left (in MB) in non-excluded tablespaces which contain rollback segments. If all the non-excluded tablespaces with rollback segments are autoextensible (other than the SYSTEM tablespace), this parameter is deactivated.

Tablespace, user and object exclusion are used in the calculations.

Collector: CollAvailability
RSSpaceLeft

Reports the minimum space left (in MB) in non-excluded tablespaces which contain rollback segments. If all the non-excluded tablespaces with rollback segments are autoextensible (other than the SYSTEM tablespace), this parameter is deactivated.

Tablespace, user and object exclusion are used in the calculations.

Collector: CollAvailability
RSSpaceLeftPct

Reportsthe percentage of space left in non-excluded table spaces with the least amount of space left that contain rollback segments.

Tablespace, user and object exclusion are used in the calculations.

Collector: CollAvailability
SchedulerOutput

Reports the results of any jobs from the Scheduler that were specified to be sent to an annotation. If a report was sent to an annotation, the annotated data point will appear at the time the job or report was supposed to run.

Collector: CollAvailability
ShutdownInProgress

Reports if the database is in the process of shutting down.

Collector: CollAvailability
SystemTSLeft

Reports the megabytes left in the SYSTEM tablespace.

Collector: CollAvailability
SystemTSLeftETF

Shows how long until there is no more space left in the SYSTEM tablespace. The annotation shows the day and time to failure or the reason data calculation cannot be done.

Collector: CollETF
SystemTSLeftPct

Displays the percentage of space left in the SYSTEM tablespace. If the SYSTEM tablespace is autoextensible, this parameter is deactivated.

Collector: CollAvailability
TempTSLeft

Displays the space left in the temporary tablespaces (both DMTS and LMTS). The calculations include both extensible and non-extensible datafiles and temp files.

TempTSLeft will go into warning when the space left in the TEMPORARY tablespace has has less then 10MB left, and will go into alarm when there is less than 5MB left.

Collector: CollTempTS
TempTSLeftPct

Displays the percentage of space left in the temporary tablespaces (both DMTS and LMTS). The calculations include both extensible and non-extensible datafiles and temp files.

TempTSLeftPct will go into warning when the percentage of space left in the TEMPORARY tablespace has reached 10%, and will go into alarm when the percentage of space left reaches 5%.

Collector: CollTempTS
CAPACITY Application Class
AlertLogSize

Reports the size of the alert log on the instance.

Collector: CollCapacity
BGDumpLeft

Reports the space in megabytes that is left in the file system, device, or mount point that contains the background dump directory for the Oracle instance.

This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
BGDumpLeftETF

Reports how long until there is no space left in the background dump directory for the monitored Oracle server. The annotation shows the day and time to failure or the reason data calculation cannot be done.

This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollETF
BGDumpUsed

Reports the space used in megabytes by trace files in the background dump directory for the Oracle server. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
BGDumpUsedPct

Reports the percentage of space used by trace files in the background dump directory for the monitored Oracle Server. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
CoreDumpLeft

Reports the space in megabytes that is left in the file system, device, or mount point that contains the core directory for the Oracle instance. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
CoreDumpLeftETF

Reports how long until there is no more space available in the core dump directory for the monitored Oracle Server. The annotation shows the day and time to failure or the reason data calculation cannot be done.

This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollETF
CoreDumpUsed

Reports the space in megabytes used in the core dump directory for the Oracle server.

This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
CoreDumpUsedPct

Reports the percentage of space used in the core dump directory for the monitored Oracle Server.

This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
CursorsUsed

Reports the percentage of open cursors used by any current user.

Collector: CollCapacity
LicenseLimit

Graphs how many concurrent sessions as set by the LICENSE_MAX_SESSIONS parameter can connect to an instance.

Collector: CollCapacity
LocksFree

Reports the number of free enqueue resources. If the parameter alarms, there are not enough enqueue resources left. The annotation reports the total number of locks by user in descending order.

Collector: CollCapacity
LocksUsed

Reports the percentage of used enqueue resources.

Collector: CollCapacity
ProcsLeft

Reports the number of additional processes that the instance can support. If this parameter alarms, the instance cannot support many more additional processes. The annotation reports the total number of processes by user in descending order.

Collector: CollCapacity
ProcsLeftETF

Shows how long until the instance can support no more processes. The annotation shows the day and time to failure or the reason data calculation cannot be done.

Collector: CollETF
ProcsUsed

Reports the ratio of current Oracle processes to the total number of processes allowed for the Oracle server. If the ratio is too high, there are not enough processes left on the Oracle server.

Collector: CollCapacity
SessionsLeft

Reports how many additional user sessions can be allowed by the instance using the current configuration for the instance. The annotation reports the total number of sessions by user in descending order.

Collector: CollCapacity
SessionsLeftETF

Shows how many additional user sessions will be allowed by the instance in its current configuration. The annotation shows the day and time to failure or the reason data calculation cannot be done.

Collector: CollETF
SessionsUsed

Shows the percentage of current sessions as measured against the session limit set by the init.ora SESSIONS parameter.

Collector: CollCapacity
TransLeft

Reports the number of transactions that are available to be started against the Oracle instance. The annotation reports the total number of transactions by user in descending order.

Collector: CollCapacity
TransUsed

Reports the percentage of total allowed transactions that have been used for the Oracle instance.

Collector: CollCapacity
UserDumpLeft

Reports the space in megabytes that is left in the file system, device, or mount point that contains the user dump directory for the Oracle instance. The annotation reports the destination of the user dump directory, the space used, and the free space left in the directory. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
UserDumpLeftETF

Reports how long until there are no megabytes left in the file system, device or mount point containing the user dump directory for the monitored Oracle Server. The annotation shows the day and time to failure or the reason data calculation cannot be done.

This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollETF
UserDumpUsed

Reports the space in megabytes that has been used in the used dump directory for the Oracle server. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
UserDumpUsedPct

Reports the percentage of space used in the user dump directory for the monitored Oracle Server. This parameter is not active for a remote instance and is not online if operating system components are not running.

Collector: CollCapacity
COLLECTORS Application Class
CollAvailability

Reports any problems with the collection process for the parameters in the AVAILABLITY application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollAvailability
CollCapacity

Reports any problems with the collection process for the parameters in the CAPACITY application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollCapacity
CollDbLinks

Reports any problems with the collection process for the parameters in the DB_LINKS application.

Collector: CollDbLinks
CollETF

Reports any problems with the collection process for the estimated time to failure parameters in the AVAILABILITY application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollETF
CollEnvironment

Reports any problems with the collection process for the parameters in the ENVIRONMENT application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollEnvironment
CollJobs

Reports any problems with the collection process for the parameters in the JOBS application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollJobs
CollLog

Reports any problems with the collection process for the parameters in the LOG application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollLog
CollMTS

Reports any problems with the collection process for the parameters in the MTS and MTS_DISP application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollMTS
CollNetwork

Reports any problems with the collection process for the parameters in the NETWORK application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollNetwork
CollPQO

Reports any problems with the collection process for the parameters in the PQO application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollPQO
CollPerformance

Reports any problems with the collection process for the parameters in the PERFORMANCE application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollPerformance
CollReplication

Reports any problems with the collection process for the parameters in the REPLICATION application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollReplication
CollResponse

Reports any problems with the collection process for the response parameters in the PERFORMANCE application. The annotation reports the nature of any problem with the collection process, and an event is raised.

Collector: CollResponse
CollSGA

Reports any problems with the collection process for the parameters in the SGA application. The annotation reports the nature of any problem with the collection process and an event is raised.

Collector: CollSGA
CollSqlViewer

Displays the status of the SQLViewer application and the status of the CollSqlViewer parameter collection. The annotation reports the nature of any problem with the collection process and an event is raised.

Collector: CollSqlViewer
CollTablespaces

Reports any problems with the collection process for the parameters in the TABLESPACES application. The annotation reports the nature of any problem with the collection process and an event is raised.

Collector: CollTablespaces
CollTempTS

Reports any problems with the collection process for the temporary tablespace parameters in the AVAILABILITY application. The annotation reports the nature of any problem with the collection process and an event is raised.

Collector: CollTempTS
CollUsers

Reports any problems with the collection process for the parameters in the USERS application. The annotation reports the nature of any problem with the collection process and an event is raised.

Collector: CollUsers
DB_LINKS_INSTANCE Application Class
PingTime

Displays the seconds it takes to ping the database on the other end of the database link.

Collector: CollDbLinks
ENVIRONMENT Application Class
BlkChgRatio

Reports the percentage of database block gets that are database block changes. The annotation reports the delta values used in the calculation.

Collector: CollEnvironment
BlkChgTrans

Reports the average number of block changes per transaction for all the transactions on the instance.

Collector: CollEnvironment
BlkGetsTrans

Reports the average number of block visits per transaction for all the transactions on the instance.

Collector: CollEnvironment
BlkUpdRatio

Reports the percentage of consistent gets and database block gets that are block changes.

Collector: CollEnvironment
CallsPerTrans

Reports the average number of use calls per transaction in the polling interval.

Collector: CollEnvironment
LongScanRatio

Reports the percentage of table scans that are full long table scans.

Collector: CollEnvironment
ParseCallRatio

Reports the percentage of user calls that are parse calls.

Collector: CollEnvironment
RecsvCallsRatio

Reports the percentage of all calls that are recursive calls.

Collector: CollEnvironment
RowSourceRatio

Reports the percentage of rows encountered during index lookup and full table scans that are rows encountered in full table scans.

Collector: CollEnvironment
JOBS Application Class
BrokenJobs

Shows any job flagged as broken. A job is labelled as either broken or not broken. Oracle does not attempt to run broken jobs.

Collector: CollJobs
FailedJobs

Shows any job considered a failure. A job is marked as a failed job if Oracle has failed to successfully execute the job. If a job fails 16 times, it is considered a broken job.

Collector: CollJobs
OverdueJobs

Displays the number of jobs that are more than 2 minutes late. These jobs may be delayed, broken, or failed.

Collector: CollJobs
LISTENER Application Class
ListenerLog

Alarms when an error has been recorded to the listener.log file.
ListenerLogSize

Reports the size of the listener.log file.
ListenerStatus

Reports the status of the SQL*Net or Net8 Listener.
ListenerTraceSize

Reports the size of the listener trace files.
LOG Application Class
ArchLogCreated

Alarms when a new archive log has been created, and calculates the number of archive logs created since the last polling cycle. The annotation for this parameter reports the thread number, sequence number, and the full pathname of the log file.

Collector: CollLog
RedoAllocationLatch

Reports the percentage of accesses on the redo allocation latch that are misses. The annotation reports the delta values used in the calculation.

Collector: CollLog
RedoArchDelay

Reports the number of minutes from the last time that the redo log was switched. The annotation for this parameter lists the unarchived redo log and the date and time for the first entry for the redo log.

This parameter reports no data if redo log archiving is not enabled.

Collector: CollLog
RedoCopyLatch

Reports the percentage of requests on the redo copy latch that have timed out. The annotation reports the delta values used in the calculation.

Collector: CollLog
RedoEntrySize

Reports the current average size of the redo log entries.

Collector: CollLog
RedoNotArch

Reports the number of redo log files that have been written but not yet archived, excluding the current online redo log file. When this parameter alarms, the archiving process may be falling behind. This parameter can only be instantiated when the monitored instance is running in ARCHIVELOG mode.

The annotation reports the unarchived log files with the date and time of the first time they were written.

Collector: CollLog
RedoRate

Reports the rate (KB per second) that data is added to the redo logs.

Collector: CollLog
RedoSmallCopyRatio

Reports the percentage of redo entries that are redo small copies. On a single-processor system, this parameter always has the value 100 because all redo entries are copied on the redo allocation latch.

Collector: CollLog
RedoWaitRatio

Reports the percentage of redo log entries that are redo log space requests during the last interval. The annotation reports the delta values used in the calculation.

Collector: CollLog
MTS Application Class
MTSProcsIdle

Reports the number of shared servers that are currently instantiated but are idle.

Collector: CollMTS
MTSProcsLeft

Reports the number of shared servers that are currently available because they are either idle or have not been created yet.

Collector: CollMTS
MTSProcsUsed

Reports the number of shared server processes that are currently being used.

Collector: CollMTS
MaxBusyRate

Reports the busy rate for the dispatcher.

Collector: CollMTS
MaxWaitTimes

Reports the average dispatcher waiting time.

Collector: CollMTS
MTS_DISP Application Class
BusyRate

Reports the percentage of time that each dispatcher process is busy. The annotation displays the name of the dispatcher process, the status of the process, the message size in bytes, and the number of breaks for each process.

Collector: CollMTS
QueueLength

Reports the current length of the dispatcher queue.

Collector: CollMTS
QueueWaitTime

Reports the average waiting time for the queue over the last interval. The annotation displays the dispatcher process, the queue for the process, and the waiting time for the process.

Collector: CollMTS
NETWORK Application Class
ClientBytesIn

Reports the number of bytes per second that were received via SQL*Net from the client during the last interval.

Collector: CollNetwork
ClientBytesOut

Reports the number of bytes per second that were sent via SQL*Net to the client during the last interval.

Collector: CollNetwork
ClientInLth

Reports the average length in bytes of the messages received from clients during the last interval.

Collector: CollNetwork
ClientMsgs

Reports the number of message round trips per second from the clients in the last interval.

Collector: CollNetwork
ClientOutLth

Reports the average length in bytes of the messages sent to clients during the last interval.

Collector: CollNetwork
DBLinkBytesIn

Reports the number of bytes received per second via SQL*Net from a dblink in the last interval.

Collector: CollNetwork
DBLinkBytesOut

Reports the number of bytes per second that were sent via SQL*Net to the dblink during the last interval.

Collector: CollNetwork
DBLinkInLth

Reports the average length in bytes of the messages received from dblinks during the last interval.

Collector: CollNetwork
DBLinkMsgs

Reports the number of message round trips per second from the dblinks in the last interval.

Collector: CollNetwork
DBLinkOutLth

Reports the average length in bytes of the messages sent to dblinks during the last interval.

Collector: CollNetwork
ORACLE Application Class
CollAvailability

Collects the information for the parameters in the AVAILABLITY application. The parameter CollAvailability in the COLLECTORS application displays any problems with the collection process.

Note: If you are running an application such as SAP or Oracle Applications, change the poll time of this collector to reduce CPU usage on your system.
CollCapacity

Collects the information for the parameters in the CAPACITY application. The parameter CollCapacity in the COLLECTORS application displays any problems with the collection process.
CollDbLinks

Collects the information for the parameters in the DB_LINKS application. The parameter CollDbLinks in the COLLECTORS application displays any problems with the collection process.
CollETF

Collects the information for the estimated time to failure parameters in the AVAILABILITY application. The parameter CollETF in the COLLECTORS application displays any problems with the collection process.
CollEnvironment

Collects the information for the parameters in the ENVIRONMENT application. The parameter CollEnvironment in the COLLECTORS application displays any problems with the collection process.
CollJobs

Collects the information for the parameters in the JOBS application. The parameter CollJobs in the COLLECTORS application displays any problems with the collection process.
CollLog

Collects the information for the parameters in the LOG application. The parameter CollLog in the COLLECTORS application displays any problems with the collection process.
CollMTS

Collects the information for the parameters in the MTS and MTS_DISP application. The parameter CollMTS in the COLLECTORS application displays any problems with the collection process.
CollNetwork

Collects the information for the parameters in the NETWORK application. The parameter CollNetwork in the COLLECTORS application displays any problems with the collection process.
CollPQO

Collects the information for the parameters in the PQO application. The parameter CollPQO in the COLLECTORS application displays any problems with the collection process.
CollPerformance

Collects the information for the parameters in the PERFORMANCE application. The parameter CollPerformance in the COLLECTORS application displays any problems with the collection process.
CollReplication

Collects the information for the parameters in the REPLICATION application. The parameter CollReplication in the COLLECTORS application displays any problems with the collection process.
CollResponse

Collects the information for the response parameters in the PERFORMANCE application. The parameter CollResponse in the COLLECTORS application displays any problems with the collection process.
CollSGA

Collects the information for the parameters in the SGA application. The parameter CollSGA in the COLLECTORS application displays any problems with the collection process.
CollSqlViewer

Displays the status and sets the polling time for the SQLVIEWER application. The parameter CollSqlViewer in the COLLECTORS application displays any problems with the collection process.
CollTablespaces

Collects the information for the parameters in the TABLESPACES application. The parameter CollTablespaces in the COLLECTORS application displays any problems with the collection process.
CollTempTS

Collects the information for the temporary tablespaces parameters in the AVAILABILITY application. The parameter CollTempTS in the COLLECTORS application displays any problems with the collection process.
CollUsers

Collects the information for the parameters in the USERS application. The parameter CollUsers in the COLLECTORS application displays any problems with the collection process.
InstanceCheck

Checks for any hanging of the database in discovery or the InstanceStatus parameter. If the duration of a PATROL Agent variable timestamp is larger than three minutes, InstanceCheck assumes that the database is hung, and closes the channel.

This prevents a hung database and/or a hung channel.
InstanceStatus

Collects the information for the InstanceStatus parameter in the AVAILABILITY application, and the OracleStatus parameter in the ORACLE application.
OracleStatus

Shows the current status of the instances on the Oracle Server. If an instance is in blackout mode or has been shutdown from within PATROL, the parameter is OK. If an instance is down and is 24/7, the parameter is in alarm. If the instance is down and is not 24/7, the parameter is in warn.

Collector: InstanceStatus
PERFORMANCE Application Class
BGChkpntRate

Reports the number of checkpoints per hour over the last interval.

Collector: CollPerformance
BlkChgRate

Reports the number of block changes per second in the last interval.

Collector: CollPerformance
BlkGetRate

Reports the number of block gets per second.

Collector: CollPerformance
CallRate

Reports the number of calls per second made to the database engine.

Collector: CollPerformance
ChkpntRate

Reports the average number of minutes between checkpoints.The annotation displays the number of checkpoints and their time period.

Collector: CollPerformance
ConsChgRatio

Reports the percentage of consistent gets that are consistent changes. The annotation reports the delta values used in the calculation.

Collector: CollPerformance
CurrentTrans

Reports the number of transaction enqueue locks that are held in exclusive mode.

Collector: CollPerformance
DBWRAvgBuffScanned

Graphs the average number of buffers that were looked at when scanning each LRU set for dirty buffers to clean.

Collector: CollPerformance
DBWRAvgScanDepth

Graphs the average scan depth (number of buffers examined by DBWR) that is added to this statistic every time DBWR scans the LRU for dirty buffers.

Collector: CollPerformance
DBWRBuffScanned

Displays the total number of buffers looked at when scanning each LRU set for dirty buffers to clean. This count includes both dirty and clean buffers.

Collector: CollPerformance
DBWRCheckpoints

Graphs the number of times the DBWR was asked to scan the cache and write all blocks marked for a checkpoint.

Collector: CollPerformance
DBWRCrossInstWrites

Graphs the total number of blocks written for other instances so that they can access the buffers.

Collector: CollPerformance
DBWRFreeBuffFound

Graphs the number of buffers that DBWR found to be clean when it was requested to make free buffers.

Collector: CollPerformance
DBWRLRUScans

Graphs the number of times that DBWR does a scan of the LRU queue looking for buffers to write.

Collector: CollPerformance
DBWRMakeFreeRequests

Graphs the number of messages received requesting DBWR to make some more free buffers for the LRU.

Collector: CollPerformance
DBWRReusableBuff

Graphs the number of buffers that DBWR found to be clean when it was requested to make free buffers.

Collector: CollPerformance
DBWRSummedScanDepth

Graphs the number of buffers examined by the DBWR to the current time. The current scan depth (number of buffers examined by DBWR) is added to this statistic every time DBWR scans the LRU for dirty buffers.

Collector: CollPerformance
DBWRTimeouts

Graphs the number of times that the DBWR has been idle since the last time-out. These are the times that the DBWR looked for buffers to idle write.

Collector: CollPerformance
DMLLocks

Reports the total percentage of DML locks in the instance.

Collector: CollPerformance
DiskSortRate

Reports the average number of disk sorts per second. The annotation reports the delta values used in the calculation.

Collector: CollPerformance
DiskSorts

Reports the percentage of all sorts that were not performed in memory during the last interval. The annotation reports the delta values used in the calculation.

Collector: CollPerformance
EnqConversions

Graphs the number of enqueue converts.

Collector: CollPerformance
EnqDeadlocks

Graphs the total number of enqueue deadlocks between different sessions.

Collector: CollPerformance
EnqReleases

Graphs the total number of enqueue releases.

Collector: CollPerformance
EnqRequests

Graphs the total number of enqueue gets.

Collector: CollPerformance
EnqTimeouts

Shows the number of times an enqueue lock was requested but was not granted immediately during the last hourly reporting interval.

Collector: CollPerformance
EnqWaits

Graphs the total number of waits that occurred during an enqueue convert or enqueue get because the enqueue could not be granted immediately.

Collector: CollPerformance
ExecRate

Reports the statement execution rate per second for the Oracle server.

Collector: CollPerformance
LockAvgWait

Reports the average wait time in seconds for a lock to be acquired. The annotation displays the Lock Conflict Report.

Collector: CollPerformance
LockWaitRatio

Reports the percentage of lock requests that had to wait for a lock to be acquired. The annotation reports the delta values used in the calculation.

Collector: CollPerformance
RSEntWaits

Reports the number of rollback segment entry waits per second in the last interval.

Collector: : CollPerformance
RSHdrWaits

Reports the percentage of gets that are rollback segment header waits.

Collector: CollResponse
ResponseExecTime

Reports the time it takes to execute the SQL file from the PATROL installation directory.

Collector: CollPerformance
ResponseSqlTime

Reports the execution time of SQL statements that have been issued against the Oracle server.

Collector: CollPerformance
RowsPerSort

Reports the average number of rows per sort for all sorts in the reporting period.

Collector: CollResponse
TransRate

Reports the number of transactions per hour for the last interval.

Collector: CollPerformance
UserCallRate

Reports the number of user calls per second.

Collector: CollPerformance
UserRBRatio

Reports the percentage of all transactions that have been rolled back in the last interval.

Collector: CollPerformance
PQO Application Class
QueriesInitiated

Reports the number of parallel queries initiated per hour in the last interval.

Collector: CollPQO
SlavesCPUUsed

Reports the total percentage of CPU time that was used by parallel query slaves in the last interval.

Collector: CollPQO
SlavesLeft

Reports the number of parallel query slaves currently available for assigning to statement processing.

Collector: CollPQO
SlavesPctBusy

Reports the current percentage of busy parallel query slaves.

Collector: CollPQO
SlavesUsed

Reports the total number of slaves that are currently working in a parallel query environment.

Collector: CollPQO
REPLICATION Application Class
InDoubtTrans

Shows any two-phase commits where the failure time is greater than 2 minutes.

Collector: CollReplication
RPCsPending

Shows any deferred remote procedure calls.

Collector: CollReplication
RepConflicts

Shows any jobs that have encountered a conflict.

Collector: CollReplication
SGA Application Class
BuffBusyRate

Reports the percentage of all block access attempts that resulted in waits in the last interval. The annotation reports the delta values used in the calculation.

Collector: CollSGA
BuffHitRatio

Reports the ratio of physical data blocks read to requests for data blocks. The annotation reports the percentage of data blocks read and the time interval used in the calculation.

Collector: CollSGA
DictHitRatio

Reports the percentage of all requests for data dictionary attributes that are resolved from the dictionary or row cache. The annotation displays a report to help determine which part of the cache are generating misses.

Collector: CollSGA
DictMisses

Graphs the total number of requests that resulted in cache misses (the information item was not saved in the data dictionary cache).

Collector: CollSGA
DictRequests

Graphs the total number of requests that accessed the data dictionary.

Collector: CollSGA
DictSlotsAvailable

Graphs the number of slots in the queue for managing buffers.

Collector: CollSGA
DictSlotsUsed

Graphs the number of slots used for managing the buffers that are available for read/write operations.

Collector: CollSGA
DictTotalSlots

Graphs the number of slots that can be used for managing the buffers and read/write operations.

Collector: CollSGA
FreeBuffWait

Reports the percentage of all free buffer access attempts that result in waits. The annotation reports the delta values used in the calculation.

Collector: CollSGA
LatchGetRatio

Reports the percentage of attempts to acquire a latch that are immediately successful. The annotation displays a report to help determine which parts of the cache are generating misses.

Collector: CollSGA
LibGetHitRatio

Reports the percentage of all attempts to lock library cache entries that were immediately successful. The annotation reports the delta values used in the calculation.

Collector: CollSGA
LibGetHits

Reports the number of all attempts to lock library cache entries that were immediately successful.

Collector: CollSGA
LibGetPinRatio

Reports the percentage of all attempts to access a library cache entry that were immediately successful because the entry was present in its entirety. The annotation reports the delta values used in the calculation.

Collector: CollSGA
LibGetRequests

Graphs the number of all attempts to access the library cache.

Collector: CollSGA
LibInvalidations

Shows how many SQL statements accessed an object with updated statistics in the data dictionary.

Collector: CollSGA
LibPinHits

Reports the number of all attempts to access a library cache entry that were immediately successful because the entry was present in its entirety.

Collector: CollSGA
LibPinRequests

Reports the number of all attempts to access a library cache entry that were requested.

Collector: CollSGA
LibReloads

Shows the number of library cache misses on execution steps.

Collector: CollSGA
RollBuffBusyRate

Reports the ratio of waits to block gets for rollback segments over each polling interval.

Collector: CollSGA
TBSP_INSTANCE Application Class
AutoExtended

Signals when a tablespace has automatically extended one or more of its datafiles. If the autoextend option is mode is set to OFF, this parameter does not appear. In warning and alarm states, the annotation shows the old and new sizes of all the files in the tablespace.

Collector: CollTablespaces
BlkReads

Reports the total number of logical block reads per second performed on the monitored tablespace in the last interval.

Collector: CollTablespaces
BlkWrites

Reports the total number of logical block writes per second performed on the monitored tablespace in the last interval.

Collector: CollTablespaces
PctUsed

Reports the percentage of space allocated to the monitored tablespace.

Collector: CollTablespaces
PhyReads

Reports the total number of physical block reads per second performed on the monitored tablespace in the last interval.

Collector: CollTablespaces
PhyWrites

Reports the total number of physical block writes per second performed on the monitored tablespace in the last interval.

Collector: CollTablespaces
SpaceLeft

Reports the free space in megabytes left in the monitored tablespace.

Collector: CollTablespaces
USERS Application Class
ActiveCalls

Reports the number of currently active users.

Collector: CollUsers
IDsInUse

Reports the currently connect distinct users.

Collector: CollUsers
ProblemUsers

Reports any problem users in the last interval and, if a problem user is found, reports the session details for the user. The parameter checks for blocked users, idle users, runaway users, and users who are using too much CPU. The annotation reports the type of problem user, the current value of the threshold, the current CPU statement, and all locks held by the user.

Collector: CollUsers
Users

Reports the total number of user sessions.

Collector: CollUsers
USERS_INSTANCE Application Class
USRCpuSeconds

Displays the CPU seconds consumed by the user session (based on the Oracle statistic CPU used by this session). To retrieve CPU data, the TIMED_STATISTICS parameter in the init.ora file must be set to TRUE.

Collector: CollUsers
USRDiskSorts

Displays the percentage of sorts not in memory (based on the Oracle session statistic session disk sorts).

Collector: CollUsers
USRLogicalReads

Displays the number of logical reads performed by the user session (based on the Oracle session statistic session logical reads).

Collector: CollUsers
USRMemoryUsed

Displays the amount of available memory used by the user session (based on the Oracle statistic session memory used).

Collector: CollUsers
USROpenCursors

Displays the number of current cursors opened by the user session (based on the Oracle statistic current open cursors).

Collector: CollUsers
USRPhysReads

Displays the number of physical reads performed by the user session (based on the Oracle statistic physical reads).

Collector: CollUsers
USRPhysWrites

Displays the number of physical writes performed by the user session (based on the Oracle statistic physical writes).

Collector: CollUsers
















PATROL for Oracle E-Business Suite 3.4.02


Table 28 PATROL for Oracle E-business Suite 3.4.02
Parameter



APPS_CPU Application Class
CpuSys

Displays the CPU system time utilization in percentage.

Collector: CollOSPerformance
CpuUser

Displays the CPU user time utilization in percentage.

Collector: CollOSPerformance
CpuUtil

Displays the total CPU utilization in percentage.

Collector: CollOSPerformance
APPS_FILESYS Application Class
FSAvailableSpace

Displays the file system available free space in kilobytes.

Collector: CollOSPerformance
FSCapacity

Displays the file system utilization in percentage.

Collector: CollOSPerformance
FSFreeInodes

Displays the number of free i-nodes.

Collector: CollOSPerformance
FSInodePctUsed

Displays the i-node utilization in percentage.

Collector: CollOSPerformance
APPS_FS_CONT Application Class
There are no parameters associated with the APPS_FS_CONT Application Class.
APPS_MEMORY Application Class
MemAvailable

Displays the amount of available memory in kilobytes.

Note: This parameter does not appear in the UNIX environment.

Collector: CollOSPerformance
MemFree

Displays the free memory in 1- K pages.

Collector: CollOSPerformance
MemPctUsed

Displays the percentage of memory that is used by Oracle Apps.

Note: This parameter does not appear in the UNIX environment.

Collector: CollOSPerformance
MemPgIn

Displays the pages swapped in per second.

Collector: CollOSPerformance
MemPgOut

Displays the pages swapped out per second.

Collector: CollOSPerformance
APPS_PRINT_CONT Application Class
There are no parameters associated with the APPS_PRINT_CONT Application Class.
APPS_PRINTER Application Class
PrtQueLength

Displays the number of jobs in the print queue.

Collector: CollOSPerformance
APPS_SWAP Application Class
SwapFree

Displays the system-wide free swap space in kilobyte blocks.

Collector: CollOSPerformance
SwapFreePct

Displays the system-wide free swap space in percentage.

Collector: CollOSPerformance
SwapFreeSize

Displays the system-wide free swap space in kilobytes.

Collector: CollOSPerformance
OA_ALERT Application Class
AlertMailStatus

Displays the status of the mail process used by the Oracle Applications Alert module. If the parameter measures a value greater than 0, it goes into alarm since the mail process is down.

Collector: CollAlert
ListALRExtOverThold

Displays the list of Oracle Alert critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollAlert
ListDupExp

Displays the list of duplicated exceptions that occurred during the last polling cycle.

Collector: CollAlert
ListEventExp

Displays the list of event exceptions that occurred during the time period specified in the last polling cycle.

Collector: CollAlert
ListInvResponseExp

Displays the list of invalid response exceptions that occurred during the last polling cycle.

Collector: CollAlert
ListNoResponseExp

Displays the list of no-response exceptions that occurred during the time period specified in the last polling cycle.

Collector: CollAlert
ListPeriodicExp

Displays the list of periodic exceptions that occurred during the time period specified in the last polling cycle.

Collector: CollAlert
NumALRExtOverThold

Displays the number of critical tables and their associated indexes for the Oracle Alert application with extents over the high extent threshold.

Collector: CollAlert
NumDupExp

Displays the duplicated exceptions that occurred during the time period specified in the last polling cycle.

Collector: CollAlert
NumEventExp

Displays the number of event exceptions that occurred during the last polling cycle.

Collector: CollAlert
NumInvResponseExp

Displays the number of invalid response exceptions that occurred since last collection. PATROL polls twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollAlert
NumNoResponseExp

Displays the number of no-response exceptions that occurred during the last polling cycle.

Collector: CollAlert
NumPeriodicExp

Displays the number of periodic exceptions that occurred during the last polling cycle.

Collector: CollAlert
WorkFlowMailStatus

Displays the status of the work flow mailer process on a designated node. If the mailer process is not running on that node, the parameter goes into alarm status.

Collector: CollAlert
OA_ALL_SYS Application Class
DCMMonitor

Displays the status of the operating system KM (up or down), as well as the status of specific components.

Note: This parameter is invisible.

Collector: Sets its own value.
OA_AOL Application Class
ListAOLExtOverThold

Displays the list of AOL critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollApplications
NumAOLExtOverThold

Displays the number of critical tables and their associated indexes with extents over the high extent threshold for the AOL module.

Collector: CollApplications
OA_AP Application Class
ExpenseImportStatus

Displays the status of the Payables Invoice Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListAPCompletedReq

Displays the list of all completed AP module requests (normal, warning, error) during the last polling cycle.

Collector: CollConcurrentReq
ListAPExtOverThold

Displays the list of AP critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListAPProcess

Displays the list of AP processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListAPUserLogin

Displays the list of current user login sessions in AP.

Collector: CollApplUser
ListErrExpenseImport

Lists the details of the AP Expense Report Transactions table rows that contain errors.

Collector: CollInterface
ListErrPayablesOpenImport

Lists the details of the AP Invoice Transactions table rows that contain errors.

Collector: CollInterface
NumAPCheck

Displays the number of AP checks issued since the last OA_AP discovery.

Collector: CollApplications
NumAPCompletedReq

Displays the number of all completed AP requests (normal, warning, error) during the last polling cycle.

Collector: CollConcurrentReq
NumAPExtOverThold

Displays the number of AP critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumAPInv

Displays the number of AP invoices entered since the last OA_AP discovery.

Collector: CollApplications
NumAPInvalChk

Displays the number of invalid AP checks issued since the last OA_AP discovery.

Collector: CollApplications
NumAPInvLine

Displays the number of AP invoice lines entered since the last OA_AP discovery.

Collector: CollApplications
NumAPInvOnHold

Displays the total number of AP invoices put on hold during any given polling cycle.

Collector: CollApplications
NumAPProcess

Displays the number of AP processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumAPUserLogin

Displays the number of current user login sessions in AP.

Collector: CollApplUser
NumErrExpenseImport

Displays the number of rows in the AP Expense Report Transaction tables that contain errors.

Collector: CollInterface
NumErrPayablesOpenImport

Displays the number of rows in the AP Invoice Transaction tables that contain errors.

Collector: CollInterface
PayablesOpenImportStatus

Displays the status of the Payables Open Interface Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_APACHE Application Class
ApacheStatus

Displays the status of the Apache processes. The stoplight appears green when Apache is up; and a red stoplight indicates Apache is down. Each instance of this class monitors the Apache on a specified application server.

Collector: CollWebServer
ListApacheProcess

Displays a list of all Apache processes that are currently running.

Collector: CollWebServer
NumApacheProcess

Displays the number of Apache processes completed during the last discovery cycle.

Collector: CollWebServer
OA_APINTRFC Application Class
ExpenseImportStatus

Displays the status of the Payables Invoice Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrExpenseImport

Lists the details of the AP Expense Report Transactions table rows that contain errors.

Collector: CollInterface
ListErrPayablesOpenImport

Lists the details of the AP Invoice Transactions table rows that contain errors.

Collector: CollInterface
NumErrExpenseImport

Displays the number of rows in the AP Expense Report Transaction tables that contain errors.

Collector: CollInterface
NumErrPayablesOpenImport

Displays the number of rows in the AP Invoice Transaction tables that contain errors.

Collector: CollInterface
PayablesOpenImportStatus

Displays the status of the Payables Open Interface Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_APP_CONT Application Class
There are no parameters associated with the OA_APP_CONT Application Class.
OA_APPLICATION Application Class
There are no parameters associated with the OA_APPLICATION Application Class.
OA_APPSERV Application Class
There are no parameters associated with the OA_APPSERV Application Class.
OA_AR Application Class
AutoinvoiceImportStatus

Displays the status of the Autoinvoice Master program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
CustomerIntrfcStatus

Displays the status of the Customer Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListARCompletedReq

Displays the list of all AR requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListARExtOverThold

Displays the list of AR critical tables with extents over the high extent threshold.

Collector: CollDatabase
ListARProcess

Displays the list of AR processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
ListARUserLogin

Displays the list of current user login sessions in AR.

Collector: CollApplProcess
ListErrArPaymentsIntrfc

Lists the details of the AR Payments Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrCashRcptLinesIntrfc

Lists the details of the AR Interim Cash Rcpt Lines Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrRaCustomersIntrfc

Lists the details of the Customer Details Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrRaLinesIntrfc

Lists the details of the RA Line Details Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrSalesTaxRateIntrfc

Lists the details of the AR Tax Interface Transactions table rows that contain errors.

Collector: CollInterface
NumARAdjust

Displays the number of adjusted AR invoices entered since the last OA_AR discovery.

Collector: CollApplications
NumARCompletedReq

Displays the number of all AR requests (normal, warning, error) completed since the last collection. The PATROL for Oracle E-Business Suite will poll twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollConcurrentReq
NumARCrdMemo

Displays the number of AR credit memos issued since the last OA_AR discovery.

Collector: CollApplications
NumARDispute

Displays the number of disputed AR invoices entered since the last OA_AR discovery.

Collector: CollApplications
NumARExtOverThold

Displays the number of AR critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumARInv

Displays the number of AR invoices entered since the last OA_AR discovery.

Collector: CollApplications
NumARProcess

Displays the number of AR processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumARReceipt

Displays the number of AR receipts issued since the last OA_AR discovery.

Collector: CollApplications
NumARUserLogin

Displays the number of current user login sessions in AR.

Collector: CollApplUser
NumErrArPaymentsIntrfc

Displays the number of rows in the AR Payments Interface Transactions tables that contain errors.

Collector: CollInterface
NumErrCashRcptLinesIntrfc

Displays the number of rows in the AR Interim Cash Rcpt Lines Interface Transactions tables that contain errors.

Collector: CollInterface
NumErrRaCustomersIntrfc

Displays the number of rows in the Customer Details Interface Transactions tables that contain errors.

Collector: CollInterface
OA_ARINTRFC Application Class
AutoinvoiceImportStatus

Displays the status of the Autoinvoice Master program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
CustomerIntrfcStatus

Displays the status of the Customer Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrArPaymentsIntrfc

Lists the details of the AR Payments Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrCashRcptLinesIntrfc

Lists the details of the AR Interim Cash Rcpt Lines Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrRaCustomersIntrfc

Lists the details of the Customer Details Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrRaLinesIntrfc

Lists the details of the RA Line Details Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrSalesTaxRateIntrfc

Lists the details of the AR Tax Interface Transactions table rows that contain errors.

Collector: CollInterface
NumErrArPaymentsIntrfc

Displays the number of rows in the AR Payments Interface Transactions tables that contain errors.

Collector: CollInterface
NumErrCashRcptLinesIntrfc

Displays the number of rows in the AR Interim Cash Rcpt Lines Interface Transactions tables that contain errors.

Collector: CollInterface
NumErrRaCustomersIntrfc

Displays the number of rows in the Customer Details Interface Transactions tables that contain errors.

Collector: CollInterface
NumErrRaLinesIntrfc

Displays the number of rows in the RA Line Details Interface Transactions tables that contain errors.

Collector: CollInterface
NumErrSalesTaxRateIntrfc

Displays the number of rows in the AR Tax Interface Transactions tables that contain errors.

Collector: CollInterface
SalesTaxRateIntrfcStatus

Displays the status of the Sales Tax Rate Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_AVAILABILITY Application Class
ListDBAppError

Lists errors found in either the Oracle database or Oracle Applications during the period specified in the error display window, including the time and error information.

Collector: CollAvailability
NumAppError

Displays the number of errors of the internal manager of Oracle Applications during the time period specified in the error display window. The parameter goes into alarm if an application error has been detected.

Collector: CollAvailability
NumDBError

Displays the number of database errors that occurred during the time period specified in the error display window. The parameter goes into alarm if a database error has been detected.

Collector: CollAvailability
OAStatus

Displays the status of the Oracle application. This status is a combination of DbStatus, SqlNetStatus, Concurrent managers, Forms server, Web server, Metrics Server and Metrics Client.
If the DB listener, the application listener, the Internal manager, and the Conflict Resolution manager are up and running, the parameter is a green stoplight. The parameter is a red stoplight if one or more of the following is down: DB listener, application listener, Internal manager, and Conflict Resolution manager. The OAStatus parameter is a yellow stoplight (warning status), if one or more of the middle-tier application servers is down.

Collector: CollAvailability
OA_BOM Application Class
BomBillRoutingIntrfcStatus

Displays the status of the Bill and Routing Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListBOMCompletedReq

Displays the list of all BOM requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListBOMExtOverThold

Displays the list of BOM critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListBOMProcess

Displays the list of BOM processes, which include user login processes and concurrent manager processes.

Collector: CollApplProcess
ListBOMUserLogin

Displays the list of current user login sessions in BOM.

Collector: CollApplUser
ListErrBomBillMtlsIntrfc

Lists the details of the BOM Transactions Interface table rows that contain errors.

Collector: CollInterface
ListErrBomInvCompIntrfc

Lists the details of the BOM Inventory Components Transactions Interface table rows that contain errors.

Collector: CollInterface
ListErrBomOpResIntrfc

Lists the details of the BOM Operation Resources Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomOpRoutIntrfc

Lists the details of the BOM Operation Routings Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomOpSeqIntrfc

Lists the details of the BOM Operation Sequences Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomRefDesgIntrfc

Lists the details of the BOM Reference Designators Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomSubCompIntrfc

Lists the details of the BOM Substitute Components Transaction Interface table rows that contain errors.

Collector: CollInterface
NumBOMBillofMtl

Displays the number BOM header records entered or revised since the last OA_BOM discovery.

Collector: CollApplications
NumBOMCompletedReq

Displays the number of all BOM requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumBOMExtOverThold

Displays the number of BOM critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumBOMInvComp

Displays the number BOM inventory component lines entered since the last OA_BOM discovery.

Collector: CollApplications
NumBOMProcess

Displays the number of BOM processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumBOMRouting

Displays the number BOM routings entered since the last OA_BOM discovery.

Collector: CollApplications
NumBOMUserLogin

Displays the number of current user login sessions in BOM.

Collector: CollApplUser
NumErrBomBillMtlsIntrfc

Displays the number of rows in the BOM Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomInvCompIntrfc

Displays the number of rows in the BOM Inventory Components Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomOpResIntrfc

Displays the number of rows in the BOM Operation Resources Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomOpRoutIntrfc

Displays the number of rows in the BOM Operation Routings Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomOpSeqIntrfc

Displays the number of rows in the BOM Operation Sequences Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomRefDesgIntrfc

Displays the number of rows in the BOM Reference Designators Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomSubCompIntrfc

Displays the number of rows in the BOM Substitute Components Transaction Interface tables that contain errors.

Collector: CollInterface
OA_BOMINTRFC Application Class
BomBillRoutingIntrfcStatus

Displays the status of the Bill and Routing Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrBomBillMtlsIntrfc

Lists the details of the BOM Transactions Interface table rows that contain errors.

Collector: CollInterface
ListErrBomInvCompIntrfc

Lists the details of the BOM Inventory Components Transactions Interface table rows that contain errors.

Collector: CollInterface
ListErrBomOpResIntrfc

Lists the details of the BOM Operation Resources Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomOpRoutIntrfc

Lists the details of the BOM Operation Routings Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomOpSeqIntrfc

Lists the details of the BOM Operation Sequences Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomRefDesgIntrfc

Lists the details of the BOM Reference Designators Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrBomSubCompIntrfc

Lists the details of the BOM Substitute Components Transaction Interface table rows that contain errors.

Collector: CollInterface
NumErrBomBillMtlsIntrfc

Displays the number of rows in the BOM Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomInvCompIntrfc

Displays the number of rows in the BOM Inventory Components Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomOpResIntrfc

Displays the number of rows in the BOM Operation Resources Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomOpRoutIntrfc

Displays the number of rows in the BOM Operation Routings Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomOpSeqIntrfc

Displays the number of rows in the BOM Operation Sequences Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomRefDesgIntrfc

Displays the number of rows in the BOM Reference Designators Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrBomSubCompIntrfc

Displays the number of rows in the BOM Substitute Components Transaction Interface tables that contain errors.

Collector: CollInterface
OA_CN Application Class
ListCNCompletedReq

Displays the list of all CN requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListCNExtOverThold

Displays the list of CN critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListCNProcess

Displays the list of CN processes, which include user login processes and concurrent manager processes.

Collector: CollApplProcess
ListCNUserLogin

Displays the list of current user login sessions in CN.

Collector: CollDatabase
NumCNCommHeader

Displays the number of Commission header transactions.

Collector: CollApplications
NumCNCommLines

Displays the number of Commission lines transactions.

Collector: CollApplications
NumCNCommLinesApi

Displays the number of all Commission lines API transactions.

Collector: CollApplications
NumCNCompletedReq

Displays the number of all CN requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumCNExtOverThold

Displays the number of CN critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumCNProcess

Displays the number of CN processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumCNProcessBatch

Displays the number of CN process batches entered since the last discovery.

Collector: CollApplications
NumCNUserLogin

Displays the number of current user login sessions in CN.

Collector: CollApplUser
OA_COLLECTOR Application Class
Alert

Displays the status of the data collections of the Alert DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollAlert
Applications

Displays the status of the data collections of the Applications DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollApplications
ApplProcess

Displays the status of the data collections of the Application Process server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollApplProcess
ApplUser

Displays the status of the data collections of the Application User server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollApplUser
Availability

Displays the status of the data collections of the Availability DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollAvailability
ConcurrentMgr

Displays the status of the data collections of the Concurrent Manager DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollConcurrentMgr
ConcurrentReq

Displays the status of the data collections of the Concurrent Request DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollConcurrentReq
Database

Displays the status of the data collections of the Database server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollDatabase
FormsServer

Displays the status of the data collections of the Forms Server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollFormsServer
MetricsClients

Displays the status of the data collections of the Metrics Clients DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollMetricsClients
MetricsServer

Displays the status of the data collections of the Metrics Server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollMetricsServer
OSPerformance

Displays the status of the data collections of the OS Performance DB server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollOSPerformance
WebServer

Displays the status of the data collections of the Web Server (OA system).
When the parameter is in the alarm state, it is unable to collect data for the server.

Collector: CollWebServer
OA_CONM Application Class
MGRMustExist

Displays the status of the standard concurrent manager and all user-selected concurrent managers. If any one of the included concurrent managers is missing or offline, the parameter will alarm.

Collector: CollConcurrentMgr
OA_CONM_HOST Application Class
FNDFSListenerStatus

Displays the status of the Oracle Applications listener. If the listener is up, the parameter is green; if the listener is down, the parameter is red.

Collector: CollConcurrentMgr
ListLogFreeSpace

Displays the list of individual module names, log file name, and the available space on the file system where its log file is located. This parameter is not shown if the common log file is used instead of the individual module log files.

Collector: CollConcurrentMgr
LogFileFreeSpace

Displays the available space on the file system where the concurrent manager log file is located. This parameter is not shown if log files for individual modules are used instead of the common log file.

Collector: CollConcurrentMgr
WorstLogFreeSpace

Displays the minimum available space among all the file systems where the individual module log files are located. This parameter is not shown if the common log file is used instead of the individual module log files.

Collector: CollConcurrentMgr
OA_DB Application Class
There are no parameters associated with the OA_DB Application Class.
OA_DBSESSION Application Class
ListAllDBSession

Displays the list of all current database sessions.

Collector: CollDatabase
NumAllDBSession

Displays the total number of current database sessions.

Collector: CollDatabase
OA_DBSTATUS Application Class
ListListenerService

Lists the required service names for the specified listeners and their status. Annotated from SqlNetStatus.

Collector: CollDatabase
LocalResponseTime

Displays the number of seconds the local host takes to connect to the database.

Collector: CollDatabase
OraDbStatus

Displays the status of the Oracle database. If the database is up, the parameter is green; if the database is down, the parameter is red. If the database is down, the OraDbStatus recovery action reports that the Oracle Database is down.

Collector: CollDatabase
SqlNetStatus

Displays the status of the SQL*NET by checking for the existence of two services: SID service and FNDFS* service. If both the SID and the FNDFS* service are up, the parameter is green; if the SID service or both services are down, the parameter is red. If only the FNDFS* service is down, the parameter is yellow.
If SQL*NET is down, the SqlNetStatus recovery action reports that SQL*NET is down.

Collector: CollDatabase
OA_FORMS Application Class
FormsServerStatus

Displays the status of the forms server. A green stoplight parameter icon indicates the forms server is up and the collection was successful; a red stoplight parameter icon indicates the forms server is down but the collection was successful. A grayed-out stoplight parameter icon indicates the collection failed due to agent-to-agent communication problems.

Collector: CollFormsServer
ListFormsClients

Displays all forms server connections from forms clients, including the process name, process ID, parent process ID, CPU, memory size, and the IP addresses for the forms clients. This parameter receives annotation from the NumFormsClients parameter.

Collector: CollFormsServer
ListFormsServer

Displays the process name, process ID, parent process ID, CPU, memory size, and up/down status for the forms server instance.

Collector: CollFormsServer
ListOrphanClients

Displays a list of orphan forms client processes. For each process listed the report will display OS PID, OS PPID, CPU utilization, and program name. This parameter receives annotation from the NumOrphanClients parameter.

Collector: CollFormsServer
NumFormsClients

Displays the number of forms server connections from forms clients. This parameter writes annotation to the ListFormsClients parameter.

Collector: CollFormsServer
NumOrphanClients

Displays the number of orphan processes on the forms client. This parameter writes annotations to the ListOrphanClients parameter.

Collector: CollFormsServer
OA_GL Application Class
BudgetIntrfcStatus

Displays the status of the Budget Upload program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
GLIeaIntrfcStatus

Displays the status of the Importing Intercompany Transactions program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
JournalImportStatus

Displays the status of the Journal Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrBudgetIntrfc

Lists the details of the GL Budgets Interface table rows that contain errors.

Collector: CollInterface
ListErrDailyRates

Lists the details of the GL Daily Rates Interface table rows that contain errors.

Collector: CollInterface
ListErrGLIeaIntrfc

Lists the details of the GL IEA Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrJournalImport

Lists the details of the Journal Import Transactions table rows that contain errors.

Collector: CollInterface
ListGLCompletedReq

Displays the list of all GL requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListGLExtOverThold

Displays the list of GL critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListGLProcess

Displays the list of GL processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListGLUserLogin

Displays the list of current user login sessions in GL.

Collector: CollApplUser
NumErrBudgetIntrfc

Displays the number of rows in the GL Budgets Interface tables that contain errors.

Collector: CollInterface
NumErrDailyRates

Displays the number of rows in the GL Daily Rates Interface tables that contain errors.

Collector: CollInterface
NumErrGLIeaIntrfc

Displays the number of rows in the GL IEA Interface Transaction tables that contain errors.

Collector: CollInterface
NumErrJournalImport

Displays the number of rows in the Journal Import Transaction tables that contain errors.

Collector: CollInterface
NumGLCompletedReq

Displays the number of all GL requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumGLExtOverThold

Displays the number of GL critical tables with extents over the high extent threshold.

Collector: CollDatabase
NumGLJou

Displays the number of GL journals entered since the last OA_GL discovery.

Collector: CollApplications
NumGLJouLine

Displays the number of GL journal lines entered since the last OA_GL discovery.

Collector: CollApplications
NumGLPostErr

Displays the number of GL post errors that occurred since the last OA_GL discovery.

Collector: CollApplications
NumGLProcess

Displays the number of GL processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumGLUserLogin

Displays the number of current user login sessions in GL.

Collector: CollApplUser
OA_GLINTRFC Application Class
BudgetIntrfcStatus

Displays the status of the Budget Upload program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
GLIeaIntrfcStatus

Displays the status of the Importing Intercompany Transactions program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
JournalImportStatus

Displays the status of the Journal Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrBudgetIntrfc

Lists the details of the GL Budgets Interface table rows that contain errors.

Collector: CollInterface
ListErrDailyRates

Lists the details of the GL Daily Rates Interface table rows that contain errors.

Collector: CollInterface
ListErrGLIeaIntrfc

Lists the details of the GL IEA Interface Transactions table rows that contain errors.

Collector: CollInterface
ListErrJournalImport

Lists the details of the Journal Import Transactions table rows that contain errors.

Collector: CollInterface
NumErrBudgetIntrfc

Displays the number of rows in the GL Budgets Interface tables that contain errors.

Collector: CollInterface
NumErrDailyRates

Displays the number of rows in the GL Daily Rates Interface tables that contain errors.

Collector: CollInterface
NumErrGLIeaIntrfc

Displays the number of rows in the GL IEA Interface Transaction tables that contain errors.

Collector: CollInterface
NumErrJournalImport

Displays the number of rows in the Journal Import Transaction tables that contain errors.

Collector: CollInterface
OA_HR Application Class
ListHRCompletedReq

Displays a list of all completed HR requests within the last polling cycle.

Collector: CollConcurrentReq
ListHRExtOverThold

Displays a list of critical HR tables and their associated indexes with extents over the high extent threshold, its table space, and number of extents, annotated from NumHRExtOverThold.

Collector: CollDatabase
ListHRProcess

Displays a list of HR processes, including both user login and concurrent manager processes and all child processes annotated from NumHRProcess.

Collector: CollApplProcess
ListHRUserLogin

Displays a list of of current user login sessions in HR.

Collector: CollApplUser
NumHRApplicant

Displays the number of HR applicant records entered or revised since last discovery.

Collector: CollApplications
NumHRAssignment

Displays the number of HR assignment records entered since the last discovery.

Collector: CollApplications
NumHRCompletedReq

Displays the number of completed HR requests within last polling cycle.

Collector: CollConcurrentReq
NumHREmployee

Displays the number of HR employee records entered or revised since last discovery.

Collector: CollApplications
NumHRExtOverThold

Displays the number of HR critical tables and their associated indexes with extents over the high extent threshold annotated to ListHRExtOverThold.

Collector: CollDatabase
NumHRProcess

Displays the number of HR processes, including both user login and concurrent manager processes, annotated to ListHRProcess.

Collector: CollApplProcess
NumHRUserLogin

Displays the number of of current user login sessions in HR.

Collector: CollApplUser
OA_INTERFACE Application Class
There are no parameters associated with the OA_INTERFACE Application Class.
OA_INT_MGR Application Class
ActiveConMgrProcess

Displays the following information for each concurrent manager: queue ID, concurrent manager PID, Oracle PID, OS PID, manager name, node name, starting time, status.

Collector: CollConcurrentMgr
InternalMgrStatus

Displays the status of the internal manager. A green stoplight indicates that the internal manager and the conflict resolution manager are up and running. A red stoplight indicates that the internal manager and/or the conflict resolution manager are not running.

Collector: CollConcurrentMgr
OA_INV Application Class
DemandIntrfcStatus

Displays the status of the Process Demand Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ItemsIntrfcStatus

Displays the status of the Open Item Interface program and the related table records. If interface transaction processes are scheduled in the program, the parameter is green; if the interface transaction processes are not scheduled in the program but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrDemandsIntrfc

Lists the details of the Material Demands Interface table rows that contain errors.

Collector: CollInterface
ListErrItemsIntrfc

Lists the details of the System Items Interface table rows that contain errors.

Collector: CollInterface
ListErrMtlTransIntrfc

Lists the details of the Material Transactions Interface table rows that contain errors.

Collector: CollInterface
ListErrMtlTransTemp

Lists the details of the Material Transactions table rows that contain errors.

Collector: CollInterface
ListINVCompletedReq

Displays the list of all INV requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListINVExtOverThold

Displays the list of INV critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListINVProcess

Displays the list of INV processes, which include user login processes and concurrent manager processes.

Collector: CollApplProcess
ListINVUserLogin

Displays the list of of current user login sessions in INV.

Collector: CollApplUser
MtlTransIntrfcStatus

Displays the status of the Open Transaction Interface program and the related table records If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
MtlTransTempStatus

Displays the status of the Process Transaction Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
NumErrDemandsIntrfc

Displays the number of rows in the Material Demands Interface tables that contain errors.

Collector: CollInterface
NumErrItemsIntrfc

Displays the number of rows in the System Items Interface tables that contain errors.

Collector: CollInterface
NumErrMtlTransIntrfc

Displays the number of rows in the Material Transactions Interface tables that contain errors.

Collector: CollInterface
NumErrMtlTransTemp

Displays the number of rows in the Material Transaction tables that contain errors.

Collector: CollInterface
NumINVCompletedReq

Displays the number of all INV requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumINVCycleCount

Displays the number of INV Cycle Count headers processed since the last OA_INV discovery.

Collector: CollApplications
NumINVCycleLines

Displays the number of INV Cycle Count lines processed since the last OA_INV discovery.

Collector: CollApplications
NumINVExtOverThold

Displays the number of INV critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumINVProcess

Displays the number of INV processes including both user login process and concurrent manager processes.

Collector: CollApplProcess
NumINVTransaction

Displays the number of INV material transactions entered since the last OA_INV discovery.

Collector: CollApplications
NumINVUserLogin

Displays the number of current user login sessions in INV.

Collector: CollApplUser
OA_INVINTRFC Application Class
DemandIntrfcStatus

Displays the status of the Process Demand Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ItemsIntrfcStatus

Displays the status of the Open Item Interface program and the related table records. If interface transaction processes are scheduled in the program, the parameter is green; if the interface transaction processes are not scheduled in the program but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrDemandsIntrfc

Lists the details of the Material Demands Interface table rows that contain errors.

Collector: CollInterface
ListErrItemsIntrfc

Lists the details of the System Items Interface table rows that contain errors.

Collector: CollInterface
ListErrMtlTransIntrfc

Lists the details of the Material Transactions Interface table rows that contain errors.

Collector: CollInterface
ListErrMtlTransTemp

Lists the details of the Material Transactions table rows that contain errors.

Collector: CollInterface
MtlTransIntrfcStatus

Displays the status of the Open Transaction Interface program and the related table records If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
MtlTransTempStatus

Displays the status of the Process Transaction Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
NumErrDemandsIntrfc

Displays the number of rows in the Material Demands Interface tables that contain errors.

Collector: CollInterface
NumErrItemsIntrfc

Displays the number of rows in the System Items Interface tables that contain errors.

Collector: CollInterface
NumErrMtlTransIntrfc

Displays the number of rows in the Material Transactions Interface tables that contain errors.

Collector: CollInterface
NumErrMtlTransTemp

Displays the number of rows in the Material Transaction tables that contain errors.

Collector: CollInterface
OA_LISTENER Application Class
ListenerStatus

Displays the status of the web listener. A green stoplight parameter icon indicates the web listener is up; a red stoplight parameter icon indicates the web listener is down.

Collector: CollWebServer
ListListenerProcess

Displays a list of all processes associated with the web listener instance. Displays the common name, process name, process ID, parent process ID, CPU, memory size, and up/down status for each process.

Collector: CollWebServer
OA_METRICS_CLI Application Class
ListMetricsClient

Displays the process name, process ID, parent process ID, port number, connected metrics server name and port number, up/down status, CPU and memory size for the metrics client.

Collector: CollMetricsClients
MetricsClientStatus

Displays the status of this metrics client. A green stoplight parameter icon indicates the metrics client is up and the collection was successful; a red stoplight parameter icon indicates the metrics client is down but the collection was successful. A grayed-out stoplight parameter icon indicates the collection failed due to agent-to-agent communication problems. These problems may include network problems, a remote agent that is down, or an invalid default account on the local or the remote agent.

Collector: CollMetricsClients
OA_METRICS_SRV Application Class
ListMetricsServer

Displays the process name, process ID, parent process ID, port number, up/down status, CPU and memory size for the metrics server.

Collector: CollMetricsServer
MetricsServerStatus

Displays the status of the metrics server. A green stoplight parameter icon indicates the metrics server is up and the collection was successful; a red stoplight parameter icon indicates the metrics server is down but the collection was successful. A grayed-out stoplight parameter icon indicates the collection failed due to agent-to-agent communication problems. These problems may include network problems, a remote agent that is down, or an invalid default account on the local or the remote agent.

Collector: CollMetricsServer
NumMetricsClients

Displays the number of metrics clients.

Collector: CollMetricsClients
OA_MGR Application Class
ConMgrStatus

Displays the status of the concurrent managers. A green stoplight indicates the concurrent managers are running OK. A red stoplight indicates that one or more of the target processes of concurrent manager are down.

Collector: CollConcurrentMgr
ConMgrUtilization

Displays the percentage of time this concurrent manager spent processing requests since the last performance statistics polling.

Collector: CollConcurrentReq
ListErrCompletedReq

Displays the list of concurrent requests for this concurrent manager that completed with an error during the last polling cycle.

Collector: CollConcurrentReq
ListMgrCompletedReq

Displays the list of all requests (normal, warning, error) completed on this concurrent manager during the last polling cycle.

Collector: CollConcurrentReq
ListMgrRunPendReq

Displays the list of running requests on a specific concurrent manager, and the list of the pending requests that entered a pending status after they started to run on this concurrent manager.

Collector: CollConcurrentReq
ListTargetProcs

Displays all the target processes for this concurrent manager.

Collector: CollConcurrentMgr
ListWarnCompletedReq

Displays the list of concurrent requests for this concurrent manager that completed with a warning during the last polling cycle.

Collector: CollConcurrentReq
NumErrCompletedReq

Displays the number of concurrent requests for this concurrent manager that completed with an error during the last polling cycle.

Collector: CollConcurrentReq
NumMgrCompletedReq

Displays the number of requests (normal, warning, error) completed since last collection. The value displayed will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollConcurrentReq
NumMgrRunPendReq

Displays the number of running requests on a specific concurrent manager, and the pending requests that entered a pending status after they started to run on this concurrent manager.

Collector: CollConcurrentReq
NumTargetProcs

Displays the number of target processes for this concurrent manager.

Collector: CollConcurrentReq
NumWarnCompletedReq

Displays the number of concurrent requests for this concurrent manager that completed with a warning during the last polling cycle.

Collector: CollConcurrentReq
WaitingTimeStats

Displays the average waiting time for concurrent requests assigned to this manager. The average waiting time for requests that started running after the last performance statistics polling is displayed.

Collector: CollConcurrentReq
OA_MRP Application Class
ListErrMrpForecastIntrfc

Lists the details of the MRP Forecast Transactions table rows that contain errors.

Collector: CollInterface
ListErrMrpSchedIntrfc

Lists the details of the MRP Schedule Interface table rows that contain errors.

Collector: CollInterface
ListMRPCompletedReq

Displays the list of all MRP requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListMRPExtOverThold

Displays the list of MRP critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListMRPProcess

Displays the list of MRP processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListMRPUserLogin

Displays the listof current user login sessions in MRP.

Collector: CollApplUser
NumErrMrpForecastIntrfc

Displays the number of rows in the MRP Forecast Transaction tables that contain errors.

Collector: CollInterface
NumErrMrpSchedIntrfc

Displays the number of rows in the MRP Schedule Interface tables that contain errors.

Collector: CollInterface
NumMRPCompletedReq

Displays the number of all MRP requests (normal, warning, error) completed since last collection. The value displayed will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollConcurrentReq
NumMRPExtOverThold

Displays the number of MRP critical tables and their associated indexes with extents over the highest extent threshold.

Collector: CollDatabase
NumMRPFcast

Displays the number of forecast headers entered since the last OA_MRP discovery.

Collector: CollApplications
NumMRPFcastLine

Displays the number of forecast lines entered since the last OA_MRP discovery.

Collector: CollApplications
NumMRPProcess

Displays the number of MRP processes including both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumMRPSched

Displays the schedule headers entered since the last OA_MRP discovery.

Collector: CollApplications
NumMRPSchedLine

Displays the schedule lines entered since the last OA_MRP discovery.

Collector: CollApplications
NumMRPUserLogin

Displays the number of current user login sessions in MRP.

Collector: CollApplUser
OA_MRPINTRFC Application Class
ListErrMrpForecastIntrfc

Lists the details of the MRP Forecast Transactions table rows that contain errors.

Collector: CollInterface
ListErrMrpSchedIntrfc

Lists the details of the MRP Schedule Interface table rows that contain errors.

Collector: CollInterface
NumErrMrpForecastIntrfc

Displays the number of rows in the MRP Forecast Transaction tables that contain errors.

Collector: CollInterface
NumErrMrpSchedIntrfc

Displays the number of rows in the MRP Schedule Interface tables that contain errors.

Collector: CollInterface
PlanningMgrStatus

Displays the status of the Planning Manager program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_MSC Application Class
ListMSCCompletedReq

Displays the list of all MSC requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListMSCExtOverThold

Displays the list of MSC critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListMSCProcess

Displays the list of MSC processes, which include user login processes and concurrent manager processes.

Collector: CollApplProcess
ListMSCUserLogin

Displays the list of current user login sessions in MSC.

Collector: CollApplUser
NumMSCBomComp

Displays the number of components used in a Bill Of Material entered since the last discovery.

Collector: CollApplications
NumMSCBoms

Displays the number of Bills Of Material created since the last collection.

Collector: CollApplications
NumMSCBorReq

Displays the number of set of required resources entered since the last discovery.

Collector: CollConcurrentReq
NumMSCCompletedReq

Displays the number of all MSC requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumMSCDemands

Displays the number MSC demands entered since the last discovery.

Collector: CollApplications
NumMSCExtOverThold

Displays the number of MSC critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumMSCOperationComp

Displays the number of operation components entered since the last discovery.

Collector: CollApplications
NumMSCOperationRes

Displays the number of operation resources entered since the last discovery.

Collector: CollApplications
NumMSCOperationResSeq

Displays the number of operation resources for each routing operation entered since the last discovery.

Collector: CollApplications
NumMSCPegDemandSupply

Displays the number of pegging from supply to demands entered since the last discovery.

Collector: CollApplications
NumMSCProcess

Displays the number of MSC processes, which includes both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumMSCResourceAvail

Displays the number of resource availability profiles entered since the last discovery.

Collector: CollApplications
NumMSCRoutingOperat

Displays the number of operations composing each routing entered since the last discovery.

Collector: CollApplications
NumMSCSystemItems

Displays the number of organization items entered since the last discovery.

Collector: CollApplications
NumMSCUserLogin

Displays the number of current user login sessions in MSC.

Collector: CollApplUser
OA_OE Application Class
DeliveryIntrfcStatus

Displays the status of the Delivery-based Ship Confirm Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrDeliveryIntrfc

Lists the details of the Delivery Transactions Open Interface table rows that contain errors.

Collector: CollInterface
ListOECompletedReq

Displays the list of all OE requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListOEExtOverThold

Displays the list of OE critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListOEProcess

Displays the list of OE processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListOEUserLogin

Displays the list of current user login sessions in OE.

Collector: CollApplUser
NumOECompletedReq

Displays the number of all OE requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumOEExtOverThold

Displays the number of OE critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumOEOrder

Displays the number of OE sales orders entered since the last OA_OE discovery.

Collector: CollApplications
NumOEOrderLine

Displays the number of OE sales order lines entered since the last OA_OE discovery.

Collector: CollApplications
NumOEProcess

Displays the number of OE processes including both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumOEUserLogin

Displays the number of current user login sessions in OE.

Collector: CollApplUser
OA_OEINTRFC Application Class
DeliveryIntrfcStatus

Displays the status of the Delivery-based Ship Confirm Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ListErrDeliveryIntrfc

Lists the details of the Delivery Transactions Open Interface table rows that contain errors.

Collector: CollInterface
NumErrDeliveryIntrfc

Displays the number of rows in the Delivery Transactions Open Interface tables that contain errors.

Collector: CollInterface
OA_OM Application Class
ListErrOeLinesIntrfc

Lists the details of the OE Headers and OE Lines Interface Transactions table rows that contain errors.

Collector: CollInterface
ListOMCompletedReq

Displays the list of all OM requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListOMExtOverThold

Displays the list of OM critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListOMProcess

Displays the list of OM processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListOMUserLogin

Displays the list of current user login sessions in OM.

Collector: CollApplUser
NumErrOeLinesIntrfc

Displays the number of rows in the OE Headers and OE Lines Interface Transaction tables that contain errors.

Collector: CollInterface
NumOMCompletedReq

Displays the number of all OM requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumOMExtOverThold

Displays the number of OM critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumOMOrder

Displays the number of OM Order Headers created since the last collection.

Collector: CollApplications
NumOMOrderLine

Displays the number of OM sales order lines created since the last collection.

Collector: CollApplications
NumOMProcess

Displays the number of OM processes including both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumOMUserLogin

Displays the number of current user login sessions in OM.

Collector: CollApplUser
OrderImportStatus

Displays the status of the Order Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_OMINTRFC Application Class
ListErrOeLinesIntrfc

Lists the details of the OE Headers and OE Lines Interface Transactions table rows that contain errors.

Collector: CollInterface
NumErrOeLinesIntrfc

Displays the number of rows in the OE Headers and OE Lines Interface Transaction tables that contain errors.

Collector: CollInterface
OrderImportStatus

Displays the status of the Order Import program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_OS Application Class
AgentStatus

Displays the status of the PATROL Agent that is running on the host. When the agent is up, the parameter is green, and when the agent is down the parameter is red.
Note: The notification only appears on a remote host in a multi-node environment.

Collector: CollOSPerformance
OSProcessCollStatus

Displays the status of the Collector of OS Processes. If the DCM is up and the collector is active, the parameter is green; if the DCM is down and the collector is inactive, the parameter is red.

Note: This parameter only appears on a local host server.

Collector: CollOSPerformance
OA_OS_PROC Application Class
ListOrphanProcess

Displays the list of detected orphan processes.

Collector: CollOSPerformance
ListZombieProcess

Displays a list of all zombie processes, and for each zombie process, the list displays its parent process.

Collector: CollOSPerformance
NumOrphanProcess

Displays the number of orphan processes related to Oracle Applications. Discovery of an orphan process will activate a recovery action that prompts you to kill the process.

Collector: CollOSPerformance
NumRunningProcess

Displays the number of all running processes.

Collector: CollOSPerformance
NumSleepingProcess

Displays the number of all sleeping processes.

Collector: CollOSPerformance
NumStoppedProcess

Displays the number of all stopped processes.

Collector: CollOSPerformance
NumZombieProcess

Displays the number of all detected zombie processes.

Collector: CollOSPerformance
OA_PAY Application Class
ListPAYCompletedReq

Displays the list of all completed PAY requests within the last polling cycle.

Collector: CollConcurrentReq
ListPAYExtOverThold

Displays the list of PAY critical tables and their associated indexes with extents over the high extent threshold, its table space and number of extents, annotated from NumPAYExtOverThold.

Collector: CollDatabase
ListPAYProcess

Displays the list of PAY processes, including both login and concurrent manager processes and all child processes, annotated from NumPAYProcess.

Collector: CollApplProcess
ListPAYUserLogin

Displays the list of current user login sessions in PAY, showing the Oracle Application UID, Oracle UID, OS UID, Oracle Audit Session ID, Connection Time, Terminal, number of forms, and Responsible Application.

Collector: CollApplUser
NumPAYCompletedReq

Displays the number of all completed PAY requests within the last polling cycle.

Collector: CollConcurrentReq
NumPAYExtOverThold

Displays the number of PAY critical tables and their associated indexes with extents over the high extent threshold, annotated to ListPAYExtOverThold.

Collector: CollDatabase
NumPAYMixErrors

Reports the number of errors or warnings generated when processing a PayMIX line from a batch processed since last discovery.

Collector: CollApplications
NumPAYMixLines

Displays the number of payroll MIX (Mass Information eXchange) lines from a batch created or processed since last discovery.

Collector: CollApplications
NumPAYProcess

Displays the number of PAY processes, including both user login and concurrent manager processes; annotated to ListPAYProcess.

Collector: CollApplProcess
NumPAYUserLogin

Displays the number of current user login sessions in PAY.

Collector: CollApplUser
OA_PO Application Class
ListErrPoDocumentsIntrfc

Lists the details of the PO Headers Open Interface table rows that contain errors.

Collector: CollInterface
ListErrPoReqIntrfc

Lists the details of the PO Requisitions Open Interface table rows that contain errors.

Collector: CollInterface
ListErrRcvTransIntrfc

Lists the details of the RCV Transactions Open Interface table rows that contain errors.

Collector: CollInterface
ListErrReschedReqIntrfc

Lists the details of the PO Reschedule Open Interface table rows that contain errors.

Collector: CollInterface
ListPOCompletedReq

Displays the list of all PO requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListPOExtOverThold

Displays the list of PO critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListPOProcess

Displays the list of PO processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListPOUserLogin

Displays the list of current user login sessions in PO.

Collector: CollApplUser
NumErrPoDocumentsIntrfc

Displays the number of rows in the PO Headers Open Interface tables that contain errors.

Collector: CollInterface
NumErrPoReqIntrfc

Displays the number of rows in the PO Requisitions Open Interface tables that contain errors.

Collector: CollInterface
NumErrRcvTransIntrfc

Displays the number of rows in the RCV Transactions Open Interface tables that contain errors.

Collector: CollInterface
NumErrReschedReqIntrfc

Displays the number of rows in the PO Reschedule Open Interface tables that contain errors.

Collector: CollInterface
NumPOCompletedReq

Displays the number of all PO requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumPOExtOverThold

Displays the number of PO critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumPOOrder

Displays the number of purchase orders entered since the last OA_PO discovery.

Collector: CollApplications
NumPOOrderLine

Displays the number of purchase order lines entered since the last OA_PO discovery.

Collector: CollApplications
NumPOProcess

Displays the number of PO processes including both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumPOReceipt

Displays the receipt headers entered since the last OA_PO discovery.

Collector: CollApplications
NumPOReceiptLine

Displays the receipt lines entered since the last OA_PO discovery.

Collector: CollApplications
NumPOReqLine

Displays the requisition lines entered since the last OA_PO discovery.

Collector: CollApplications
NumPORequisition

Displays the requisition headers entered since the last OA_PO discovery.

Collector: CollApplications
NumPOUserLogin

Displays the number of current user login sessions in PO.

Collector: CollApplUser
PoDocumentsIntrfcStatus

Displays the status of the Purchasing Documents Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
PoReqIntrfcStatus

Displays the status of the Autoinvoice Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
RcvTransIntrfcStatus

Displays the status of the Receiving Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ReschedReqIntrfcStatus

Displays the status of the Reschedule Requisitions Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_POINTRFC Application Class
ListErrPoDocumentsIntrfc

Lists the details of the PO Headers Open Interface table rows that contain errors.

Collector: CollInterface
ListErrPoReqIntrfc

Lists the details of the PO Requisitions Open Interface table rows that contain errors.

Collector: CollInterface
ListErrRcvTransIntrfc

Lists the details of the RCV Transactions Open Interface table rows that contain errors.

Collector: CollInterface
ListErrReschedReqIntrfc

Lists the details of the PO Reschedule Open Interface table rows that contain errors.

Collector: CollInterface
NumErrPoDocumentsIntrfc

Displays the number of rows in the PO Headers Open Interface tables that contain errors.

Collector: CollInterface
NumErrPoReqIntrfc

Displays the number of rows in the PO Requisitions Open Interface tables that contain errors.

Collector: CollInterface
NumErrRcvTransIntrfc

Displays the number of rows in the RCV Transactions Open Interface tables that contain errors.

Collector: CollInterface
NumErrReschedReqIntrfc

Displays the number of rows in the PO Reschedule Open Interface tables that contain errors.

Collector: CollInterface
PoDocumentsIntrfcStatus

Displays the status of the Purchasing Documents Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
PoReqIntrfcStatus

Displays the status of the Autoinvoice Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
RcvTransIntrfcStatus

Displays the status of the Receiving Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
ReschedReqIntrfcStatus

Displays the status of the Reschedule Requisitions Open Interface program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_PROBE Application Class
APResp

Measures Account Payables response time in seconds from an end user, using table AP_CHECKS_ALL or user-defined SQL statements.

Collector: CollProbe
ARResp

Measures Account Receivables response time in seconds from an end user, using table AR_CASH_RECEIPTS_ALL or user-defined SQL statements.

Collector: CollProbe
BOMResp

Measures Bill of Materials response time in seconds from an end user, using table BOM_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbe
CollProbe

Collects the information for the OA_PROBE parameters.

Collector: Sets its own value
CNResp

Measures Sales Compensation response time in seconds from an end user, using table CN_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbe
GLResp

Measures General Ledger response time in seconds from an end user, using table GA_BALANCES or user-defined SQL statements.

Collector: CollProbe
HRResp

Measures Human Resource response time in seconds from an end user, using table PER_ALL_PEOPLE_E (R11) or PER_PEOPLE_F (R11), or user-defined SQL statements.

Collector: CollProbe
INVResp

Measures Inventory module response time in seconds from an end user, using table MTL_CYCLE_COUNT_ITEMS or user-defined SQL statements.

Collector: CollProbe
LoginResp

Measures length of time for an end user to log in to the Oracle application.

Collector: CollProbe
MRPResp

Measures Master Scheduling/Material Requirement Planning response time in seconds from an end user, using table MRP_PLANS or user-defined SQL statements.

Collector: CollProbe
MSCResp

Measures Supply Chain response time in seconds from an end user, using table MSC_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbe
OAResp

Measures typical OA response time in seconds from an end user, using table FND_LOGINS or user-defined SQL statements.

Collector: CollProbe
OEResp

Measures order entry response time in seconds from an end user, using table SO_LINE_ALL or user-defined SQL statements.

Collector: CollProbe
OMResp

Measures Order Management response time in seconds from an end user, using table OM_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbe
PAYResp

Measures Payroll module response time in seconds from an end user, using table PAY_ELEMENT_ENTRY_VALUES_F or user-defined SQL statements.

Collector: CollProbe
POResp

Measures Purchase Order response time in seconds from an end user, using table PO_REQUISITIONS_LINES or user-defined SQL statements.

Collector: CollProbe
UserConnStatus

Displays Oracle Application end-user connection status of using Oracle Application. A green stoplight indicates the application is up; a red stoplight indicates the application is down.

Collector: CollProbe
WIPResp

Measures Work in Process response time in seconds from an end user, using table WIP_LINES or user-defined SQL statements.

Collector: CollProbe
OA_PROBE_CONT Application Class
There are no parameters associated with the OA_PROBE_CONT Application Class.
OA_PROBE_MON Application Class
APResp

Measures Account Payables response time in seconds from an end user, using table AP_CHECKS_ALL or user-defined SQL statements.

Collector: CollProbeMon
ARResp

Measures Account Receivables response time in seconds from an end user, using table AR_CASH_RECEIPTS_ALL or user-defined SQL statements.

Collector: CollProbeMon
BOMResp

Measures Bill of Materials response time in seconds from an end user, using table BOM_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbeMon
CNResp

Measures Sales Compensation response time in seconds from an end user, using table CN_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbeMon
GLResp

Measures General Ledger response time in seconds from an end user, using table GA_BALANCES or user-defined SQL statements.

Collector: CollProbeMon
HRResp

Measures Human Resources module response time in seconds from an end user, using table PER_ALL_PEOPLE_E (R11) or PER_PEOPLE_F (R10) or user-defined SQL statements.

Collector: CollProbeMon
INVResp

Measures Inventory module response time in seconds from an end user, using table MTL_CYCLE_COUNT_ITEMS or user-defined SQL statements.

Collector: CollProbeMon
LoginResp

Measures how long it takes an end user to log in to Oracle.

Collector: CollProbeMon
MRPResp

Measures Master Scheduling/Material Requirement Planning response time in seconds from an end user, using table MRP_PLANS or user-defined SQL statements.

Collector: CollProbeMon
MSCResp

Measures Supply Chain response time in seconds from an end user, using table MSC_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbeMon
OAResp

Measures typical OA response time in seconds from an end user, using table FND_LOGINS, or user-defined SQL statements.

Collector: CollProbeMon
OEResp

Measures Order Entry response time in seconds from an end user, using table SO_LINE_ALL or user-defined SQL statements.

Collector: CollProbeMon
OMResp

Measures Order Management response time in seconds from an end user, using table OM_INVENTORY_COMPONENTS or user-defined SQL statements.

Collector: CollProbeMon
PAYResp

Measures Payroll module response time in seconds from an end user, using table PAY_ELEMENT_ENTRY_VfALUES_F or user-defined SQL statements.

Collector: CollProbeMon
POResp

Measures Purchase Order response time in seconds from an end user, using table PO_REQUISITION_LINES or user-defined SQL statements.

Collector: CollProbeMon
ProbeAgentStatus

Displays the status of the remote probe agent. 0 (green) stands for up; 1(red) stands for down.

Collector: CollProbeMon
UserConnStatus

Displays Oracle Application end user connection status of using Oracle Application. 0 (green) stands for up; 1 (red) stand for down.

Collector: CollProbeMon
WIPResp

Measures Work in Process response time in seconds from an end user, using table WIP_LINES or user-defined SQL statements.

Collector: CollProbeMon
OA_PROBE_MON_CONT Application Class
CollProbeMon

Collects the information for the OA_PROBE_MON parameters.

Collector: Sets it own value
OA_PROCESS Application Class
CPUAllDBProcess

Displays the total CPU percentage consumed by all the Oracle database-related processes.

Collector: CollApplProcess
CPUAppUsage

Displays the total CPU percentage consumed by all the Oracle Applications-related processes. The number of processes is shown in the NumAppProcess parameter.

Collector: CollApplProcess
DiskAppUsage

Displays the total disk usage of the Oracle Application.

Collector: CollApplProcess
ListAppProcess

Displays the list of Oracle Application processes, which includes user login processes, concurrent manager processes, and all child processes.

Collector: CollApplProcess
ListBckgrdProcess

Displays the list of Oracle database background processes.

Collector: CollApplProcess
ListBlockedProcess

Displays the list of blocked Oracle processes.

Collector: CollApplProcess
ListDisconDBProcess

Displays a list of Oracle-related processes that have lost their Oracle connections.

Collector: CollApplProcess
ListHighCPUProcess

Displays the list of Oracle processes with a CPU utilization exceeding the High CPU Threshold.

Collector: CollApplProcess
ListLongIdleProcess

Displays the list of Oracle processes with an idle time exceeding the Long Idle Threshold. The PATROL KM for Oracle Applications will poll twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollApplProcess
ListOtherDBProcess

Displays the list of Oracle processes not included in Oracle background and application processes. These processes include SQL*PLUS connections, PATROL for Oracle E-Business Suite ADI processes, and all their child processes.

Collector: CollApplProcess
MemAppUsage

Displays the total memory used by all related processes of the Oracle Application.

Collector: CollApplProcess
NumAllDBProcess

Displays the total number of processes related to Oracle Applications. This value is the sum of all DB processes.

Collector: CollApplProcess
NumAppProcess

Displays the number of Oracle Application processes including both user login processes and concurrent manager processes and all their child processes.

Collector: CollApplProcess
NumBckgrdProcess

Displays the number of Oracle database background processes.

Collector: CollApplProcess
NumBlockedProcess

Displays the number of blocked Oracle processes.

Collector: CollApplProcess
NumDisconDBProcess

Displays the number of Oracle-related processes that have lost their Oracle connections. Discovery of a disconnected process will activate a recovery action. The recovery action prompts you to kill the disconnected process.

Collector: CollApplProcess
NumHighCPUProcess

Displays the number of Oracle processes with a CPU utilization that exceeds the High CPU Threshold.

Collector: CollApplProcess
NumLongIdleProcess

Displays the number of Oracle processes with an idle time that exceeds the Long Idle Threshold. The PATROL KM for Oracle Applications will poll twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollApplProcess
NumOtherDBProcess

Displays the number of Oracle processes not included in Oracle background and application processes. These processes include SQL*PLUS connections, Oracle Applications ADI processes, and all their child processes.

Collector: CollApplProcess
OA_REQUEST Application Class
ListCompletedReq

Displays the list of all requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListErrCompletedReq

Displays the list of concurrent requests that completed with an error during the last polling cycle.

Collector: CollConcurrentReq
ListLongPendingReq

Displays the list of long pending requests that exceed the long-pending threshold.

Collector: CollConcurrentReq
ListLongRunningReq

Displays the list of long running requests.

Collector: CollConcurrentReq
ListNoManagerReq

Displays the list of concurrent requests not assigned to an active concurrent manager.

Collector: CollConcurrentReq
ListRequestSetsError

Displays the list of the individual concurrent requests within request sets that completed with error.

Collector: CollConcurrentReq
ListRequestSetsWarn

Displays the list of the individual concurrent requests within request sets that completed with warning.

Collector: CollConcurrentReq
ListRunningPendingReq

Displays the list requests that are running and/or pending while the collector is collecting data.

Collector: CollConcurrentReq
ListWarnCompletedReq

Displays the list of concurrent requests that completed with a warning during the last polling cycle.

Collector: CollConcurrentReq
NumCompletedReq

Displays the number of all requests (normal, warning, error) completed since the last collection. Product Name Long will poll twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollConcurrentReq
NumErrCompletedReq

Displays the number of concurrent requests that completed with an error during the last polling cycle. This parameter ignores the requests in the Error Exclusion List.

Collector: CollConcurrentReq
NumLongPendingReq

Displays the total number of long-pending requests that exceed the long-pending threshold.

Collector: CollConcurrentReq
NumLongRunningReq

Displays the number of long running requests.

Collector: CollConcurrentReq
NumNoManagerReq

Displays the number of concurrent requests not assigned to an active concurrent manager.

Collector: CollConcurrentReq
NumRunningPendingReq

Displays the total number requests that are running and/or pending while the collector is collecting data.

Collector: CollConcurrentReq
NumWarnCompletedReq

Displays the number of concurrent requests that completed with a warning during the last polling cycle. This parameter ignores the requests in the Warning Exclusion List.

Collector: CollConcurrentReq
RequestSetsErrStatus

Displays the status of the request sets completed with errors. A green stoplight parameter icon indicates the concurrent request sets are fine; a red stoplight parameter icon indicates that one or more of the concurrent requests within the monitored request sets are completed with errors.

Collector: CollConcurrentReq
RequestSetsWarnStatus

Displays the status of the request sets completed with warning. A green stoplight parameter icon indicates the concurrent request sets are fine; a red stoplight parameter icon indicates that one or more of the concurrent requests within the monitored request sets are completed with warning.

Collector: CollConcurrentReq
ScheduledConReq

Displays the status of the standard scheduled requests. A green stoplight parameter icon indicates that there are standard scheduled concurrent requests waiting in queue; a red stoplight parameter icon indicates that the scheduled concurrent requests are not in the queue.

Collector: CollConcurrentReq
OA_SYS_CONT Application Class
There are no parameters associated with the OA_SYS_CONT Application Class.
OA_SYSTEM Application Class
CollAlert

Collects the information for the parameters in the OA_ALERT application.
CollApplications

Collects the information for the parameters in the OA_APPLICATION application.
CollApplProcess

Collects the information for the parameters in the OA_PROCESS application and for process-related parameters in other application classes.
CollApplUser

Collects the information for the parameters in the OA_USER application and for user-related parameters in other application classes.
CollAvailability

Collects the information for the parameters in the OA_AVAILABILITY application.
CollConcurrentMgr

Collects the information for the parameters in the OA_CONM, OA_INT_MGR and OA_MGR applications.)
CollConcurrentReq

Collects the information for the parameters in the OA_REQUEST application and for request-related parameters in other application classes.
CollDatabase

Collects the information for the parameters in the OA_DB application and for database-related parameters in other application classes.
CollFormsServer

Collects the information for the parameters in the OA_FORMS application.
CollInterface

Collects the information for the parameters in the modules of the OA_INTERFACE application and for request-related parameters in other application classes.
CollMetricsClients

Collects the information for the parameters in the OA_METRICS_CLI application.
CollMetricsServer

Collects the information for the parameters in the OA_METRICS_SRV application.
CollOSPerformance

Collects the information for the parameters in the OA_OS application and for performance-related parameters in other application classes.
CollWebServer

Collects the information for the parameters in the OA_WEB application and for middle-tier server parameters in other application classes.
OA_TABLESPACE Application Class
ListObjExtOverThold

Displays the list of objects with extents over the high extent threshold.

Collector: CollDatabase
NumObjExtOverThold

Displays the number of objects with extents over the high extent threshold.

Collector: CollDatabase
TBSCapacity

Displays the percentage of used tablespace.

Collector: CollDatabase
OA_TBLSP_CONT Application Class
There are no parameters associated with the OA_TBLSP_CONT Application Class.
OA_URL Application Class
URLResponse

Displays the response time of the URL.

Collector: CollWebServer
URLStatus

Displays the status of the URL.
If the URL is available on the web, the parameter is green; if the URL is unavailable, the parameter is red.

Collector: CollWebServer
OA_USER Application Class
ListAppUserLogin

Displays the list of Oracle Applications user login sessions which are monitored by the OA_APPLICATION class

Collector: CollApplUser
ListInactiveSession

Displays the list of currently inactive user sessions that are monitored by the OA_APPLICATION application class. The PATROL KM for Oracle Applications will poll twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollApplProcess
ListMultiLoginUser

Displays the list of users with login sessions that exceed the Login Session Threshold.

Collector: CollApplUser
ListSelUserResUsage

Displays the summarized resource usage per line for each selected user.

Collector: CollApplUser
ListSelUserSessions

Displays session information for selected users, including application user name, Oracle database user name, OS user name, OS process ID, Oracle process ID, start time, and program name.

Collector: CollApplUser
ListTopUserResUsage

Displays summarized resource usage per line for each top user, including CPUUsage, MemoryUsage, NetworkUsage, UserErrorCount, NumOfSession, and TransactionRate.

Collector: CollApplUser
ListTopUserSessions

Displays session information for top users, including application user name, Oracle database user name, OS user name, OS process ID, Oracle process ID, start time, and program name.

Collector: CollApplUser
NumActiveSession

Displays the total number of currently active Oracle Applications user sessions.

Collector: CollApplProcess
NumAppUser

Displays the total number of unique users currently logged into Oracle Applications.

Collector: CollApplUser
NumAppUserLogin

Displays the total number of user logins into Oracle Applications.

Collector: CollApplUser
NumInactiveSession

Displays the total number of currently inactive Oracle Applications user sessions.

The PATROL KM for Oracle Applications will poll twice to get the delta value before displaying a value in the parameter. The value shown in the parameter will be the difference between the value received from the first polling cycle and the value received from the second polling cycle.

Collector: CollApplProcess
NumMultiLoginUser

Displays the total number of users with sessions that exceed the Login Session Threshold.

Collector: CollApplUser
NumUsedLicenses

Displays the number of concurrent used licenses. This number is determined by the license type. The Name license type uses the current number of Oracle Applications users as the license number, while the Session license type uses the current number of DB sessions as the license number.

Collector: CollApplUser
NumUserExceedLic

Shows the number of DB sessions or the number of login sessions that crossed the Concurrent User Licenses threshold setting, depending on the selected license type.The Name license type uses the current number of Oracle Applications users as the license number, while the Session license type uses the current number of DB sessions as the license number. PATROL reports when the threshold is exceeded, and you are prompted to kill the user sessions. If there is only a single console connection, the dialog box prompts you to automatically kill sign-on user sessions. If there are multiple console connections, the dialog box displays instructions for manually killing user sessions.

Collector: CollApplUser
OA_WEB Application Class
ListWRBProcess

Displays a list of all Web Request Broker (WRB) processes, including the common name, process name, process ID, parent process ID, CPU, memory size, and up/down status for each process.

Collector: CollWebServer
WRBStatus

Displays the status of the WRB processes. Green indicates WRB is up; and a red icon indicates WRB is down. Each instance of this class monitors the WRB on a specified application server.

Collector: CollWebServer
OA_WIP Application Class
ListErrWipCostTxnIntrfc

Lists the details of the WIP Cost Transaction table rows that contain errors.

Collector: CollInterface
ListErrWipMassLoadIntrfc

Lists the details of the WIP Job Schedule Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrWipMoveTxnIntrfc

Lists the details of the WIP Move Transaction table rows that contain errors.

Collector: CollInterface
ListWIPCompletedReq

Displays the list of all WIP requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
ListWIPExtOverThold

Displays the list of WIP critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
ListWIPProcess

Display the list of WIP processes, which includes user login processes and concurrent manager processes.

Collector: CollApplProcess
ListWIPUserLogin

Displays the list of current user login sessions in WIP.

Collector: CollApplUser
NumErrWipCostTxnIntrfc

Displays the number of rows in the WIP Cost Transaction tables that contain errors.

Collector: CollInterface
NumErrWipMassLoadIntrfc

Displays the number of rows in the WIP Job Schedule Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrWipMoveTxnIntrfc

Displays the number of rows in the WIP Move Transaction tables that contain errors.

Collector: CollInterface
NumWIPCompletedReq

Displays the number of all WIP requests (normal, warning, error) completed during the last polling cycle.

Collector: CollConcurrentReq
NumWIPExtOverThold

Displays the number of WIP critical tables and their associated indexes with extents over the high extent threshold.

Collector: CollDatabase
NumWIPOperation

Displays the number of WIP operations entered or revised since the last OA_WIP discovery.

Collector: CollApplications
NumWIPOpRes

Display the number WIP operation resource records entered since the last OA_WIP discovery.

Collector: CollApplications
NumWIPProcess

Display the number of WIP processes including both user login processes and concurrent manager processes.

Collector: CollApplProcess
NumWIPTransaction

Displays the number of WIP transactions entered since the last OA_WIP discovery.

Collector: CollApplications
NumWIPUserLogin

Displays the number of current user login sessions in WIP.

Collector: CollApplUser
WipCostTxnIntrfcStatus

Displays the status of the Cost Manager program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
WipMassLoadPending

Displays the status of the WIP Mass Load program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
WipMoveTxnIntrfcStatus

Displays the status of the WIP Move Transaction Manager program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
OA_WIPINTRFC Application Class
ListErrWipCostTxnIntrfc

Lists the details of the WIP Cost Transaction table rows that contain errors.

Collector: CollInterface
ListErrWipMassLoadIntrfc

Lists the details of the WIP Job Schedule Transaction Interface table rows that contain errors.

Collector: CollInterface
ListErrWipMoveTxnIntrfc

Lists the details of the WIP Move Transaction table rows that contain errors.

Collector: CollInterface
NumErrWipCostTxnIntrfc

Displays the number of rows in the WIP Cost Transaction tables that contain errors.

Collector: CollInterface
NumErrWipMassLoadIntrfc

Displays the number of rows in the WIP Job Schedule Transaction Interface tables that contain errors.

Collector: CollInterface
NumErrWipMoveTxnIntrfc

Displays the number of rows in the WIP Move Transaction tables that contain errors.

Collector: CollInterface
WipCostTxnIntrfcStatus

Displays the status of the Cost Manager program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
WipMassLoadJobsPending

Displays the status of the WIP Mass Load program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface
WipMoveTxnIntrfcStatus

Displays the status of the WIP Move Transaction Manager program and the related table records. If interface transaction programs are scheduled, the parameter is green; if the interface transaction programs are not scheduled but the rows in the related interface table are pending, the parameter is red.

Collector: CollInterface

    















PATROL KM for Oracle Parallel Server 8.5.10


Table 29 PATROL KM for Oracle Parallel Server 8.5.10
Parameter



OPSINST Application Class
LockElementWaits

Oracle version 7.x databases only.

Reports the average time an OPS instance spent waiting on a PCM lock conversion.

Collector: OPSPrmColl
NULLtoSConversions

Reports the number of PCM lock conversions from NULL to S per minute for an instance.

Collector: OPSPrmColl
NULLtoXConversions

Reports the number of PCM lock conversions from NULL to X (lock buffers for write) per minute for an instance.

Collector: OPSPrmColl
OPSInstanceStatus

Monitors the status of an associated Oracle instance. Not visible to the user because it is a Collector parameter.
OPSPrmColl

Collects values for all the OPS instance parameters. Not visible to the user because it is a Collector parameter.
PingRate

Ratio of total physical writes to total number of pings.

Collector: OPSPrmColl
StoXConversions

Reports the number of PCM lock conversions from S to X (upgrade read lock to write) per minute for an instance.

Collector: OPSPrmColl
TotalLockConvs

Total number of lock conversions per minute for an instance.

Collector: OPSPrmColl
XtoNULLConversions

Reports number of PCM lock conversions from X to NULL (make buffers CR, write dirty buffers) per minute for an instance.

Collector: OPSPrmColl
XtoSConversions

Reports the number of PCM lock conversion from X to S (write dirty buffers) per minute for an instance.

Collector: OPSPrmColl
ORACLEPARALLELSERVER Application Class
LockElmWaits

Oracle version 7.x databases only.

Reports the average time each associated Oracle Parallel Server (OPS) instance spent waiting on a Parallel Cache Management (PCM) lock conversion.

Collector: OPSPrmColl
MemberStatus

Reflects the collective status of all OPSINST instances.

Collector: OPSInstanceStatus
NULLtoSConversions

Reports the number of PCM lock conversions from NULL to S per minute for an instance.

Collector: OPSPrmColl
NULLtoXConversions

Reports the number of PCM lock conversions from NULL to X (lock buffers for write) per minute for an instance.

Collector: OPSPrmColl
PingRate

Reports the ratio of total physical writes to total number of pings.

Collector: OPSPrmColl
StoXConversions

Reports the number of PCM lock conversions from S to X (upgrade read lock to write) per minute for an instance.

Collector: OPSPrmColl
TotalLockConvs

Reports the total number of lock conversions per minute for an instance.

Collector: OPSPrmColl
XtoNULLConversions

Reports the number of PCM lock conversions from X to NULL (make buffers CR, write dirty buffers) per minute for an instance.

Collector: OPSPrmColl
XtoSConversions

Reports the number of PCM lock conversions from X to S (write dirty buffers) per minute for an instance.

Collector: OPSPrmColl















PATROL for PeopleSoft 2.0.00


Table 30 PATROL for PeopleSoft 2.0.00
Parameter



PS_an_Analysis Application Class
_anCreator

Creates icons for the Analysis branch.
_otherKMColl

Displays the collector for the Analysis component.
PS_an_Host Application Class
OtherKMColl

Displays the status of data collection from the PATROL KMs on each host. The following values are possible:

0 - OK
1 - The Local View host cannot connect to the Central View host, or cannot send the parameter file to the Central View host. (This value only appears on the Local View host.)
2 - The parameter list is empty; load a new parameter list from the Central View host.

Collector: _otherKMColl
PS_an_OtherKM Application Class
KMStatus

Displays the status of each PATROL KM monitored by the Analysis component. The following values are possible:

0 - OK
1 - The KM is loaded but no instances of the KM are found
2 - The KM is not loaded.

(Note the following exceptions: for PATROL, for PeopleSoft and PATROL for UNIX, the only possible value is 0.)
ParameterMetrics

Displays the parameter values of monitored PATROL KMs.
PS_bp_ApplicationMetrics Application Class
_amCollect

Displays the collector for Application Metrics parameters.
PS_bp_BusinessProcesses Application Class
_bpCollector

Displays the collector for Business Processes parameters.
_bpCreator

Creates icons for Business Processes classes.
PS_bp_ServerProc Application Class
_spCollect

Collects PeopleSoft processes information.
ListActiveProcs

Displays information on active PeopleSoft process.

Collector: _spCollect
ListInactiveProcs

Displays the list of inactive PeopleSoft processes.

Collector: _spCollect
PS_bp_Workflow Application Class
_wfCollect

Displays the collector parameter for PS_bp_Workflow application class.
Available

Displays work list items available for processing (graph).

Collector: _MainCollector
Available_

Lists work items available for processing (text display).

Collector: _MainCollector
Selected

Displays work list items selected for processing (graph).

Collector: _MainCollector
Selected_

Lists work items selected for processing (text display).

Collector: _MainCollector
TimedOut

Indicates the number of work list items that timed out (graph).

Collector: _MainCollector
TimedOut_

Indicates the number of work list items that timed out (text display).

Collector: _MainCollector
Worked

Indicates the number of worked work list items (graph).

Collector: _MainCollector
Worked_

Indicates the number of worked work list items (text display).

Collector: _MainCollector
PS_cm_ConfigMgt Application Class
_cmCreator

Creates icons for the Configuration Management branch.
_ConfigurationReport

Displays a report indicating the accuracy of the PeopleSoft system configuration details, and which components were discovered by PATROL for PeopleSoft.

(Note that this report does not indicate if the components are active or inactive; only if there is a problem with their configuration parameters.)
PS_cm_ConfigObject Application Class
_ConfigurationParam

Textual display of PeopleSoft system configuration details.
_ConfigurationReport

Textual display of PeopleSoft component configuration details.

(Note that this report does not indicate if components are active or inactive; only if there is a problem with their configuration parameters.)
Status

Stoplight indicating if the components configuration details have been tested and verified. Three values are possible:

0 - Configuration details are ok.
1 - Configuration details have not yet been verified.
2- Error in configuration details.

This parameter is updated once daily, or whenever any changes are made to the PS ID configuration.
PS_Container Application Class
Status

Stoplight indicating the availability of the database running the business processes; 0 indicates OK, and 1 indicates no connection.

Collector: _MainCollector
PS_CRM_CATransactions Application Class
DL_NumCa

Displays the delta graph for total number of Call Center cases from last collection.

Collector: _MainCollector
DL_NumCaCanceled

Displays the delta graph for total number of Call Center cases with status Canceled from last collection.

Collector: _MainCollector
DL_NumCaClosed

Displays the delta graph for total number of Call Center cases with status Closed from last collection.

Collector: _MainCollector
DL_NumCaOpen

Displays the delta graph for total number of Call Center cases with status Open from last collection.

Collector: _MainCollector
DL_NumCaReOpen

Displays the delta graph for total number of Call Center cases with status ReOpen from last collection.

Collector: _MainCollector
NumCa

Displays the number of Call Center cases.

Collector: _MainCollector
NumCaCanceled

Displays the number of Call Center cases with status Canceled.

Collector: _MainCollector
NumCaClosed

Displays the number of Call Center cases with status Closed.

Collector: _MainCollector
NumCaOpen

Displays the number of Call Center cases with status Open.

Collector: _MainCollector
NumCaReOpen

Displays the number of Call Center cases with status ReOpen.

Collector: _MainCollector
PS_CRM_HDTransactions Application Class
DL_NumHd

Displays the delta graph for total number of Helpdesk cases from last collection.

Collector: _MainCollector
DL_NumHdCanceled

Displays the delta graph for total number of Helpdesk cases with status Canceled from last collection.

Collector: _MainCollector
DL_NumHdClosed

Displays the delta graph for total number of Helpdesk cases with status Closed from last collection.

Collector: _MainCollector
DL_NumHdOpen

Displays the delta graph for total number of Helpdesk cases with status Open from last collection.

Collector: _MainCollector
DL_NumHdReOpen

Displays the delta graph for total number of Helpdesk cases with status ReOpen from last collection.

Collector: _MainCollector
NumHd

Displays the number of Helpdesk cases.

Collector: _MainCollector
NumHdCanceled

Displays the number of Helpdesk cases with status Canceled.

Collector: _MainCollector
NumHdClosed

Displays the number of Helpdesk cases with status Closed.

Collector: _MainCollector
NumHdOpen

Displays the number of Helpdesk cases with status Open.

Collector: _MainCollector
NumHdReOpen

Displays the number of Helpdesk cases with status ReOpen.

Collector: _MainCollector
PS_CRM_LEADTransactions Application Class
DL_NumLeads

Displays the delta graph for total number of Sales Leads from last collection.

Collector: _MainCollector
DL_NumLeadsAccepted

Displays the delta graph for total number of Sales Leads with status Accepted from last collection.

Collector: _MainCollector
DL_NumLeadsClosed

Displays the delta graph for total number of Sales Leads with status Closed from last collection.

Collector: _MainCollector
DL_NumLeadsClosedDup

Displays the delta graph for total number of Sales Leads with status Closed Duplicate from last collection.

Collector: _MainCollector
DL_NumLeadsConverted

Displays the delta graph for total number of Sales Leads with status Converted from last collection.

Collector: _MainCollector
DL_NumLeadsDeferred

Displays the delta graph for total number of Sales Leads with status Deferred from last collection.

Collector: _MainCollector
DL_NumLeadsNew

Displays the delta graph for total number of Sales Leads with status New from last collection.

Collector: _MainCollector
DL_NumLeadsOpen

Displays the delta graph for total number of Sales Leads with status Open from last collection.

Collector: _MainCollector
DL_NumLeadsReferred

Displays the delta graph for total number of Sales Leads with status Referred from last collection.

Collector: _MainCollector
DL_NumLeadsWorking

Displays the delta graph for total number of Sales Leads with status Working from last collection.

Collector: _MainCollector
NumLeads

Displays the number of Sales Leads.

Collector: _MainCollector
NumLeadsAccepted

Displays the number of Sales Leads with status Accepted.

Collector: _MainCollector
NumLeadsClosed

Displays the number of Sales Leads with status Closed.

Collector: _MainCollector
NumLeadsClosedDup

Displays the number of Sales Leads with status Closed Duplicate.

Collector: _MainCollector
NumLeadsConverted

Displays the number of Sales Leads with status Converted.

Collector: _MainCollector
NumLeadsDeferred

Displays the number of Sales Leads with status Deferred.

Collector: _MainCollector
NumLeadsNew

Displays the number of Sales Leads with status New.

Collector: _MainCollector
NumLeadsOpen

Displays the number of Sales Leads with status Open.

Collector: _MainCollector
NumLeadsReferred

Displays the number of Sales Leads with status Referred.

Collector: _MainCollector
NumLeadsWorking

Displays the number of Sales Leads with status Working.

Collector: _MainCollector
PS_CRM_MCTransactions Application Class
DL_NumMc

Displays the delta graph for total number of Marketing Campaigns from last collection.

Collector: _MainCollector
DL_NumMcActive

Displays the delta graph for total number of Marketing Campaigns with status Active from last collection.

Collector: _MainCollector
DL_NumMcApproved

Displays the delta graph for total number of Marketing Campaigns with status Approved from last collection.

Collector: _MainCollector
DL_NumMcArchived

Displays the delta graph for total number of Marketing Campaigns with status Archived from last collection.

Collector: _MainCollector
DL_NumMcCompleted

Displays the delta graph for total number of Marketing Campaigns with status Completed from last collection.

Collector: _MainCollector
DL_NumMcDeclined

Displays the delta graph for total number of Marketing Campaigns with status Declined from last collection.

Collector: _MainCollector
DL_NumMcExecuting

Displays the delta graph for total number of Marketing Campaigns with status Executing from last collection.

Collector: _MainCollector
DL_NumMcNew

Displays the delta graph for total number of Marketing Campaigns with status New from last collection.

Collector: _MainCollector
DL_NumMcReview

Displays the delta graph for total number of Marketing Campaigns with status Review from last collection.

Collector: _MainCollector
DL_NumMcStopped

Displays the delta graph for total number of Marketing Campaigns with status Stopped from last collection.

Collector: _MainCollector
DL_NumMcTriggerApproved

Displays the delta graph for total number of Marketing Campaigns with status TriggerApproved from last collection.

Collector: _MainCollector
NumMc

Displays the number of Marketing Campaigns.

Collector: _MainCollector
NumMcActive

Displays the number of Marketing Campaigns with status Active.

Collector: _MainCollector
NumMcApproved

Displays the number of Marketing Campaigns with status Approved.

Collector: _MainCollector
NumMcArchived

Displays the number of Marketing Campaigns with status Archived.

Collector: _MainCollector
NumMcCompleted

Displays the number of Marketing Campaigns with status Completed.

Collector: _MainCollector
NumMcDeclined

Displays the number of Marketing Campaigns with status Declined.

Collector: _MainCollector
NumMcExecuting

Displays the number of Marketing Campaigns with status Executing.

Collector: _MainCollector
NumMcNew

Displays the number of Marketing Campaigns with status New.

Collector: _MainCollector
NumMcReview

Displays the number of Marketing Campaigns with status Review.

Collector: _MainCollector
NumMcStopped

Displays the number of Marketing Campaigns with status Stopped.

Collector: _MainCollector
NumMcTriggerApproved

Displays the number of Marketing Campaigns with status TriggerApproved.

Collector: _MainCollector
PS_CRM_OPPRTTransactions Application Class
DL_NumOpprt

Displays the delta graph for total number of Sales Opportunities from last collection.

Collector: _MainCollector
DL_NumOpprtCloseLost

Delta graph for total number of Sales Opportunities with status CloseLost from last collection

Collector: _MainCollector
DL_NumOpprtCloseWon

Displays the delta graph for total number of Sales Opportunities with status CloseWon from last collection.

Collector: _MainCollector
DL_NumOpprtInactive

Displays the delta graph for total number of Sales Opportunities with status Inactive from last collection.

Collector: _MainCollector
DL_NumOpprtOpen

Displays the delta graph for total number of Sales Opportunities with status Open from last collection.

Collector: _MainCollector
NumOpprt

Displays the number of Sales Opportunities.

Collector: _MainCollector
NumOpprtCloseLost

Displays the number of Sales Opportunities with status CloseLost.

Collector: _MainCollector
NumOpprtCloseWon

Displays the number of Sales Opportunities with status CloseWon.

Collector: _MainCollector
NumOpprtInactive

Displays the number of Sales Opportunities with status Inactive.

Collector: _MainCollector
NumOpprtOpen

Displays the number of Sales Opportunities with status Open.

Collector: _MainCollector
PS_CRM_SLTransactions Application Class
DL_NumSl

Displays the delta graph for total number of Solutions from last collection.

Collector: _MainCollector
DL_NumSlAll

Displays the delta graph for total number of Solutions on visibility All from last collection.

Collector: _MainCollector
DL_NumSlInternal

Displays the delta graph for total number of Solutions on visibility Internal from last collection.

Collector: _MainCollector
DL_NumSlStandard

Displays the delta graph for total number of Solutions of type Standard from last collection.

Collector: _MainCollector
DL_NumSlWorkaround

Displays the delta graph for total number of Solutions of type Workaround from last collection.

Collector: _MainCollector
NumSl

Displays the total number of Solutions.

Collector: _MainCollector
NumSlAll

Displays the total number of Solutions on visibility All.

Collector: _MainCollector
NumSlInternal

Displays the total number of Solutions on visibility Internal.

Collector: _MainCollector
NumSlStandard

Displays the total number of Solutions of type Standard.

Collector: _MainCollector
NumSlWorkaround

Displays the total number of Solutions of type Workaround.

Collector: _MainCollector
PS_CRM_SOTransactions Application Class
DL_NumSo

Displays the delta graph for total number of Service Orders from last collection.

Collector: _MainCollector
DL_NumSoCanceled

Displays the delta graph for total number of Service Orders with status Canceled from last collection.

Collector: _MainCollector
DL_NumSoClosed

Displays the delta graph for total number of Service Orders with status Closed from last collection.

Collector: _MainCollector
DL_NumSoCompleted

Displays the delta graph for total number of Service Orders with status Completed from last collection.

Collector: _MainCollector
DL_NumSoOpen

Displays the delta graph for total number of Service Orders with status Open from last collection.

Collector: _MainCollector
NumSo

Displays the total number of Service Orders.

Collector: _MainCollector
NumSoCanceled

Displays the total number of Service Orders with status Canceled.

Collector: _MainCollector
NumSoClosed

Displays the total number of Service Orders with status Closed.

Collector: _MainCollector
NumSoCompleted

Displays the total number of Service Orders with status Completed.

Collector: _MainCollector
NumSoOpen

Displays the total number of Service Orders with status Open.

Collector: _MainCollector
PS_CRM_SWTransactions Application Class
DL_NumSw

Displays the delta graph for total number of Support cases from last collection.

Collector: _MainCollector
DL_NumSwCanceled

Displays the delta graph for total number of Support cases with status Canceled from last collection.

Collector: _MainCollector
DL_NumSwClosed

Displays the delta graph for total number of Support cases with status Closed from last collection.

Collector: _MainCollector
DL_NumSwOpen

Displays the delta graph for total number of Support cases with status Open from last collection.

Collector: _MainCollector
DL_NumSwReOpen

Displays the delta graph for total number of Support cases with status ReOpen from last collection.

Collector: _MainCollector
NumSw

Displays the number of Support cases.

Collector: _MainCollector
NumSwCanceled

Displays the number of Support cases with status Canceled.

Collector: _MainCollector
NumSwClosed

Displays the number of Support cases with status Closed.

Collector: _MainCollector
NumSwOpen

Displays the number of Support cases with status Open.

Collector: _MainCollector
NumSwReOpen

Displays the number of Support cases with status ReOpen.

Collector: _MainCollector
PS_FIN_APTransactions Application Class
DL_NumAPCheck

Displays the delta graph for number of AP checks issued from last collection.

Collector: _MainCollector
DL_NumAPInv

Displays the delta graph for number of AP invoices entered from last collection.

Collector: _MainCollector
DL_NumAPInvLine

Displays the delta graph for number of AP invoice lines entered from last collection.

Collector: _MainCollector
DL_NumAPInvPendingAppr

Displays the delta graph for number of AP invoices pending approval for payment from last collection.

Collector: _MainCollector
DL_NumAPInvUnposted

Displays the delta graph for number of AP invoices with unposted status from last collection.

Collector: _MainCollector
DL_NumAPPaymentUnRec

Displays the delta graph for number of AP checks that have not been reconciled from last collection.

Collector: _MainCollector
NumAPCheck

Displays the number of AP checks issued.

Collector: _MainCollector
NumAPInv

Displays the number of AP invoices entered.

Collector: _MainCollector
NumAPInvLine

Displays the number of AP invoice lines entered.

Collector: _MainCollector
NumAPInvPendingAppr

Displays the number of AP invoices pending approval for payment.

Collector: _MainCollector
NumAPInvUnposted

Displays the number of AP invoices with unposted status.

Collector: _MainCollector
NumAPPaymentUnRec

Displays the number of AP checks that have not been reconciled.

Collector: _MainCollector
PS_FIN_ARTransactions Application Class
DL_NumARAdjust

Displays the delta graph for total number of adjusted AR bill entry lines entered from last collection.

Collector: _MainCollector
DL_NumARCrdMemo

Displays the delta graph for total number of AR credit memos issued from last collection.

Collector: _MainCollector
DL_NumARDispute

Displays the delta graph for total number of disputed AR invoices from last collection.

Collector: _MainCollector
DL_NumARInv

Displays the delta graph for number of AR bill entry headers entered from last collection.

Collector: _MainCollector
DL_NumARInvLine

Displays the delta graph for number of AR bill entry lines entered from last collection.

Collector: _MainCollector
DL_NumARPayment

Displays the delta graph for total number of AR payments received from last collection.

Collector: _MainCollector
DL_NumARPayUnRec

Displays the delta graph for total number of AR Payments not reconciled from last collection.

Collector: _MainCollector
NumARAdjust

Displays the number of adjusted AR bill entry lines entered.

Collector: _MainCollector
NumARCrdMemo

Displays the number of AR credit memos issued.

Collector: _MainCollector
NumARDispute

Displays the number of disputed AR invoices.

Collector: _MainCollector
NumARInv

Displays the number of AR bill entry headers entered.

Collector: _MainCollector
NumARInvLine

Displays the number of AR bill entry lines entered.

Collector: _MainCollector
NumARPayment

Displays the total number of AR payments received.

Collector: _MainCollector
NumARPayUnRec

Displays the total number of AR Payments not reconciled.

Collector: _MainCollector
PS_FIN_GLTransactions Application Class
DL_NumGLJou

Displays the delta graph for number of Journal headers entered from last collection.

Collector: _MainCollector
DL_NumGLJouLine

Displays the delta graph for number of Journal lines entered from last collection.

Collector: _MainCollector
DL_NumGLPostErr

Displays the delta graph for number of GL post errors from last collection.

Collector: _MainCollector
NumGLJou

Displays the number of Journal headers entered.

Collector: _MainCollector
NumGLJouLine

Displays the number of Journal lines entered.

Collector: _MainCollector
NumGLPostErr

Displays the number of GL post errors.

Collector: _MainCollector
PS_FIN_POTransactions Application Class
DL_NumPOOrder

Displays the delta graph for total number of purchase orders headers entered from last collection.

Collector: _MainCollector
DL_NumPOOrderLine

Displays the delta graph for total number of purchase order lines from last collection.

Collector: _MainCollector
DL_NumPOReqLine

Displays the delta graph for total number of requisition lines entered from last collection.

Collector: _MainCollector
DL_NumPORequisition

Displays the delta graph for total number of requisition headers entered from last collection.

Collector: _MainCollector
NumPOOrder

Displays the number of purchase orders headers entered.

Collector: _MainCollector
NumPOOrderLine

Displays the total number of purchase order lines.

Collector: _MainCollector
NumPOReqLine

Displays the number of requisition lines entered.

Collector: _MainCollector
NumPORequisition

Displays the total number of requisition headers entered.

Collector: _MainCollector
PS_FIN_Processes Application Class
DL_NumCompleted

Displays the delta graph for number of Financial module requests completed with the status of successful, unsuccessful, error, queued or processing, from last collection.

Collector: _MainCollector
DL_NumCompletedNok

Displays the delta graph for number of Financial module requests completed with the status of either unsuccessful or error, from last collection.

Collector: _MainCollector
NumCompletedNok

Displays the number of Financial module requests completed with the status of either unsuccessful or error.

Collector: _MainCollector
NumCompletedReq

Displays the number of Financial module requests completed with the status of successful, unsuccessful, error, queued or processing.

Collector: _MainCollector
NumProcesses

Displays the number of Financial module requests.

Collector: _MainCollector
PS_hc_HealthAppServer Application Class
Status

Stoplight indicating application server domain availability. Three values are possible:

0 - Domain is up (both the BBL and the PSAPPSRV processes are active).
1 - Only the BBL process is currently active, or there is a problem with the user environment file.
2- Domain is down.

Note: If the parameter is in warning or alarm, the KM will wait three collection cycles before checking the status again.

Collector: _MainCollector
PS_hc_HealthCenter Application Class
_hcCollector

Displays the collector for Health Center parameters.
_hcCreator

Creates icons for the Health Center branch.
PS_hc_HealthDB Application Class
Status

Stoplight indicating database availability. The following two values are possible:

0 - Database is up
2 - Database is down
(The value of 1 is not possible.)

Collector: _MainCollector
PS_hc_HealthProcAgent Application Class
Status

Stoplight indicating process scheduler availability. The following values are possible:

0 - Status cannot currently be obtained, or there is a problem with the user environment file.
1 - Process scheduler is not running
2 - Process scheduler may not be running (No PID file found)
3 - Process scheduler is running

Collector: _MainCollector
ActionReport

Displays the result of the latest process scheduler related menu command activation.

Collector: _MainCollector
PS_hc_HealthWEB Application Class
Status

Stoplight indicating web server availability. The following values are possible:

0 - web server is up
1- web server is down

Collector: _MainCollector
PS_HRMS Application Class
NumAbsenceHistTrans

Displays the number of absence history transactions.

Collector: _MainCollector
NumActiveEmps

Displays the number of active employees.

Collector: _MainCollector
NumAddlJobs

Displays the number of additional jobs.

Collector: _MainCollector
NumAddlPayTrans

Displays the number of additional pay transactions.

Collector: _MainCollector
NumAssignmentComps

Displays the number of assignment completions.

Collector: _MainCollector
NumAssignments

Displays the number of assignments.

Collector: _MainCollector
NumBenAdminTrans

Displays the number of benefits administration transactions.

Collector: _MainCollector
NumBenefitsTrans

Displays the number of benefits transactions.

Collector: _MainCollector
NumCOBRATrans

Displays the number of COBRA transactions.

Collector: _MainCollector
NumDataChanges

Displays the number of data changes.

Collector: _MainCollector
NumDemotions

Displays the number of demotions.

Collector: _MainCollector
NumDirDepositTrans

Displays the number of direct deposit transactions.

Collector: _MainCollector
NumDisabilityReturns

Displays the number of disability returns.

Collector: _MainCollector
NumDisciplnAxTrans

Displays the number of employee disciplinary action transactions.

Collector: _MainCollector
NumEarnsDist

Displays the number of earnings distributions.

Collector: _MainCollector
NumEmpReviewTrans

Displays the number of employee review transactions.

Collector: _MainCollector
NumFedTaxDataTrans

Displays the number of federal tax data transactions.

Collector: _MainCollector
NumFlexSpendingTrans

Displays the number of flexible spending account transactions.

Collector: _MainCollector
NumHires

Displays the number of new hires.

Collector: _MainCollector
NumHRMSTrans

Displays the number of HRMS transactions.

Collector: _MainCollector
NumJobTrans

Displays the number of job transactions.

Collector: _MainCollector
NumLaborRelationsTrans

Displays the number of labor relations transactions.

Collector: _MainCollector
NumLayoffs

Displays the number of layoffs.

Collector: _MainCollector
NumLeaveEmps

Displays the number of employees on leave.

Collector: _MainCollector
NumLeavePlanTrans

Displays the number of leave plan transactions.

Collector: _MainCollector
NumLeaveReturns

Displays the number of employees returning from leave.

Collector: _MainCollector
NumLOAs

Displays the number of leave of absences.

Collector: _MainCollector
NumLocalTaxDataTrans

Displays the number of local tax data transactions.

Collector: _MainCollector
NumLTDs

Displays the number of long-term disabilities.

Collector: _MainCollector
NumPaidLeaveEmps

Displays the number of employees on paid leave.

Collector: _MainCollector
NumPaidLeaves

Displays the number of paid leaves.

Collector: _MainCollector
NumPayRateChanges

Displays the number of pay rate changes.

Collector: _MainCollector
NumPensionTrans

Displays the number of pension plan transactions.

Collector: _MainCollector
NumPositionChanges

Displays the number of position changes.

Collector: _MainCollector
NumProbationCom

Displays the number of probation completions.

Collector: _MainCollector
NumProbations

Displays the number of probations.

Collector: _MainCollector
NumPromotions

Displays the number of promotions.

Collector: _MainCollector
NumRehires

Displays the number of rehires.

Collector: _MainCollector
NumRetEmps

Displays the number of retired employees.

Collector: _MainCollector
NumRetirements

Displays the number of retirements.

Collector: _MainCollector
NumSavingsPlanTrans

Displays the number of savings plan transactions.

Collector: _MainCollector
NumStateTaxDataTrans

Displays the number of state tax data transactions.

Collector: _MainCollector
NumSTDs

Displays the number of short-term disabilities.

Collector: _MainCollector
NumSuspensionRecalls

Displays the number of suspension recalls.

Collector: _MainCollector
NumSuspensions

Displays the number of suspensions.

Collector: _MainCollector
NumTermEmps

Displays the number of terminated employees.

Collector: _MainCollector
NumTerminations

Displays the number of terminations.

Collector: _MainCollector
NumTimeAndLaborTrans

Displays the number of time and labor transactions.

Collector: _MainCollector
NumTransfers

Displays the number of transfers.

Collector: _MainCollector
PS_ks_PSKMObject Application Class
CollectorStatus

Indicates whether data is being received by the Central View host from the collector on the Local View host.

(Note that a value of 1, i.e., data is not being received from the collector, does not necessarily indicate a problem, since the collector may have been disabled intentionally.)
CommunicationStatus

Indicates the extent of synchronization, in terms of data transmissions sent by the Local View host, and those received by the Central View host.
HostStatus

Indicates if both the host and the PATROL Agent on the host are active.

(In addition to the regularly scheduled updating of this parameter, it is also updated whenever data is sent from the host, indicating that the host is active.)
PS_ks_PSKMStatus Application Class
_ksCreator

Creates icons for the PSKM Status branch.
PS_Payroll Application Class
PayrollMessages

Displays number of error messages related to payroll processing (graph).

Collector: _MainCollector
PayrollMessages_

Displays the error messages related to payroll processing (text display).

Collector: _MainCollector
PS_pc_ProbeClient Application Class
ProbeCreator

Creates icons for the Probe Client classes.
PS_pc_Server Application Class
_collectorTH

Synchronizes and transfers data between Probe clients and the Probe Monitor.
_probeCollector

Collects response time data for the Probe Client classes. The data collected is also displayed in the Probe Monitor.
PS_pc_ServerSys Application Class
Status

Indicates the Probe transaction availability. If failed, annotation will indicate the point of failure.

Collector: _probeCollector
PS_pc_SS_Conn Application Class
APPServer

Indicates the connectivity status of the application server. Possible values:

0 - Connection OK
1 - Connection failed
2 - Connection status unknown

Collector: _probeCollector
DBServer

Indicates the connectivity status of the database server. Possible values:

0 - Connection OK
1 - Connection failed
2 - Connection status unknown

Collector: _probeCollector
WEBServer

Indicates the connectivity status of the web server. Possible values:

0 - Connection OK
1 - Connection failed
2 - Connection status unknown

Collector: _probeCollector
PS_pc_SS_Tran Application Class
ApplicationServerTime

Indicates the amount of time needed to connect from the application server to the database.

Collector: _probeCollector
DatabaseTime

Indicates the amount of time needed to process the transaction in the database.

Collector: _probeCollector
WebServerNetworkTime

Indicates the amount of time needed to connect from the web server to the application server.

Collector: _probeCollector
WebBrowserNetworkTime

Indicates the amount of time needed to connect from the web browser to the web server.

Collector: _probeCollector
TotalResponseTime

Indicates the end-to-end response time needed to complete a transaction.

Collector: _probeCollector
PS_pm_ClientSys Application Class
Status

Indicates the Probe transaction availability. If failed, annotation will indicate the point of failure.

Collector: _probeCollector
PS_pm_CS_Conn Application Class
APPServer

Indicates the connectivity status of the application server. Possible values:

0 - Connection OK
1 - Connection failed
2 - Connection status unknown

Collector: _probeCollector
DBServer

Indicates the connectivity status of the database server. Possible values:

0 - Connection OK
1 - Connection failed
2 - Connection status unknown

Collector: _probeCollector
WEBServer

Indicates the connectivity status of the web server. Possible values:

0 - Connection OK
1 - Connection failed
2 - Connection status unknown

Collector: _probeCollector
PS_pm_CS_Tran Application Class
ApplicationServerTime

Indicates the amount of time needed to connect from the application server to the database.

Collector: _probeCollector
DatabaseTime

Indicates the amount of time needed to process the transaction in the database.

Collector: _probeCollector
WebServerNetworkTime

Indicates the amount of time needed to connect from the web server to the application server.

Collector: _probeCollector
WebBrowserNetworkTime

Indicates the amount of time needed to connect from the web browser to the web server.

Collector: _probeCollector
TotalResponseTime

Indicates the end-to-end response time needed to complete a transaction.

Collector: _probeCollector
PS_pm_ProbeMonitor Application Class
_pmCreator

Creates icons for the Probe Monitor classes.
PS_Process Application Class
ProcParams

Displays information about a process in a specific domain.

Collector: _bpCollector
ProcStatus

Stoplight indicating if a process is active in a specific domain.

Collector: _bpCollector
PS_sm_FileMonitor Application Class
_archiveLog

Displays results from previous archive process; shown only for the TUXEDO log files (TUXLOG).
_LogDateCheck

Displays the collector; checks log file date and archives log if necessary.
LogDiskFreeSpace

Displays the percentage of free space on the disk where the log file is located.
LogEvent

Displays the number of events in the log file matching the sniff pattern since the pattern in the last 10 lines of the log; only the first occurrence of a sniff pattern in a line is counted; parameter annotation reflects the text that matched the registered pattern.
LogIncreaseRate

Displays the log file increase rate for each collection cycle (alarm range can be set to flag abnormally fast increases).; a negative value indicates that the log file is getting smaller (e.g., rows were deleted).
PS_sm_JobJobs Application Class
_sjjCollector

Collects information about PeopleSoft jobs.
ListAbortJobs

Displays the list of aborted jobs.

Collector: _sjjCollector
NumAbortJobs

Displays the number of aborted jobs.

Collector: _sjjCollector
ListCompJobs

Displays the list of completed jobs.

Collector: _sjjCollector
NumCompJobs

Displays the number of completed jobs.

Collector: _sjjCollector
ListErrorJobs

Displays the list of jobs resulting in error.

Collector: _sjjCollector
NumErrorJobs

Displays the number of jobs resulting in error.

Collector: _sjjCollector
ListPostJobs

Displays the list of posted jobs.

Collector: _sjjCollector
NumPostJobs

Displays the number of posted jobs.

Collector: _sjjCollector
ListProcJobs

Displays the list of processing jobs.

Collector: _sjjCollector
NumProcJobs

Displays the number of processing jobs.

Collector: _sjjCollector
ListWaitJobs

Displays the list of waiting jobs.

Collector: _sjjCollector
NumWaitJobs

Displays the number of waiting jobs.

Collector: _sjjCollector
PS_sm_JobProcMonitor Application Class
_sjpCollector

Collector for process requests.
PS_sm_JobProcServer Application Class
Cancelled

Displays number of cancelled process requests (graph).

Collector: _MainCollector
Cancelled_

Lists cancelled process requests (text display).

Collector: _MainCollector
Deleted

Displays number of deleted process requests (graph).

Collector: _MainCollector
Deleted_

Lists deleted process requests (text display).

Collector: _MainCollector
Errors

Displays number of process requests with errors.

Collector: _MainCollector
Errors_

Lists process requests with errors (text display).

Collector: _MainCollector
Held

Displays number of held process requests (graph).

Collector: _MainCollector
Held_

Lists held process requests (text display).

Collector: _MainCollector
Initiated

Displays number of initiated process requests (graph).

Collector: _MainCollector
Initiated_

Lists initiated process requests (text display).

Collector: _MainCollector
LateOneHourHeld

Displays number of process requests that are in Held status for more than one hour (graph); to run these processes, change their status (in the PeopleSoft application) from "Held" to "Queued".

Collector: _MainCollector
LateOneHourHeld_

Lists process requests that are in Held status for more than one hour (text display).

Collector: _MainCollector
LateOneHourInitiated

Displays number of process requests that are in Initiated status for more than one hour but have not yet changed to the status of Processing (graph).

Collector: _MainCollector
LateOneHourInitiated_

Lists process requests that are in Initiated status for more than one hour but have not yet changed to the status of Processing (text display).

Collector: _MainCollector
LateOneHourQueued

Displays number of process requests that are in Queued status for more than one hour; to run these process requests, start the PeopleSoft process server agent (graph).

Collector: _MainCollector
LateOneHourQueued_

Lists process requests that are in Queued status for more than one hour; to run these process requests, start the PeopleSoft process server agent (text display).

Collector: _MainCollector
LongProcessing

Displays number of process requests that have been running for more than one hour (graph).

Collector: _MainCollector
LongProcessing_

Lists process requests that have been running for more than one hour (text display).

Collector: _MainCollector
Processing

Displays number of process requests currently being processed (graph).

Collector: _MainCollector
Processing_

Lists process requests being processed (text display).

Collector: _MainCollector
Queued

Displays number of queued process requests (graph).

Collector: _MainCollector
Queued_

Lists queued process requests (text display).

Collector: _MainCollector
Status

Indicates process server status. This parameter groups the statuses registered in the database into the following categories:

0 - error, running with no report node, running - report full, or unknown status
1 - down
2 - suspended or purging
3 - running

Note that running with no report node indicates that the server has not been assigned a report node in the server definition, so reports with output destination of web will remain in posting status until a report node is specified.

Collector: _MainCollector
Successful

Displays number of successful process requests (graph).

Collector: _MainCollector
Successful_

Lists successful process requests (text display).

Collector: _MainCollector
PS_sm_LogMonitor Application Class
_lmCreator

Creates icons for the Log Monitor branch.
_lmSendData

Sends Log Monitor data from Local to Central View host.
PS_sm_Operators Application Class
_oprCollect

Collects PeopleSoft operator information.
ORA_AuditStatus

Stoplight indicating whether the Oracle audit session is active.

Collector: _MainCollector
ORA_Audit_table_size

Monitors the percentage used of the Oracle audit table.

Collector: _MainCollector
2_TierOperators

Displays the total number of 2-tier operators.

Note that 2-Tier operator information is only available for PeopleSoft releases 7 and 7.5.

Collector: _MainCollector
2_TierOperators_

Lists the active PeopleSoft 2-tier operators.

Note that 2-Tier operator information is only available for PeopleSoft releases 7 and 7.5.

Collector: _MainCollector
PS_sm_SqlMgt Application Class
_qmCollector

Collects information about SQL calls.
NumActiveSQLs

Displays the number of active SQL calls.

Collector: _qmCollector
ListActiveSQLs

Displays the information about active SQL calls.

Collector: _qmCollector
NumLongRunSQLs

Displays the number of long-running SQL calls.

Collector: _qmCollector
PS_sm_SystemMgt Application Class
_smCreator

Creates icons for the System Management branch.
PS_sm_TransAppServer Application Class
NumActiveTrans

Displays the total number of active transactions.

Collector: _mngmUserColl
ListUserActivity

Displays the list of currently active users and their number of transactions.

Collector: _mngmUserColl
PS_sm_TransDomain Application Class
NumActiveTrans

Displays the number of active transactions in a specific domain.

Collector: _mngmUserColl
ListUserActivity

Displays the list of currently active users and their number of transactions per application domain.

Collector: _mngmUserColl
PS_sm_TransWebServer Application Class
_mtwCollector

Collects information about user transactions via each web server.
_mtwCreator

Creates icons for the Web Server Transactions branch.
NumTrans

Displays total number of user transactions via web servers.

Collector: _mtwCollector
ListTrans

Displays details of all user transactions via web servers.

Collector: _mtwCollector
PS_sm_TransWebServerID Application Class
ActionReport

Instructs when to stop/start the web server, following activation of the menu commands: Enable Web Transaction Monitoring / Restore Web Server Settings.

Collector: _mtwCollector
NumTrans

Displays number of user transactions via each web server.

Collector: _mtwCollector
ListTrans

Displays details of user transactions via each web server.

Collector: _mtwCollector
PS_sm_UserMgt Application Class
_mngmUserColl

Collects information about active users.
_muCreator

Creates icons for the User Management branch.
NumBusyUsers

Displays number of users who have submitted requests and are waiting for results.

Collector: _mngmUserColl
NumLoggedInUsers

Displays the number of logged in users.

Collector: _mngmUserColl
NumLongBusyUsers

Displays the number of users who have submitted requests and are waiting for results for an excessive length of time.

Collector: _mngmUserColl
ListBusyUsers

Displays list of users who have submitted requests and are waiting for results.

Collector: _mngmUserColl
ListLoggedInUsers

Displays the list of logged in users.

Collector: _mngmUserColl
ListLongBusyUsers

Displays the list of users who have submitted requests and are waiting for results for an excessive length of time.

Collector: _mngmUserColl
PS_sm_UsersDomain Application Class
NumBusyUsers

Displays the number of waiting users in a specific domain.

Collector: _mngmUserColl
NumLoggedInUsers

Displays the number of logged in users in a specific domain.

Collector: _mngmUserColl
NumLongBusyUsers

Displays the number of long-waiting users in a specific domain.

Collector: _mngmUserColl
ListBusyUsers

Displays the list of long-waiting users in a specific domain.

Collector: _mngmUserColl
ListLoggedInUsers

Displays the information about logged in users in a specific domain.

Collector: _mngmUserColl
ListLongBusyUsers

Displays list of long-waiting users in a specific domain.

Collector: _mngmUserColl
PS_ss_PSSystem Application Class
_MainCollector

PeopleSoft system collector. This collector sets values for consumer parameters in any of the following application classes that have been selected for monitoring:

Business Processes (CRM, Financial, HRMS, Payroll)
PS_bp_Workflow
PS_hc_HealthCenter
PS_hc_HealthProcAgent
PS_sm_JobProcServer
PS_sm_Operators

_psCreator

Creates icons for the PSSystem branch.
_testHost

Synchronizes and transfers data between local hosts and the Central View host.
PS_ss_TopSystem Application Class
Note: The parameters _Debug, _EventLog, and ExtraFilesList are inactive, and are only to be used by BMC Support.
_topCreator

Creates icons for monitored PeopleSoft systems.
















PATROL Integration for SAP System Management 1.0.00


Table 31 PATROL Integration for SAP System Management 1.0.00  
Parameter



Data Transfer Monitoring
PATROL_TO_CCMS Application Class
PostXMLFileCollector

Monitors the transfer of KM data within XML files to the SAP system for display in the CCMS. Results of data transfer attempts are displayed over time. For each unsuccessful transfer (value of 0), an annotation on the graph provides you with more details for the reason that the transfer of data failed.

Collector: PATROL_TO_CCMS discovery

PATROL for SAP BugsEye 1.0.00


Table 32 PATROL for SAP BugsEye 1.0.00
Parameter



JRun Connection Container (EBP_CONT) Application Class
EBP_CONT Application Class
JRunDiscoveryStatus

Provides textual details regarding the discovery processdetails on the JRun servers from which Database Availability data can be obtained; details on the JRun servers from which BugsEye Availability data can be obtained; details on the JRun hosts and servers for which a Metrics trace is possible; and details on the available clusters in the JRun environment for construction of hierarchy. This parameter goes into warning status when at least one of the following occurs:

BugsEye Availability monitoring is not possible through any JRun server
BugsEye Database Availability monitoring is not possible through any JRun server
The Discovery component discovery.jsp, which stores discovery information, could not be found, and hierarchy was constructed based on pconfig variables.

This parameter goes into alarm status when the Discovery component discovery.jsp, which stores discovery information, cannot be found, and hierarchy variables are not available in pconfig.

Collector: Discovery or hierarchy construction following configuration
WSConnectorAvail

Monitors the status of the connection to the Web server connector, if one exists in your JRun environment, with 0 = failed and 1 = OK. An annotated data point is available whenever there is a change in status, with a short description of the status. For alarms, the annotated data point also provides an excerpt from the HTML result.

Collector: Discovery of the WSConnectorAvail parameter
BugsEye Availability
EBP_BUGSEYE_AVAIL Application Class
BugsEyeAvailability

Monitors the Availability status of the BugsEye application, with 0 = OK, 1 = warning status (available, but with problems), and 2 = alarm status (not available). An annotated data point is available whenever there is a change in status, with a short description of the status. For warnings and alarms, the annotated data point also provides an excerpt from the HTML result.

Note that this parameter is not updated whenever the BugsEyeAvailCollect parameter is in alarm status.

Collector: Discovery of the BugsEyeAvailCollect parameter
BugsEyeAvailCollect

Controls the collection of availability data from the BugsEye application and monitors the status of the connection to BugsEye for obtaining Availability data, with 0 = failed and 1 = OK. An annotated data point is available whenever there is a change in status, with a short description of the status. For alarms, the annotated data point also provides an excerpt from the HTML result.

Note that when this parameter is in alarm status, the BugsEyeAvailability parameter is not updated.

Collector: Discovery of the BugsEyeAvailCollect parameter
RequestResult

Displays textual details regarding the result of the request for Availability data from the BugsEye database.

Collector: Discovery of the BugsEyeAvailCollect or DBAvailCollect parameter
BugsEye Database Availability (EBP_BUGSEYE_DB) Application Class
EBP_BUGSEYE_DB Application Class
DBAvailability

Monitors the availability status of the BugsEye database, with 0 = not available and 1 = OK. An annotated data point is available whenever there is a change in status, with a short description of the status. For alarms, the annotated data point also provides an excerpt from the HTML result.

Note that when this parameter is in alarm status, the JRunToDBRespTime parameter is not updated. The DBAvailability parameter is not updated whenever the DBAvailCollect parameter is in alarm status.

Collector: Discovery of the DBAvailCollect parameter
DBAvailCollect

Controls the collection of availability data from the BugsEye database and monitors the status of the connection to the database for obtaining Availability data, with 0 = failed and 1 = OK. An annotated data point is available whenever there is a change in status, with a short description of the status. For alarms, the annotated data point also provides an excerpt from the HTML result.

Note that when this parameter is in alarm status, the DBAvailability parameter and the JRunToDBRespTime parameter are not updated.

Collector: Discovery of the DBAvailCollect parameter
JRunToDBRespTime

Displays the average response time for a request sent by the JRun server to the BugsEye database. If the database is not running, this parameter goes into offline status.

Note that this parameter is not updated whenever the DBAvailCollect parameter or the DBAvailability parameter is in alarm status.

Collector: Discovery of the DBAvailCollect parameter
RequestResult

Displays textual details regarding the result of the request for Availability data from the BugsEye database.

Collector: Discovery of the BugsEyeAvailCollect or DBAvailCollect parameter
JRun Server (EBP_J2EE) Application Class
EBP_J2EE Application Class
BytesIn

Displays the number of bytes received by the JRun server via requests.

Collector: Discovery of the JRunCollector parameter
BytesOut

Displays the number of bytes written in response to requests received by the JRun server.

Collector: Discovery of the JRunCollector parameter
JRunCollector

Controls the collection of statistics from the JRun server and monitors the status of the connection to the JRun server for obtaining the data, with 0 = failed and 1 = OK. An annotated data point is available whenever there is a change in status, with a short description of the status. For alarms, the annotated data point also provides an excerpt from the HTML result.

Collector: Discovery of the JRunCollector parameter
MsecDelayed

Displays the average duration of time (in milliseconds) that the JRun server spent in delayed state.

Collector: Discovery of the JRunCollector parameter
MsecHandled

Displays the average duration of time (in milliseconds) that the JRun server spent on servicing requests (not including delay time).

Collector: Discovery of the JRunCollector parameter
RequestsDelayed

Displays the number of requests to the JRun server that were delayed due to high concurrency.

Collector: Discovery of the JRunCollector parameter
RequestsDropped

Displays the number of requests dropped by the JRun server due to various problems.

Collector: Discovery of the JRunCollector parameter
RequestsHandled

Displays the number of requests handled by the JRun server.

Collector: Discovery of the JRunCollector parameter
ThreadsBusy

Displays the number of threads currently running on the JRun server.

Collector: Discovery of the JRunCollector parameter
ThreadsDelayed

Displays the number of threads switched to delayed status while running on the JRun server.

Collector: Discovery of the JRunCollector parameter
ThreadsListening

Displays the number of threads listening for a new connection on the JRun server.

Collector: Discovery of the JRunCollector parameter
ThreadsTotal

Displays the total number of threads of all statuses on the JRun server.

Collector: Discovery of the JRunCollector parameter
ThreadsWaiting

Displays the number of threads waiting for a new request on the JRun server.

Collector: Discovery of the JRunCollector parameter
Java Virtual Machine (EBP_JVM) Application Class
EBP_JVM Application Class
MemoryFree

Displays the amount of free memory (in kilobytes) in the heap memory on the Java Virtual Machine of the JRun server.

Collector: Discovery of the JRunCollector parameter
MemoryPctUsed

Displays the percent of memory in use out of the total amount of memory in the heap memory on the Java Virtual Machine of the JRun server.

Collector: Discovery of the JRunCollector parameter
MemoryTotal

Displays the total amount of memory (in kilobytes) in the heap memory (including memory in use and free memory) on the Java Virtual Machine of the JRun server.

Collector: Discovery of the JRunCollector parameter
SessionsActive

Displays the current number of active sessions on the Java Virtual Machine of the JRun server.

Collector: Discovery of the JRunCollector parameter
SessionsActivePct

Displays the percent of active sessions out of the total number of sessions in the memory on the Java Virtual Machine of the JRun server.

Collector: Discovery of the JRunCollector parameter
SessionsInMemory

Displays the number of sessions in the memory on the Java Virtual Machine of the JRun server.

Collector: Discovery of the JRunCollector parameter

    















PATROL for SAP Internet Transaction Server 4.3.10


Table 33 PATROL for SAP Internet Transaction Server 4.3.10
Parameter



Virtual ITS Instance
SAP_ITS Application Class
There are no parameters associated with the SAP_ITS Application Class.
ITS Log File Monitoring
SAP_ITS_ACCESSLOG Application Class
SapItsAccessLog

Displays log entries that meet the criteria set in the Access Log Filter. Includes error type, date, time, IP address, and error message.

Collector: SAP_ITS_CONT discovery
SapItsAccessLogMonitor

Status parameter that goes into alarm when access log entries meet the criteria specified in the Access Log Filter. Note that you can define the number of test connections that should be performed before going into warning or alarm status. An annotated data point gives details about error type, date, time, IP address, and error message.

Collector: SAP_ITS_CONT discovery
ITS Application Server Gateway
SAP_ITS_AGATE Application Class
SapAgateAvailDiskSpace

Displays the amount of available disk space in the AGate server.

Collector: SAP_ITS_CONT discovery
SapAgateAvailPhysMemory

Displays the amount of available physical memory in the AGate server.

Collector: SAP_ITS_CONT discovery
SapAgateAvailVirtMemory

Displays the amount of available virtual memory in the AGate server.

Collector: SAP_ITS_CONT discovery
SapAgateCpuSys

Displays the percentage of measured kernel CPU in the AGate server.

Collector: SAP_ITS_CONT discovery
SapAgateCpuUser

Displays the percentage of CPU used by the AGate.

Collector: SAP_ITS_CONT discovery
SapAgateMemoryLoad

Displays the memory load in the AGate server, as a percentage of full capacity.

Collector: SAP_ITS_CONT discovery
SapAgateStatus

Status icon indicating whether the AGate process is up and running. An annotated data point is available whenever there is a change in status, with a short description of the status. Note that you can define the number of test connections that should be performed before going into warning or alarm status. The default number of times is 5.

Collector: SAP_ITS_CONT discovery
SapAgateTotalDiskSpace

Displays the total amount of disk space in the AGate server.

Collector: SAP_ITS_CONT discovery
SapAgateTotPhysMemory

Displays the total amount of physical memory in the AGate server.

Collector: SAP_ITS_CONT discovery
SapAgateTotVirtMemory

Displays the total amount of virtual memory in the AGate server.

Collector: SAP_ITS_CONT discovery
SapHitsPerSec

Displays the average number of hits per second handled by this AGate.

Collector: SAP_ITS_CONT discovery
SapTurnAroundTime

Displays the average turnaround time for this instance, that is, the time elapsed from receiving a request in AGate until the last byte of the response is sent.

Collector: SAP_ITS_CONT discovery
SapUsedSessions

Displays the number of sessions in use.

Collector: SAP_ITS_CONT discovery
SapUsedSessionsPct

Displays the number of sessions in use as a percentage of the maximum allowable sessions.

Collector: SAP_ITS_CONT discovery
SapUsedThreads

Displays the number of work threads in use.

Collector: SAP_ITS_CONT discovery
SapUsedThreadsPct

Displays the number of work threads in use as a percentage of the maximum allowable number of threads.

Collector: SAP_ITS_CONT discovery
SapWeightPct

Displays the weight of the AGate process. The weight percentage describes how suitable an AGate instance is for handling more requests. Values closer to 100% mean that the AGate can better handle requests.

Collector: SAP_ITS_CONT discovery
AGate Container
SAP_ITS_AGATE_CONT Application Class
SapActiveAGates

Displays the total number of active AGate instances.

Collector: SAP_ITS_CONT discovery
SapMManagerStatus

Displays the status of the manager service for this virtual ITS. This can be starting, stopping, continue is pending, pause is pending, paused, stopped, unknown, or running.

Collector: SAP_ITS_CONT discovery
SapMManagerStatusMonitor

Monitors the status of the Manager service for the virtual ITS. An annotated data point is available whenever there is a change in status, with a short description of the status. Note that you can define the number of test connections that should be performed before going into warning or alarm status. The default number of times is 5.

Collector: SAP_ITS_CONT discovery
SapTotalRequests

Displays the total number of requests made since the ITS was started.

Collector: SAP_ITS_CONT discovery
SapTotalUsedSessionPct

Displays the percentage of total maximum sessions that are currently being used

Collector: SAP_ITS_CONT discovery
SapTotalUsedSessions

Displays the total number of sessions currently in use.

Collector: SAP_ITS_CONT discovery
SapTotalUsedThreadPct

Displays the percentage of total allowable threads that are currently in use.

Collector: SAP_ITS_CONT discovery
SapTotalUsedThreads

Displays the total number of threads currently in use.

Collector: SAP_ITS_CONT discovery
ITS Monitoring Container
SAP_ITS_CONT Application Class
There are no parameters associated with the SAP_ITS_CONT Application Class.
ITS Web Server Response Time Probe
SAP_ITS_PROBE Application Class
SapItsProbeResult

Displays the HTML results from probing the ITS.

Collector: SAP_ITS_CONT discovery
SapItsProbeResultMonitor

Status parameter monitoring the status of the ITS Probe based on the message returned by the HTTP protocol. An annotated data point is available for every warning and alarm, with a short description of the status. Note that you can define how many test connections should be performed before going into warning or alarm status. The default number of times is 5.

Collector: SAP_ITS_CONT discovery
SapItsRespTime

Displays the ITS access response time, a general tool for spotting trends (not a sophisticated response time measurement).

Collector: SAP_ITS_CONT discovery
ITS Probes Container
SAP_ITS_PROBE_CONT Application Class
There are no parameters associated with the SAP_ITS_PROBE_CONT Application Class.
ITS Web Gateway
SAP_ITS_WGATE Application Class
SapWebServerStatus

Displays the status of the connection between the WGate and the AGate on an individual ITS instance.

Collector: SAP_ITS_CONT discovery
SapWebServerStatusMonitor

Status parameter monitoring the connection between the WGate and the AGate on an individual ITS instance by means of submitting a sample ITS transaction. Note that you can define the number of test connections that should be performed before going into warning or alarm status. The default number of times is 5.

Collector: SAP_ITS_CONT discovery
ITS WGate-Associated AGate Host
SAP_ITS_WGATE_AHOST Application Class
SapAgateStatus

Status icon indicating whether the AGate process is up and running. An annotated data point is available whenever there is a change in status, with a short description of the status. Note that you can define the number of test connections that should be performed before going into warning or alarm status. The default number of times is 5.
Note that this parameter is available in this application class only if you have an ITS Web gateway set up on the same computer as the AGate.

Collector: SAP_ITS_CONT discovery
SapMManagerStatusMonitor

Monitors the status of the Manager service for the virtual ITS. An annotated data point is available whenever there is a change in status, with a short description of the status. Note that you can define the number of test connections that should be performed before going into warning or alarm status. The default number of times is 5.

Collector: SAP_ITS_CONT discovery

    
















PATROL for SAP Solutions 4.3.50


Table 34 PATROL for SAP Solutions 4.3.50
Parameter



ABAP/4 Errors (SAP_ABERR) Application Class
AlertDetails

Displays details on each ABAP/4 error alert.
ABAP/4 Errors Container (SAP_ABERR_CONT) Application Class
NumberNewAlerts

Displays the total number of new ABAP/4 error alerts (excluding recurring alerts) during the interval.
ITS Monitoring via Trak (SAP_AGATE) Application Class
Error_text

Displays the most recent log message received from the ITS.
HitsPSAvg

Displays the average number of accesses per second to the ITS during the interval.
HitsPSMax

Displays the maximum number of accesses per second to the ITS during the interval.
HitsPSTotal

Displays the total number of accesses to the ITS during the interval.
ITSStatus

The functional status of the ITS during the interval0 for active, 1 for no response, 2 for shut down, or 3 for ccms not configured.
SessionsMax

Displays the maximum number of sessions defined for the ITS by the MaxSessions parameter.
SessionsUsed

Displays the number of sessions used by ITS during the interval.
SessionsUtil

Displays the percentage of sessions used by ITS during the interval out of the maximum number of sessions defined by the ITS parameter MaxSessions.
WorkthreadsMax

Displays the maximum number of workthreads defined for the ITS by the MaxWorkThreads parameter.
WorkthreadsUsed

Displays the number of workthreads used by ITS during the interval.
WorkthreadsUtil

Displays the percentage of workthreads used by ITS during the interval out of the maximum number of workthreads defined by the ITS parameter MaxWorkThreads.
RFC Error Alerts (SAP_ARFC) Application Class
AlertDetails

Displays details on each asynchronous or transactional RFC error alert.
RFC Error Alerts Container (SAP_ARFC_CONT) Application Class
NumberNewAlerts

Displays the total number of new asynchronous or transactional RFC error alerts (excluding recurring alerts) during the interval.
R/3 Application Server Availability (SAP_AVAIL_APPSRV) Application Class
AvailAppsrvCollector

Displays the status of the availability collector of the R/3 application instance. Goes into alarm when it becomes unavailable.
DialogService

Monitors the status of the dispatcher of the R/3 application instance. Goes into alarm when it becomes unavailable.
GatewayService

Monitors the status of the gateway service of the R/3 application instance. Goes into alarm when it becomes unavailable.
RFCCallTime

Displays the call time during the RFC connection test to the application server.
RFCConnectivity

Checks availability of application instance, using an RFC connection test. Goes into alarm when it becomes unavailable.
RFCOpenTime

Displays the open time during the RFC connection test to the application server.
RFCTotalTime

Displays the total amount of time spent on the RFC connection test to the application server.
SapinfoResult

Displays result of the remote function call to RFC_SYSTEM_INFO function.
Product Collectors Availability (SAP_AVAIL_PROD) Application Class
SecSinceLastTrakData

Displays the amount of time that has elapsed since the last shipment of events from PATROL for SAP Solutions - Trak.
StatusDBMaintain

Indicates the status of the PATROL for SAP Solutions - DB-Maintain data collector. Possible values are:

0: installed and collecting
1: not installed
2: installed but collector shut down
3: installed; collector not working
4: internal error in retrieving status

StatusManager

Indicates the status of the PATROL for SAP Solutions - Manager data collector.
Values as in previous parameter.
StatusSLReporter

Indicates the status of the PATROL for SAP Solutions - S.L. Reporter data collector.
Values as in previous parameter.
R/3 System Availability (SAP_AVAIL_SID) Application Class
AvailSidCollector

Displays the status of the availability collector of the message service. Goes into alarm when it becomes unavailable
DBAvailability

Displays the status of the availability collector for the database
MessageServer

Monitors the status of the message service of R/3 system. Goes into alarm when it becomes unavailable.
R3transResult

Displays a textual report with details of the most recent database availability test performed by the SAP utility R3trans.
Batch Input Alerts (SAP_BDC) Application Class
R3BdcDetails

Displays details on each failed batch input process.
Batch Input Alerts Container (SAP_BDC_CONT) Application Class
NumberNewAlerts

Displays the total number of new batch input alerts (excluding recurring alerts) during the interval.
BW InfoCube Monitoring (SAP_BW_CUBES) Application Class
BWCubeCallsCnt

Displays the number of callups for the aggregates of the InfoCube. The counter is incremented whenever a query reads data from the aggregate or another aggregate is made out of it.
BWCubeDataStatus

Displays the status of the data in the InfoCube.
BWCubeDimensionsNum

Displays the number of dimensions defined for the InfoCube.
BWCubeUnusedDimStat

Displays the status of unused dimensions for theInfoCube, that is, whether or not the InfoCube has unused dimensions.
BWDataDictStatus

Displays the status of data dictionary objects for the InfoCube.
BWFactTableEntrNum

Displays the number of entries in the fact table of the InfoCube, indicating the size of the fact table.
BWFactTableStatus

Displays the status of the InfoCube fact table of the InfoCube.
BWIndexesStat

Displays the status of database indexes for the InfoCube.
BWObjectStatus

Displays the object status, indicating whether the object is currently executable or usable.
BWObjectVersion

Displays the BW object version.
BWQueriesNum

Displays the number of queries in the InfoCube, indicating the effectiveness of the InfoCube. The higher this number, the more effectively the InfoCube is being used.
BW Query Monitoring (SAP_BW_QUERY) Application Class
QueryExecNum

Displays the total number of times the query was ever executed.
QueryQuality

Displays the ratio of the total amount of records selected from the database to the number of resulting records transferred.
QueryRespTime

Displays the total amount of time the query took to process, including DB selection, OLAP processing, authorization check, network traffic, and data presentation time.
QueryRunTime

Displays the time that the BW system required for query information selection and for DB and OLAP processing.
CCMS Alerts (SAP_CCMS_ALERT) Application Class
AlertDetails

Displays details on each CCMS alert.
CCMS Alerts Container (SAP_CCMS_CONTEXT_CONT) Application Class
NewAlertList

Displays a list of the new alert texts that were received from the CCMS during the interval.
NumberNewAlerts

Displays the number of new CCMS alerts (excluding recurring alerts) received from the CCMS during the interval.
NumberOfAlerts

Displays the total cumulative number of CCMS alerts currently displayed through the PATROL Console.
Adabas Database (SAP_DB_ADA) Application Class
CatalogCacheAccesses

Displays the number of accesses to the catalog cache counted over the interval.
CatalogCacheHitratio

Displays the percentage of read accesses without hard disk accesses out of the total number of read accesses to the catalog cache.
ConvCacheAccesses

Displays the number of accesses to the converter cache counted over the interval.
ConvCacheHitratio

Displays the percentage of read accesses without hard disk accesses out of the total number of read accesses to the converter cache.
DataCacheAccesses

Displays the number of accesses to the data cache counted over the interval.
DataCacheHitratio

Displays the percentage of read accesses without hard disk accesses out of the total number of read accesses to the data cache.
LogicalReads

Displays the number of logically executed read operations on the caches during the interval.
LogicalWrites

Displays the number of logically executed write operations on the caches during the interval.
PhysicalReads

Displays the number of physically executed read operations on the hard disk during the interval.
PhysicalWrites

Displays the number of physically executed write operations on the hard disk during the interval.
TmpCacheAccesses

Displays the number of accesses to the temporary cache counted over the interval.
TmpCacheHitratio

Displays the percentage of read accesses without hard disk accesses out of the total number of read accesses to the temporary cache.
Database Availability (SAP_DB_AVAIL) Application Class
DBConnectivity

Displays the availability status of the database within the SAP R/3 system, as checked by the R3trans utility.
R3transResult

Displays a textual report with details of the most recent database availability test performed by the SAP utility R3trans.
SelfMonitoring

Displays details on the transfer of database availability data to the PATROL Agents as a PEM event
DB2/AS400 Database (SAP_DB_DB4) Application Class
AverageLockWaitsTime

Displays the current average amount of time spent on wait situations.
CommitsCnt

Displays the number of commits, i.e., successful transfers of data to the database, during the interval.
CreateIndxCnt

Displays the number of temporary indexes created by the system during the interval.
LockReqCnt

Displays the current total number of attempts (both successful and unsuccessful) to place locks on tables.
RollbackCnt

Displays the number of rollbacks, i.e., unsuccessful attempts to transfer data to the database, during the interval.
TabLocksCnt

Displays the current total number of successful locks placed on tables.
TmpFilesNum

Displays the number of temporary files created on the database during the interval.
TotalLockWaitsCnt

Displays the total number of waits on the database caused either by internal machine activity or by locks.
UserCallsCnt

Displays the total number of user calls to the database (including SQL statements, commits, and rollbacks) during the interval.
DB2 Database (SAP_DB_DB6) Application Class
AvgPhysReadTime

Displays the average amount of time spent during the interval on accessing the disk for index and data reads.
AvgPhysWriteTime

Displays the average amount of time spent during the interval on writing index and data writes to the disk.
AvgSyncReadTime

Displays the average amount of time spent during the interval on data reads minus the amount of time spent on paging.
BufferQuality

Displays the percentage of reads without hard disk accesses out of the total quantity of index and data read accesses to the database buffer during the interval.
CatalogCacheQuality

Displays the percentage of table descriptors not inserted into the cache out of all table descriptor lookups over the interval.
CurrLocksCnt

Displays the number of locks currently held on the database.
DeadLocksCnt

Displays the total number of deadlocks detected on the database over the interval.
PackCacheQuality

Displays the percentage of sections not inserted into the cache out of all section lookups over the interval.
SyncBufferQuality

Displays the percentage of reads without hard disk accesses out of the total quantity of read accesses (without paging) to the database buffer during the interval.
TotalLockWaitsCnt

Displays the total number of waits on the database caused either by internal machine activity or by locks.
TotalLockWaitsTime

Displays the total amount of time waited on database locks over the interval.
Informix Database (SAP_DB_INF) Application Class
CallsPerSec

Displays the number of ISAM transactions per second over the interval.
CallsPerTrans

Displays the number of ISAM calls per transaction over the interval.
CheckpointActivity

Displays a correlation coefficient relating to database checkpoint activity during the interval.
PagesPerWrite

Displays the average number of kilobytes that were flushed from the physical log buffer to the physical log on disk during the interval.
PhysLogSizing

Displays a correlation coefficient relating to the size of the physical log during the interval.
ReadQuality

Displays the percentage of successful reads from the shared memory buffer during the interval.
WriteQuality

Displays the percentage of successful writes for the shared memory buffer during the interval.
Database Alerts Container (SAP_DB_MAINTAIN_ALERT_CONT) Application Class
NumberNewAlerts

Displays the total number of new alerts (excluding recurring alerts) in this group of miscellaneous DB-Maintain alerts that are not associated with any specific database object.
Database Alert Item (SAP_DB_MAINTAIN_ALERT_ITEM) Application Class
AlertDetails

Displays details on each database alert.
DB-Maintain File System (SAP_DB_MAINTAIN_FS) Application Class
Capacity

Displays the capacity of the file system in the DB2 UDB.
FreeSpace

Displays the amount of free space currently found in the tablespace or the File System.
PercentFree

Displays the percent of free space within the file system in the DB2 UDB.
PercentUsed

Displays the percent of memory used in the tablespace or file system.
DB-Maintain File System Container (SAP_DB_MAINTAIN_FS_CONT) Application Class
NumberNewAlerts

Displays the total number of new file system alerts (excluding recurring alerts).
DB-Maintain Tablespace (SAP_DB_MAINTAIN_TABLESPACE) Application Class
CurrNextExtentSize

Displays the current value for the size of the next extent to be added to any table or index in the tablespace.
FreeSpace

Displays the amount of free space currently found in the tablespace.
InitialNextExtentSize

Displays the initial user-defined value for the size of the next extents to be added to tables or indexes within the tablespace.
InitialNumberExtents

Displays the number of extents allocated to segments within the tablespace at the time the tablespace was created.
MaxNumberExtents

Displays the user-defined limit for maximum number of extents that can be added to a table or index within the tablespace.
NumberAlerts

Displays the number of database alerts for the tablespace (from DB-Maintain) during the current data collection cycle.
NumberExtents

Displays the current total number of extents in the whole tablespace
NumberNewAlerts

Displays the total number of new alerts (excluding recurring alerts) received from DB-Maintain pertaining to the tablespace.
NumberSegments

Displays the total number of segments (tables and indexes) in the tablespace.
PercentUsed

Displays the percent of memory used in the tablespace.
UsedSize

Displays the total amount of memory occupied by all tablespace segments (tables and indexes).
DB-Maintain Table/Index (SAP_DB_MAINTAIN_TI) Application Class
MaxNumberExtents

Displays the user-defined limit for maximum number of extents that can be added to a table or index.
NextExtentSize

Displays the current value for the size of the next added extent.
NumberExtents

Displays the current number of extents in the table or index.
TISize

Displays the current size of the table or the index.
MS SQL Server Database (SAP_DB_MSS) Application Class
BufferQuality

Displays the percentage of times a data page was found in the data cache (rather than read from the disk).
CacheSize

Displays the amount currently stored in the data cache.
DiskReadCnt

Displays the number of physical reads from the disk done by SQL Server during the interval.
DiskWriteCnt

Displays the number of disk writes by SQL Server during the interval.
MemSize

Displays the size of the available physical memory configured for SQL Server in kilobytes.
MSSQLCpuUtil

Displays the amount of time that the CPU spent doing SQL Server work during the interval.
MSSQLIOUtil

Displays the amount of time that SQL Server spent doing input and output operations during the interval.
Oracle Database (SAP_DB_ORA) Application Class
AverageLockWaitsCnt

Displays the average number of exclusive lock waits on the database during the interval.
BufferBusyWaitTime

Displays the time spent on Buffer Busy waits during the interval.
BufferQuality

Displays the percentage of the reads without hard disk accesses out of the total quantity of read accesses to the database buffer pool during the interval.
DataDictQuality

Displays the frequency during the interval at which the data dictionary had to be accessed when processing commands.
LatchWaitsCnt

Displays the number of latch waits on the database during the interval.
RecursiveCallsRatio

Displays the ratio of user calls to recursive calls during the interval.
RedoLogWaitTime

Displays the Redo Log Space wait time(s) from v$sysstat.
SortDiskCnt

Displays the number of sorting operations that were carried out on the hard disk during the interval.
SqlGetRatio

Displays the hit rate for the number of requests for objects that are managed in the Oracle library cache. A high value suggests a good sizing of the shared pool.
DB2/OS390 Database Buffer Pool (SAP_DB2_BP) Application Class
ActBuffCnt

Displays the number of currently active (non-stealable) buffers.
AsyncHPReads

Displays the number of pages moved successfully from hiperpool to virtual storage using the asynchronous data mover facility.
AsyncHPWrites

Displays the number of pages moved successfully from virtual storage to hiperpool using the asynchronous data mover facility.
AsynchWritesNum

Displays the number of asynchronous writes performed during the interval.
BPShortWorkFileReqReject

Displays the number of times work file requests were rejected due to buffer pool shortage.
BuffUpdPerPage

Displays the number of buffer updates per page written during the interval.
DataManagerTthreshCnt

Displays the number of times the data manager threshold was reached during the interval.
DatasetsOpenedCnt

Displays the number of datasets successfully opened physically.
DefWriteQueuePagesDeq

Displays the number of pages dequeued from dataset deferred write queue for destructive read request (number of work file pages not written).
DefWriteThreshNum

Displays the number of times the deferred write threshold was reached during the interval.
DynPrefetchReads

Displays the number of dynamic prefetch reads performed during the interval.
DynPrefetchReq

Displays the number of dynamic prefetch requests issued during the interval.
DynPrefPagesRead

Displays the number of pages read via dynamic prefetch read I/O.
FaildDMFReads

Displays the number of pages for which a read request failed using the asynchronous data mover facility.
FaildDMFWrites

Displays the number of pages for which a write request failed using the asynchronous data mover facility.
GetPagesReqNum

Displays the total number of getpage requests (conditional and unconditional) issued during the interval.
GetPagesReqSeqAccNum

Displays the number of getpage requests issued by sequential access requests during the interval.
HPAsynchReadsSuccNum

Displays the number of successful hiperpool reads done asynchronously during the interval (without using the asynchronous data mover facility).
HPAsynchReadsUnSuccNum

Displays the number of unsuccessful hiperpool reads performed during the interval (without using the asynchronous data mover facility).
HPAsynchWritesSuccNum

Displays the number of successful hiperpool writes done asynchronously during the interval (without using the asynchronous data mover facility).
HPAsynchWritesUnSuccNum

Displays the number of unsuccessful hiperpool writes performed during the interval (without using the asynchronous data mover facility).
HPBuffAllocNum

Displays the number of buffers allocated for hiperpool during the interval.
HPBuffBackedNum

Displays the number of hiperpool buffers currently backed by expanded storage.
HPExpansionsNum

Displays the number of successful hiperpool expansions or contractions performed during the interval due to the ALTER BUFFERPOOL command.
HPQuality

Displays the percentage of getpage requests that was satisfied by the buffer pool.
HPReadRatioHigh

Displays the hiperpool read ratio (high).
HPReadRatioLow

Displays the hiperpool read ratio (low).
HPSycnImmedWritesSuccNum

Displays the number of immediate synchronous writes performed during the interval.
HPSyncReadsSuccNum

Displays the number of successful hiperpool reads performed during the interval.
HPWritesSuccNum

Displays the number of successful hiperpool writes performed during the interval.
ListPrefNum

Displays the number of list prefetch requests issued during the interval.
ListPrefPagesReadNum

Displays the number of pages read via list prefetch during the interval.
ListPrefReadsNum

Displays the number of list prefetch reads performed during the interval.
MaxWorkFilesConcUsed

Displays the maximum number of work files used concurrently during the interval.
MergePassFailNum

Displays the number of times a merge pass could not be efficiently performed due to buffer pool shortage.
MergePassNum

Displays the number of merge passes requested for DB2 sort activities during the interval.
MergePassReqWorkFiles

Displays the number of merge passes requested for DB2 sort activities multiplied by the number of work files during the interval.
MigDatasetsNum

Displays the number of times migrated datasets were encountered during the interval.
PageInsForReadIO

Displays the total number of page inserts required for read I/O operations during the interval.
PageInsWrite

Displays the number of page inserts required for write I/O operations during the interval.
PagesMarkedDestr

Displays the number of pages for which destructive read was requested during the interval.
PagesPerIO

Displays the number of pages written per write I/O operation during the interval.
PagesWritenum

Displays the number of pages written during the interval.
RandomHit

Displays random hit ratio as a percent.
ReadRate

Displays read rate per second.
ReadToWriteRatio

Displays pages read vs. pages written.
RecallTOTNum

Displays the number of recall timeouts experienced during the interval.
SeqPrefDisabled

Displays the number of times sequential prefetch was disabled because of an unavailable read engine.
SeqPrefDisabledNoBuffAvail

Displays the total number of times sequential prefetch was disabled because buffers were not available.
SeqPrefPageReadNum

Displays the number of pages read because of normal sequential prefetch.
SeqPrefReadsNum

Displays the number of asynchronous read I/Os caused by the normal sequential prefetch (both applications and utilities).
SeqPrefReqNum

Displays the number of sequential prefetch requests issued during the interval.
SuccVirtBPExp

Displays the number of successful virtual buffer pool expansions or contractions performed during the interval due to the ALTER BUFFERPOOL command.
SyncReadIONum

Displays the total number of synchronous read I/O operations performed during the interval.
SyncReadSeqReqNum

Displays the number of synchronous read requests issued by sequential access requests during the interval.
UpdateIntentsPagesBP

Displays the number of times update intents were requested against pages in the buffer pool during the interval
VBFullCnt

Displays the number of times that a usable buffer could not be located in the virtual buffer pool because the virtual buffer pool was full.
VBHPFail

Displays the total number of virtual buffer pool or hiperpool expansion failures due to a lack of virtual storage space.
VBPBufferAllocNum

Displays the number of buffers allocated for virtual buffer pool during the interval.
VertDeferWriteThershNum

Displays the number of times the vertical deferred write threshold was reached during the interval.
WorkFileNotOpenCnt

Displays the number of times a work file could not be created during sort processing due to buffer pool shortage.
WriteEngAvailAsynchWriteIO

Displays the number of times a write engine was unavailable for asynchronous write I/O operations during the interval.
WriteRatio

Displays the number of buffer updates per page written during the interval.
ZeroPrefetch

Displays the number of work prefetches not scheduled due to zero prefetch.
DB2/OS390 Database EDM Pool (SAP_DB2_EP) Application Class
CTSectionsNotFound

Displays the number of cursor table sections not found in the EDM pool during the interval.
CursorTableHitRatio

Displays the cursor table hit ratio as a percent.
CursorTableReqNum

Displays the number of requests for cursor table sections during the interval.
DBDescrHitRatio

Displays the database descriptor hit ratio as a percent.
DBDescrNotFoundPool

Displays the number of database descriptors not found in the EDM pool during the interval.
DBDescrPagesUsed

Displays the current number of pages in the EDM pool used for database descriptors.
DBDescrReqNum

Displays the number of requests for a database descriptor during the interval.
DSCPagesUsed

Displays the current number of pages in the EDM pool used for DSC.
FreePagesInFreeChainNum

Displays the current number of free pages in the free chain.
PackTabHitRatio

Displays the package table hit ratio as a percent.
PackTabPagesUsed

Displays the current number of pages in the EDM pool used for package tables.
PackTabReqNum

Displays the number of requests for package table sections during the interval.
PagesUsedCursorTables

Displays the current number of pages in the EDM pool used for cursor tables.
PoolPagesCurrNum

Displays the current number of pages in the EDM pool.
PoolPagesCurrUsed

Displays the percentage of EDM pool pages currently in use (in relation to the overall EDM pool size).
PTSectNotFoundPoll

Displays the number of times a package table section was not found in the EDM pool during the interval.
SkelCTPagesNum

Displays the current number of pages in the EDM pool used for skeleton cursor tables.
SkelCTPagesUsed

Displays the current number of pages in the EDM pool used for skeleton package tables.
DB2/OS390 Database Lock Activity (SAP_DB2_LA) Application Class
ChangeReq

Displays the number of change requests processed during the interval.
ClaimReqFail

Displays the number of claim requests that failed during the interval.
ClaimReqSucc

Displays the number of successful requests for claims during the interval.
DeadlocksNum

Displays the number of deadlocks that occurred during the interval.
DrainReqFail

Displays the number of drain requests that failed during the interval.
DrainReqSucc

Displays the number of successful requests for drains during the interval.
LatchSuspNum

Displays the number of suspensions that occurred due to contention for latches during the interval.
LockEScCntExcl

Displays the number of escalations performed on exclusive locks during the interval.
LockEScCntShared

Displays the number of escalations performed on shared locks during the interval.
LockReqNum

Displays the number of requests for locks registered during the interval.
LockSuspNum

Displays the number of lock suspensions that occurred during the interval.
OtherReqCnt

Displays the number of all other types of requests registered during the interval.
OtheSuspNum

Displays the number of suspensions that occurred due to other reasons during the interval.
QueryReqNum

Displays the number of queries processed during the interval.
SuspTotalNum

Displays the total number of suspensions (regardless of the reason for the suspension) that occurred during the interval.
TOTNum

Displays the number of timeouts (abnormal termination due to lack of resources) that occurred during the interval.
UnlockReqNum

Displays the number of unlock requests registered during the interval.
DB-Maintain Table Space (SAP_DB2_MAINTAIN_TABLESPACE) Application Class
FreeSpace

Displays the amount of free space currently found in the table space.
NumberContainers

Displays the number of containers found in the table space.
NumberNewAlerts

Displays the total number of new alerts (excluding recurring alerts) received from DB-Maintain pertaining to the tablespace.
PercentUsed

Displays the percent of memory used in the tablespace.
TotalPages

Displays the total number of pages in the UDB table space.
UsablePages

Displays the number of pages available for use by the table space.
UsedSize

Displays the total amount of memory occupied by all tablespace segments (tables and indexes).
DB-Maintain Table/Index (SAP_DB2_MAINTAIN_TI) Application Class
NumberAllocatedPages

Displays the total number of pages allocated to the table in the DB2 UDB.
NumberDataPages

Displays the total number of pages that contain data in the table.
NumberRows

Displays the total number of data rows in the table (in DB2 UDB).
TSize

Displays the current size of the table (in DB2 UDB).
DB2/OS390 Database RID Pool (SAP_DB2_RP) Application Class
PhysLimReached

Displays the number of times RID list processing terminated during the interval because the number of RID entries was greater than the physical limit of approximately 16 million RIDs.
ProcLimExc

Displays the number of times the defined maximum RID pool storage size was exceeded.
RdsLimExc

Displays the number of times RID list processing terminated during the interval because the number of RIDs that can fit into the guaranteed number of RID blocks was greater than the maximum limit (25% of table size).
RidBlocksCurr

Displays the number of RID blocks currently in use (snapshot value).
RidBlocksMax

Displays the highest number of RID blocks in use at any time since DB2 startup.
RidListExhVirtStor

Displays the number of times RID list processing exhausted virtual storage during the interval. This failure occurs when the 2GB limit is reached. You cannot increase virtual storage beyond 2GB.
RidPoolActSize

Displays the actual number of bytes currently allocated for the RID pool.
RidPoolDefSize

Displays the user-defined size of the RID buffer, as determined by the installation parameter RID POOL SIZE. If not specified, the default size depends on the size of the buffer pools.
DB2/OS390 Database Response Time (SAP_DB2_RT) Application Class
ActivTimeDB2

Displays the percent of activity time spent in the DB2 out of the total activity time.
ActivTimeOutDB2

Displays the percent of activity time spent out of the DB2 out of the total activity time.
ArchLogQuiesTime

Displays the accumulated waiting time due to the processing of ARCHIVE LOG MODE(QUIESCE) commands.
ArchReadSuspTime

Displays the average accumulated waiting time for archive reads from a tape.
ClaimRelSuspTime

Displays the accumulated waiting time for a drain waiting for claims to be released.
CPUTime

Displays the percent of CPU time spent in the DB2 out of the total amount of time spent in the DB2.
DrainLockSuspTime

Displays the accumulated waiting time for a drain lock.
GlobalLockSuspTime

Displays the average global locking suspension time.
IOSuspTime

Displays the I/O average elapsed time accumulated due to synchronous I/O suspensions.
LatchSuspTime

Displays the average amount of time that the allied agent waited for locks and latches in DB2.
NoAttrDB2Time

Displays the percent of time spent suspended in the DB2 out of the total amount of time spent in the DB2.
NotifySuspTime

Displays the accumulated elapsed waiting time due to suspensions caused by sending notify messages to other members in the data sharing group.
OtherReadSuspTime

Displays the accumulated waiting time due to a read I/O that performed under a thread other than the one being reported.
OtherWriteSuspTime

Displays the accumulated waiting time due to a write I/O.
PageLatchSuspTime

Displays the accumulated waiting time due to page latch contentions.
ServTaskSwitchSuspTime

Displays the accumulated waiting time due to a synchronous execution unit switching to DB2 services from the thread being reported.
SuspTimeDB2

Displays the percent of time not attributed in the DB2 out of the total amount of time spent in the DB2.
DB2/OS390 Database SQL (SAP_DB2_SQ) Application Class
AvoidedPreparesCnt

Displays the number of times that DB2 did not prepare a statement bound with KEEPDYNAMIC(YES) because the prepared statement cache contained a valid copy of the prepared statement.
ImplicitPreparesCnt

Displays the number of times that DB2 did an implicit prepare for a statement bound with KEEPDYNAMIC(YES) because the prepared statement cache did not contain a valid copy of the prepared statement.
MaxKeepDExcCnt

Displays the number of statements thrown out of the local cache because the MAXKEEPD parameter was exceeded.
PreparesCnt

Displays the number of both full and short prepares.
PreparesQuality

Displays the percentage of times a prepare request was satisfied without a full prepare.
ShortPreparesCnt

Displays the number of short prepares, i.e, the number of times that DB2 satisfied a prepare request by making a copy of a statement in the dynamic statement cache (DSC).
StatementInvalCnt

Displays the number of times that DB2 discarded a prepared statement from the EDM Pool because a program executed a drop, alter or revoke against a dependent object.
StatementsFoundInCache

Displays the number of times that DB2 searched the prepared statement cache but could not find a suitable prepared statement.
TCP/IP Error Alerts (SAP_ER_CON) Application Class
AlertDetails

Displays details on each TCP/IP error alert.
TCP/IP Error Alerts Container (SAP_ER_CON_CONT) Application Class
NumberNewAlerts

Displays the total number of new TCP/IP error alerts (excluding recurring alerts) during the interval.
Gateway Connection (SAP_GW) Application Class
GatewayConnCount

Displays the number of users connected to the SAP gateway during the interval.
Intermediate Documents (SAP_IDOC) Application Class
R3IdocDetails

Displays details on each IDOC/ALE error.
Intermediate Documents Container (SAP_IDOC_CONT) Application Class
NumberNewAlerts

Displays the total number of new IDoc alerts (excluding recurring alerts) during the interval.
ITS Log File Monitoring (SAP_ITS_ACCESSLOG) Application Class
SapItsAccessLog

Displays log entries that meet the criteria set in the Access Log Filter. Includes error type, date, time, IP address, and error message.
SapItsAccessLogMonitor

status parameter that goes into alarm when access log entries meet the criteria specified in the Access Log Filter. An annotated data point gives details about error type, date, time, IP address, and error message.
ITS Application Server Gateway (SAP_ITS_AGATE) Application Class
SapAgateAvailDiskSpace

Displays the amount of available disk space.
SapAgateAvailPhysMemory

Displays the amount of available physical memory.
SapAgateAvailVirtMemory

Displays the amount of available virtual memory.
SapAgateCpuSys

Displays the percentage of measured kernel CPU.
SapAgateCpuUser

Displays the percentage of CPU used by the AGate.
SapAgateMemoryLoad

Displays the memory load.
SapAgateStatus

Status icon indicating whether the AGate process is up and running.
SapAgateTotalDiskSpace

Displays the total amount of disk space.
SapAgateTotPhysMemory

Displays the total amount of physical memory.
SapAgateTotVirtMemory

Displays the total amount of virtual memory.
SapHitsPerSec

Displays the average number of hits per second handled by this AGate.
SapTurnAroundTime

Displays the average turnaround time for this instance, that is, the elapsed time from receiving a request in AGate until the last byte of the response is sent.
SapUsedSessions

Displays the number of sessions in use.
SapUsedSessionsPct

Displays the number of sessions in use as a percentage of the maximum allowable sessions.
SapUsedThreads

Displays the number of work threads in use.
SapUsedThreadsPct

Displays the number of work threads in use as a percentage of the maximum allowable number of threads.
SapWeightPct

Displays the weight percentage describing how suitable an AGate is for handling more requests. Values closer to 100% mean that the AGate can better handle requests.
AGate Container (SAP_ITS_AGATE_CONT) Application Class
SapActiveAGates

Displays the total number of active AGate instances.
SapMManagerStatus

Displays the status of the manager service for this virtual ITS. This can be starting, stopping, continue is pending, pause is pending, paused, stopped, unknown, or running.
SapMManagerStatusMonitor

monitors the status of the Manager service for the virtual ITS, with 0=OK, 1=warning, and 2=alarm. You can define how many test connections should be performed before going into warning or alarm status. The default number of times is 5.
SapTotalRequests

Displays the total number of requests made since the ITS was started.
SapTotalUsedSessionPct

Displays the percentage of total maximum sessions that are currently being used
SapTotalUsedSessions

Displays the total number of sessions currently in use.
SapTotalUsedThreadPct

Displays the percentage of total allowable threads that are currently in use.
SapTotalUsedThreads

Displays the total number of threads currently in use
ITS Web Server Response Time Probe (SAP_ITS_PROBE) Application Class
SapItsProbeResult

Displays the HTML results from probing the ITS.
SapItsProbeResultMonitor

status parameter monitoring the status of the ITS Probe, with 0=OK, 1=warning, and 2=alarm. You can define how many test connections should be performed before going into warning or alarm status. The default number of times is 5.
SapItsRespTime

Displays the ITS access response time, a general tool for spotting trends (not a sophisticated response time measurement).
ITS Web Gateway (SAP_ITS_WGATE) Application Class
SapWebServerStatus

Displays the status of the web server associated with WGate.
SapWebServerStatusMonitor

status parameter monitoring the web server associated with a WGate, with 0=OK, 1=warning, and 2=alarm. You can define how many test connections should be performed before going into warning or alarm status. The default number of times is 5.
ITS WGate-Associated AGate Host (SAP_ITS_WGATE_AHOST) Application Class
SapAgateStatus

status icon indicating whether the AGate process is up and running.
SapMManagerStatusMonitor

monitors the status of the Manager service for the virtual ITS, with 0=OK, 1=warning, and 2=alarm. You can define how many test connections should be performed before going into warning or alarm status. The default number of times is 5.
Job Alerts (SAP_JOB) Application Class
AlertDetails

Displays details on each problematic job (aborted, delayed, or long-running).
Job Alerts Container (SAP_JOB_CONT) Application Class
NumberNewAlerts

Displays the total number of new job alerts (excluding recurring alerts) during the interval.
LiveCache Catalog Cache (SAP_LC_CATALOG_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache Converter Cache (SAP_LC_CONV_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache Catalog Datapages (SAP_LC_DAP_CAT) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Leaf Datapages (SAP_LC_DAP_LEAF) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Level 1 Leaf Datapages (SAP_LC_DAP_LEAF_L1) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Level 2 Leaf Datapages (SAP_LC_DAP_LEAF_L2) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Level 3 Leaf Datapages (SAP_LC_DAP_LEAF_L3) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Permanent Datapages (SAP_LC_DAP_PERM) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Total Sum of Datapages (SAP_LC_DAP_SUM) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache Temporary Datapages (SAP_LC_DAP_TERM) Application Class
DataPagesLogReads

Displays the number of logically executed read operations on the cache during the interval.
DataPagesLogWrites

Displays the number of logically executed write operations on the cache during the interval.
DataPagesPhysReads

Displays the number of physically executed read operations on the cache during the interval.
DataPagesPhysWrites

Displays the number of physically executed write operations on the cache during the interval.
LiveCache FBM Cache (SAP_LC_FBM_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache File Directory Cache (SAP_LC_FILEDIR_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache Log Page Cache (SAP_LC_LOGPAGE_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache OMS Data Cache (SAP_LC_OMS_DATA_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache OMS Data Log (SAP_LC_OMS_DATA_LOG) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache OMS History Cache (SAP_LC_OMS_HISTORY) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache OMS Log Cache (SAP_LC_OMS_LOG_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache OMS Rollback Cache (SAP_LC_OMS_ROLLBACK) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache OMS Pages (SAP_LC_PAG_OMS) Application Class
PAGUpdatedKB

Displays the amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the number of pages updated by the cache during the interval.
PAGUsageKB

Displays the amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages used by the cache during the interval.
LiveCache OMS History Pages (SAP_LC_PAG_OMS_HISTORY) Application Class
PAGUpdatedKB

Displays the amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the number of pages updated by the cache during the interval.
PAGUsageKB

Displays the amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages used by the cache during the interval.
LiveCache OMS Log Pages (SAP_LC_PAG_OMS_LOG) Application Class
PAGUpdatedKB

Displays the amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the number of pages updated by the cache during the interval.
PAGUsageKB

Displays the amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages used by the cache during the interval.
LiveCache OMS Rollback Pages (SAP_LC_PAG_OMS_ROLLBACK) Application Class
PAGUpdatedKB

Displays the amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the number of pages updated by the cache during the interval.
PAGUsageKB

Displays the amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages used by the cache during the interval.
LiveCache SQL Pages (SAP_LC_PAG_SQL) Application Class
PAGUpdatedKB

Displays the amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the number of pages updated by the cache during the interval.
PAGUsageKB

Displays the amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages used by the cache during the interval.
LiveCache SQL Log Pages (SAP_LC_PAG_SQL_LOG) Application Class
PAGUpdatedKB

Displays the amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the number of pages updated by the cache during the interval.
PAGUsageKB

Displays the amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages used by the cache during the interval.
LiveCache Total of Pages (SAP_LC_PAG_TOTAL) Application Class
PAGUpdatedKB

Displays the total amount of kilobytes updated by the cache during the interval.
PAGUpdatedPages

Displays the total number of pages updated by the cache during the interval.
PAGUsageKB

Displays the total amount of kilobytes used by the cache during the interval.
PAGUsagePages

Displays the total amount of pages used by the cache during the interval.
PAGUtil

Displays the percentage of pages (of all types) used by the cache during the interval.
LiveCache Rollback Cache (SAP_LC_ROLLBACK_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache Sequence Cache (SAP_LC_SEQ_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache SQL Data Cache (SAP_LC_SQLDATA_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
LiveCache USM Cache (SAP_LC_USM_CACHE) Application Class
CacheAccesses

Displays the total number of read accesses to the cache during the interval, both successful (without hard disk access) and unsuccessful (necessitating hard disk access).
CacheAccessesFailed

Displays the number of times access to the cache failed during the interval (necessitating hard disk access).
CacheAccessesOK

Displays the number of times that the cache was accessed successfully (without hard disk access) during the interval.
CacheHitratio

Displays the percentage of successful read accesses (without hard disk accesses) out of the total number of read accesses to the cache. A high value indicates that the cache is of a good size.
Long-Held Locks (SAP_LOCK_ALERT) Application Class
AlertDetails

Displays details on each long-held lock.
Lock Container (SAP_LOCK_CONT) Application Class
LockTableUtilization

Displays the percentage of the system's lock table currently utilized, as measured by Manager.
NumberNewAlerts

Displays the total number of new lock alerts (excluding recurring alerts) during the interval.
KM Log File (SAP_LOGFILE) Application Class
SizeMonitor

Displays the size of the PATROL KM for SAP Solutions log file. A warning is issued when the log file reaches a certain size, and a new log file (with a new name) is created at that point to be used instead of the current one.
Operating System CPU (SAP_OS_CPU) Application Class
R3CpuQueue

Displays the average number of processes that are ready to execute but must wait in the run queue for access to the CPU.
R3CpuSys

Displays the percentage of CPU time spent in system mode doing system tasks, including CPU resources consumed by special kernel processes that need access to kernel resources.
R3CpuUser

Displays the percentage of CPU time currently spent in user mode on commands and tasks initiated by users. A process can execute in either user mode or system mode. When in user mode, a process executes within its own address space and does not require kernel resources.
R3CpuUtil

Displays the percentage of CPU utilization. Total CPU utilization is calculated by adding the percentage of CPU time spent in system mode to the percentage of CPU time spent in user mode.
Operating System Disk (SAP_OS_DISC) Application Class
QueueLength

Displays the average queue length, that is, the average number of requests outstanding for the disk over the interval.
ServiceTime

Displays the average amount of time it took to service each transfer request during the interval.
WaitTime

Displays the average amount of time that transfer requests waited idly on queue for the disk over the interval.
Operating System File System (SAP_OS_FSYS) Application Class
FSCapacity

Displays the percentage of file system storage that is currently in use.
FSFreeMemory

Displays the amount of free space (in megabytes) found in the file system during the interval.
FSPctFreeSpace

Displays the percentage of file system storage that is currently free.
FSSize

Displays the maximum amount of memory (in megabytes) that the file system can contain.
Operating System Memory Management (SAP_OS_MEMORY) Application Class
R3FreeMem

Displays the amount of free physical memory available to the operating system during the interval.
R3MemPctUsed

Displays the percentage of memory that is used.
R3PhysMemory

Displays the amount of physical configured memory available in kilobytes.
Operating System Swap (SAP_OS_SWAP) Application Class
R3PageOut

Displays the amount swapped out of main memory into secondary memory per hour during the interval.
OS/390 CPU (SAP_OS390_CPU) Application Class
R3AvgCPUOS390

Displays the average CPU of the application server or standalone DB2 database server on OS/390 during the interval.
R3AvgCPUSysOs390

Displays the average system CPU of the application server or standalone DB2 database server on OS/390 during the interval.
OS/390 Stand-Alone Paging (SAP_OS390_PAGE) Application Class
R3AvgPagingRateOs390

Displays the average paging rate during the interval for an application server or standalone database server on OS/390.
R3PageInSec

Displays the number of pages paged in per second during the interval, for an application server or standalone database server on OS/390.
R3PageOutSec

Displays the number of pages paged out per second during the interval, for an application server or standalone database server on OS/390.
AS/400 Database Pool (SAP_OS400_POOL) Application Class
DBFaults

Displays the number of AS/400 database faults during the interval.
JobTransActInl

AS/400 pool: job transitions for interval.
JobTransActWait

AS/400 pool: job transitions for the interval.
JobTransWaitInl

AS/400 pool: job transitions for the interval.
MaxActive

Displays the maximum number of active pools on the AS/400.
NonDBFaults

Displays the number of non-DB faults for the AS/400 during the interval.
NonDBPageFaults

Displays the number of non DB fault pages for the AS/400 during the interval.
PageFaults

Displays the number of AS/400 database fault pages for the interval.
PoolSize

Displays the size of the AS/400 pool.
PoolsNum

Displays the number of pools on the AS/400.
ResSpace

Displays the machine reserved space for the AS/400 pool.
Calendar Buffer Performance (SAP_PERF_BUF_CALENDAR) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

Indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
CUA Buffer Performance (SAP_PERF_BUF_CUA) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Field Catalog Buffer Performance (SAP_PERF_BUF_FIELD_CATAL) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Generic Table Buffer Performance (SAP_PERF_BUF_GENERIC_KEY) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Import/Export Buffer Performance (SAP_PERF_BUF_IM_EXP) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Initial Record Buffer Performance (SAP_PERF_BUF_INITIAL_REC) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Message Buffer Performance (SAP_PERF_BUF_MESSAGE) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
ABAP/4 Program Buffer Performance (SAP_PERF_BUF_PROGRAM) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
PXA_Usage

Displays the percent of space held by gaps in the program buffer during the interval out of the total amount of storage space in the buffer.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Presentation Buffer Performance (SAP_PERF_BUF_SCREEN) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Short Nametab Buffer Performance (SAP_PERF_BUF_SHORTNAMETAB) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Partial Table Buffer Performance (SAP_PERF_BUF_SINGLE_KEY) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Table Description Buffer Performance (SAP_PERF_BUF_TABLE_DESCR) Application Class
BufferQuality

Displays the buffer hits-to-requests ratio during the interval.
BufferReset

indicates whether or not the buffer has been reset during the interval (1 for yes, 0 for no).
BufferSize

Displays the total amount of allocated storage space in the buffer.
DirectoryFilled

Displays the percentage of buffer directories that are filled during the interval out of the maximum number of directory elements.
MaxObjNum

Displays the maximum number of directory elements available in the buffer.
ObjectsSwaped

Displays the number of objects swapped by the buffer during the interval.
RequestNum

Displays the total number of object requests to the buffer during the interval.
StorageUsed

Displays the percentage of buffer space in use during the interval out of the total amount of available storage space in the buffer.
SuccRequestNum

Displays the number of successful requests to the buffer during the interval.
Dialog Dispatcher Queue Performance (SAP_PERF_DISPQ_DIALOG) Application
DispQueueCapacity

Displays the percentage of dispatcher queue that is filled by dialog processes. Value should be under 2%.
RequestNumber

Displays the number of dialog processes in the dispatcher queue. Value should be under 2.
Enqueue Dispatcher Queue Performance (SAP_PERF_DISPQ_ENQUEUE) Application
DispQueueCapacity

Displays the percentage of dispatcher queue that is filled by enqueue processes. Value should be under 2%.
RequestNumber

Displays the number of enqueue processes in the dispatcher queue. Value should be under 2.
General Dispatcher Queue Performance (SAP_PERF_DISPQ_GENERAL) Application
EnqDirFillPct

Displays the percentage of the enqueue directory filled on the application server.
EnqUserTabFillPct

Displays the percentage of the enqueue user tab filled on the application server.
LockAdminErrCnt

Displays the current number of errors in lock administration on the application server.
Jobs Dispatcher Queue Performance (SAP_PERF_DISPQ_JOBS) Application Class
DispQueueCapacity

Displays the percentage of dispatcher queue that is filled by background processes. Value should be under 2%.
RequestNumber

Displays the number of background processes in the dispatcher queue. Value should be under 2.
Spool Dispatcher Queue Performance (SAP_PERF_DISPQ_SPOOL) Application Class
DispQueueCapacity

Displays the percentage of dispatcher queue that is filled by spool processes. Value should be under 2%.
RequestNumber

Displays the number of spool processes in the dispatcher queue. Value should be under 2.
Update Dispatcher Queue Performance (SAP_PERF_DISPQ_UPDATE) Application
DispQueueCapacity

Displays the percentage of dispatcher queue that is filled by update processes. Value should be under 2%.
RequestNumber

Displays the number of update processes in the dispatcher queue. Value should be under 2.
Update2 Dispatcher Queue Performance (SAP_PERF_DISPQ_UPDATE2) Application
DispQueueCapacity

Displays the percentage of dispatcher queue that is filled by V2 updated processes. Value should be under 2%.
RequestNumber

Displays the number of V2 update processes in the dispatcher queue. Value should be under 2.
ALE Work Process Performance (SAP_PERF_WP_ALE) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Batch Input Work Process Performance (SAP_PERF_WP_AUTOABA) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Buffer Synchronization Work Process Performance (SAP_PERF_WP_BUF_SYN) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
CPIC Work Process Performance (SAP _PERF_WP_CPIC) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Dialog Work Process Performance (SAP_PERF_WP_DIALOG) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
Correlations

Displays a summary of correlation measurements between Work Process Performance parameters and dialog response time.
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Enqueue Work Process Performance (SAP_PERF_WP_ENQUEUE) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Background Work Process Performance (SAP_PERF_WP_JOBS) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
RFC Work Process Performance (SAP_PERF_WP_RFC) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Spool Work Process Performance (SAP_PERF_WP_SPOOL) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Total Work Process Performance (SAP_PERF_WP_TOTAL) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Update Work Process Performance (SAP_PERF_WP_UPDATE) Application Class
AverageBytesTransf

Displays the average amount of kilobytes transferred per dialog step.
AverageCPU

Displays the average CPU time used by the workprocess.
AverageDBCallTime

Displays the average time a user request spends in the database, from when the request is put through to the database interface until the database interface delivers the result.
AverageDBTime

Displays the average processing time for a dialog step.
AverageLoadTime

Displays the average load time of the work process, that is, the average time required to load objects such as source codes, CUA interface and screen information from the database, and to generate them, if required.
AverageProcTime

Displays the average amount of time (in milliseconds) it takes a user request to be processed.
AverageRespTime

Displays the average response time of the work process, that is, the average amount of time from when a user request enters the dispatcher queue until the next screen is displayed.
AverageRollInTime

Displays the average amount of time needed to roll in user context information to the workprocess.
AverageRollOutTime

Displays the average amount of time needed to roll out user context information from the workprocess.
AverageWaitTime

Displays the average wait time of the work process, that is, the average amount of time that a user request sits in the dispatcher queue until the beginning of processing
DbCalls

Displays the number of requests sent to the database during the interval.
DialogStepsPerInterval

Displays the number of dialog steps counted over the interval.
Work Processes (SAP_PRC) Application Class
CompletedProcessDetails

Displays details on the completed processes detected by Trak during the most recent interval.
NumProcComplete

Displays the number of completed processes detected during Trak intervals, plotted over time.
NumProcRunning

Displays the number of worst (that is, with the highest CPU times) running work processes, detected during Trak intervals, plotted over time.
NumProcStop

Displays the number of stopped processes detected during Trak intervals, plotted over time.
RunningProcessDetails

Displays details on the worst running work processes, that is, work processes with the highest CPU times, running during the most recent Trak interval.
StoppedProcessDetails

Displays details on the stopped processes detected by Trak during the most recent interval.
Print Error Alerts (SAP_PRINT) Application Class
AlertDetails

Displays details on each print error alert.
Print Error Alerts Container (SAP_PRINT_CONT) Application Class
NumberNewAlerts

Displays the total number of new print error alerts (excluding recurring alerts) during the interval.
R/3 Probe (SAP_PROBE) Application Class
R3ProbeAvailability

Displays the status of the last attempt to connect to the target R/3 instance.
R3ProbeConnectTime

Displays the time it took to connect to the target R/3 instance.
R3ProbeExecTime

Displays the time it took to execute an R/3 function module.
R3ProbePercentAvailable

Displays the percentage of time the instance has been available since collection was reset.
R3ProbeTotalResponseTime

Displays the time it took to connect and execute an R/3 function module.
R/3 Probe Monitor (SAP_PROBE_MON) Application Class
R3ProbeAvailability

Displays the status of the last attempt to connect to the target R/3 instance.
R3ProbeConnectTime

Displays the time it took to connect to the target R/3 instance.
R3ProbeExecTime

Displays the time it took to execute an R/3 function module.
R3ProbePercentAvailable

Displays the percentage of time the instance has been available since collection was reset.
R3ProbeTotalResponseTime

Displays the time it took to connect and execute an R/3 function module.
Application Server Self-Monitoring (SAP_SELF_MON_APPS) Application Class
AgeOfMonitorData

Displays the age (in seconds) of the data obtained from the application server. The age of data should not be much larger than the interval length defined in PATROL for SAP Solutions - Trak.
PercentageComplete

The percentage of data that arrived intact from the R/3 system or application server.
ProcessingTime

Displays the amount of time that data-collection events took to be processed and displayed through the PATROL Console.
TotalChunks

The total number of chunks of data that were shipped from the R/3 system or application server.
Application Server Self-Monitoring Alert (SAP_SELF_MON_APPS_PROBLEM) Application Class
AlertDetails

Displays alert details for every time a problem is detected in the transfer of application server data, that is, every time a data collection cycle is skipped.
SAP System Self-Monitoring (SAP_SELF_MON_SID) Application Class
CycleGap

Displays the difference between the cycle number of the current data collection cycle and the previous data collection cycle. A difference larger than 1 indicates that the data collected during a certain cycle was not received.
PercentageComplete

The percentage of data that arrived intact from the R/3 system or application server.
TotalBytesShipped

The total number of bytes of data (including data from all chunks) that were shipped from the R/3 system or application server.
TotalChunks

The total number of chunks of data that were shipped from the R/3 system or application server.
WorstAgeOfMonitorData

Displays the worst AgeOfMonitorData value, based on a comparison of the values

obtained for this parameter from each of the application servers in the R/3 system.
WorstGapInCycle

Displays the worst CycleGap value, based on a comparison of the values obtained for this parameter from each of the application servers in the R/3 system.
WorstProcessingTime

Displays the worst ProcessingTime value, based on a comparison of the values obtained for this parameter from each of the application servers in the R/3 system.
SAP R/3 System (SAP_SID) Application Class
AvailHistoryCollector

controls the transfer of Availability data to the SAP system for generation of reports using the Service Reporting infrastructure.
Service Level Reporter Container (SAP_SL_REPORTER_CONT) Application Class
UpdateSLGDefinition

updates SLG definitions using a special RFC connection to S.L. Reporter.
SLG Application Server (SAP_SLG_APS) Application Class
AvgApplTime

Displays the average application time for transactions performed during the interval.
AvgCpuTime

Displays the average CPU time (non-waiting time) for transactions performed during the interval.
AvgDBTime

Displays the average database time for transactions executed during the interval.
AvgETERespTm

Displays the average total end-to-end (ETE) response time (internal response time + network time) for transactions executed during the interval.
AvgNetworkTm

Displays the average network time for transactions executed during the interval.
AvgRespTime

Displays average SAP internal response time (waiting time + dispatching time) for transactions executed during the interval.
AvgWaitTime

Displays the average wait time (until dispatching) for transactions performed during the interval.
NumConcUsers

Displays the number of users working concurrently on the instance during the interval.
NumDialogSteps

Displays the total number of dialog steps executed during the interval.
PercBelowTarget

Displays the measured percentage of transactions that executed with a response time below the user-defined target during the interval.
SLG Container (SAP_SLG_CONT) Application Class
SLGDefinition

presents details (e.g., users associated) of the specific SLG, as defined through S.L. Reporter.
SLG Shift (SAP_SLG_SHIFT) Application Class
CurrentAvgRespTm

Displays the internal response time for the current (incomplete) shift, based on an average of the response times measured for all intervals that have elapse so far during the shift.
ShiftAvgCpuTime

Displays the average CPU time (non-waiting time) for transactions executed during the most recently completed shift.
ShiftAvgDBTime

display the average database time for transactions executed during the most recently completed shift.
ShiftAvgETERespTm

Displays the average total end-to-end (ETE) response time (internal response time + network time) for transactions executed during the most recently completed shift.
ShiftAvgNetworkTm

Displays the average network time for transactions executed during the most recently completed shift.
ShiftAvgRespTime

Displays the average SAP internal response time (waiting time + dispatching time) for transactions executed during the most recently completed shift.
ShiftAvgWaitTime

Displays the average wait time (until dispatching) for transactions executed during the most recently completed shift.
ShiftNumDialogSteps

Displays the total number of dialog steps executed during the most recently completed shift.
ShiftPercBelowTarget

Displays the measured percentage of transactions that executed with a response time below the user-defined target during the recently completed shift.
System Log Alerts (SAP_SLG) Application Class
AlertDetails

Displays details on each system log alert.
System Log Alerts Container (SAP_SLOG_CONT) Application Class
NumberNewAlerts

Displays the total number of new system log alerts (excluding recurring alerts) during the interval.
Spool Alerts (SAP_SPOOL) Application Class
AlertDetails

Displays details on each spool alert.
Spool Alerts Container (SAP_SPOOL_CONT) Application Class
NumberNewAlerts

Displays the total number of new spool alerts (excluding recurring alerts) during the interval.
NumDbReq

Displays the number of errors issued for spool requests as recorded on the database. An updated value is presented only when the parameter is in alert status; otherwise the parameter remains in offline status.
SAP Memory Management (SAP_ST_MEMORY) Application Class
R3ExtMemAvailable

Displays the amount of extended memory available.
R3ExtMemMaxMemUsed

Displays the maximum amount of extended memory allocated since system startup.
R3ExtMemPctUsed

Displays the percentage of extended memory currently in use. Buffer bottlenecks will occur as R3ExtMemPctUsed reaches 100%.
R3ExtMemUsage

Displays the amount of extended memory currently in use. Buffer bottlenecks will occur as R3ExtMemUsage reaches the maximum allocated.
R3HeapMemMax

Displays the maximum amount of heap memory used since system startup.
R3HeapMemUsage

Displays the amount of heap memory currently in use.
R3PageDiskFile

Displays the size of the paging file on the disk.
R3PageMaxMemUsed

Displays the maximum utilization of paging area since system startup.
R3PagePctUsed

Displays the percentage of page area currently in use. The paging area is used to store large amounts of data, such as internal tables.
R3PageSharedMem

display the amount of paging area in the shared memory.
R3PageUsage

Displays the total amount of page area currently in use. The paging area is used to store large amounts of data, such as internal tables.
R3RollDiskFile

Displays the size of the roll file on the disk.
R3RollMaxMemUsed

Displays the maximum utilization of roll area since system startup.
R3RollPctUsed

Displays the percentage of roll area currently in use. The roll area is used for storing user contexts when a dialog work process is switched.
R3RollSharedMem

Displays the amount of roll area in the shared memory.
R3RollUsage

Displays the amount of roll area currently in use. The roll area is used for storing user contexts when a dialog work process is switched. It is also used as additional storage (if available) should extended memory be exhausted.
Top Tasks (SAP_TASKS) Application Class
AlertDetails

Displays details on each displayed top task.
Total Transport Error Alerts (SAP_TR_REQ) Application Class
AlertDetails

Displays details on each total transport error alert.
Total Transport Error Alerts Container (SAP_TR_REQ_CONT) Application Class
NumberNewAlerts

Displays the total number of new transport error alerts (excluding recurring alerts) during the interval.
Update (SAP_UPDATE) Application Class
R3UpdateCount

Displays a graph that shows the number of updates waiting to be carried out in the R/3 system.

















PATROL for Siebel eBusiness Applications 3.5.00


Table 35 PATROL for Siebel eBusiness Applications 3.5.00
Parameter



SIEBEL_COLLECTOR Application Class
AggregateColl

Collects aggregate data from server components and tasks across the Siebel enterprise.
CompColl

Retrieves the status of a Siebel component.
DBDirectColl

Retrieves information about connected users with Oracle or SQL databases.
DBTableColl

Retrieves database table statistics. You can adjust the collection interval based on the size and performance of your database.
DirSpaceColl

Monitors space usage for the Siebel file system and the docking and log directories.
EventSchedulerColl

Collects information about the event scheduler.
MobileClientExColl

Collects information about Siebel Mobile Client Exceptions.
OSColl

Retrieves CPU and memory information for the Siebel server for both local and remote hosts.
PerformanceColl

Retrieves performance statistics for the Siebel server and selected components.
RemoteSyncColl

Retrieves information about the synchronization status for remote Siebel clients.
RequestColl

Collects data about communication, application server, and component requests.
SARMColl

Discovers and processes the Siebel Server Siebel SARM files.
SysAvailColl

Polls the availability of Siebel gateway and application servers and the database connectivity status.
TaskColl

Retrieves the status of Siebel tasks.

Note: To activate the collector immediately, right-click the collector icon and select update from the pop-up menu.
TaskScaleColl

Collects information about the Siebel Task Dynamic Scale.
WebClientColl

Collects information about the Siebel Web Client.
WebStatsColl

Collects information about Siebel Web server statistics.
WorkflowColl

Collects information about potential problems with Siebel workflow requests.
SIEBEL_COMM_SERVER Application Class
CimService

Displays the status of the Dialogic Call Information Manager.

Collector: RequestColl
CtcServer

Displays the status of the Dialogic CT Connect Server.

Collector: RequestColl
ErrorOutReq

Displays the number of outbound communication requests in Error status after being processed by the CommOutboundMgr component.

Collector: RequestColl
ErrorOutReqList

Displays a list of the outbound communication requests that failed while being processed by the CommOutboundMgr component.

Collector: RequestColl
IncompleteOutReq

Displays the number of outbound communication requests that have not completed successfully.

Collector: RequestColl
IncompleteOutReqList

Displays a list of the outbound communication requests that have not completed successfully.

Collector: RequestColl
QueuedOutReq

Displays the number of outbound communication requests currently in the queue that have not been picked up for Server Request processing.

RequestColl
QueuedOutReqList

Displays a list of the outbound communication requests currently queued to be processed by the CommOutboundMgr component.

Collector: RequestColl
SIEBEL_COMP Application Class
















CompAlert

Displays the status of a selected component based on the default alert levels specified in the Setup Component Alert dialog box.

Collector: CompColl
MaxCpuUtil

Displays the amount of CPU used by the highest-CPU-consuming process running on a specified component on a specified server.

Collector: OSColl
MaxMemUsage

Displays the amount of memory (in KB) used by the highest-memory-consuming process running on a specified component on a specified server.

Collector: OSColl
NumRunTask

Graphically depicts the total number of running tasks.

Collector: TaskColl
ProcSummary

Contains a list of all processes for a specified component and their CPU and memory usage on a single server.

Collector: OSColl
TaskAlert

Displays the number of tasks in an alert state based on the criteria specified in the Task Time Window and Setup Task Alert Filters dialog boxes.

Collector: TaskColl
TaskAlertList

Lists the tasks currently in an alert state.

Collector: TaskColl
SIEBEL_COMP_AGGREG Application Class
CompSummary

Provides a summary of component and running task data for all instances of a component in the enterprise collected by the TotCompAlert and TotRunTask parameters.

Collector: AggregateColl
TotCompAlert

Displays the number of unavailable components across all servers in a Siebel enterprise. An alert is issued when the number of unavailable components exceeds a defined number.

Collector: AggregateColl
TotRunTask

Displays the number of running tasks for a selected component across all servers in a Siebel enterprise. An alert is issued when the number of running tasks falls below a defined minimum.

Collector: AggregateColl
SIEBEL_DATABASE Application Class
DBStatus

Displays the status of the current database availability useing the stoplight symbol.

Collector: SysAvailColl
NumSession

Displays by graph the number of current database sessions.

Collector: DBDirectColl
SIEBEL_DATABASE2 Application Class
DBStatus

Displays the status of the current database availability using the the stoplight symbol.

Collector: SysAvailColl
SIEBEL_DOCKING Application Class
DockFolderSize

Displays the size of the docking directory for the selected Siebel server.

Collector: DirSpaceColl
OverSizeCount

Displays the number of users whose docking directories exceed the maximum size limit.

Collector: DirSpaceColl
SIEBEL_DOCKING_USER Application Class
NumFiles

Reports the number of files in the user's docking folder.

Collector: DirSpaceColl
UserDockSize

Displays the size of the docking directory (in kilobytes) for a remote client.

Collector: DirSpaceColl
SIEBEL_FILESYS Application Class
FSFree

Graphically depicts the amount of disk space (in megabytes) that is available for the Siebel file system.

Collector: DirSpaceColl
FSUsed

Graphically depicts the disk space that has been used for the Siebel file system.

Collector: DirSpaceColl
SIEBEL_GATEWAY Application Class
SvcStatus

Indicates the status of the NT Gateway Service or the Unix Gateway Daemon Service using the stoplight symbol.

Collector: SysAvailColl






SIEBEL_HEALTH Application Class
HAAGCompAlert

Displays a graph of all Siebel server components in the enterprise that are in Alert state.

Collector: CompColl
HAAGHealthSummary

Provides a text summary of the data collected by the other SIEBEL_HEALTH parameters.

Collector: CompColl, OSColl, SysAvailColl, DirSpaceColl, TaskColl
HAAGProcessResource

Displays a graph of Siebel server process CPU or memory shortages that have prompted Alerts.

Collector: OSColl
HAAGServerOutage

Displays a graph of outages of any application server, gateway, database, or Resonate VIP/Node.

Collector: SysAvailColl
HAAGSpaceShortage

Displays a graph of disk space shortages on the Siebel file system, log directory, or docking file system that have prompted Alerts.

Collector: DirSpaceColl
HAAGTaskAlert

Displays a graph of all Siebel server tasks in the enterprise that are in Alert state.

Collector: TaskColl
SIEBEL_LOG Application Class
LogEvent

Displays the number of events that meet filter criteria.
LogFileSize

Displays the size of the log file (in kilobytes).

Collector: DirSpaceColl
LogIncreaseRate

Displays the increase (expressed as a percent) in the size of the log file during each collection cycle.

Collector: DirSpaceColl
SIEBEL_LOG_CONT Application Class
LogArchiveSize

Displays the size of the Siebel log archive directory (in megabytes).

Collector: DirSpaceColl
LogDiskFreeSpace

Displays the amount of free disk space (in megabytes) for the Siebel log directory.

Collector: DirSpaceColl
LogFolderSize

Displays the size of the Siebel log folder (in megabytes).

Collector: DirSpaceColl
SIEBEL_OS Application Class
HighCpuProcList

Lists the Siebel processes with high CPU utilization.

Collector: OSColl
HighMemProcList

Lists all high-memory Siebel processes as defined in the High Memory Proc dialog box.

Collector: OSColl
NumHighCpuProc

Depicts the number of Siebel processes with high CPU utilization.

Note: If the Siebel server resides on a remote machine, you must have a PATROL Agent and the PATROL KM for Windows NT (version 3.5.06 or later) or PATROL KM for Unix installed on the remote host in order for this parameter to be functional.

Collector: OSColl
NumSiebelProc

Graphically depits the number of current Siebel processes.

Note: If the Siebel server resides on a remote machine, you must have a PATROL Agent and the PATROL KM for Windows NT (version 3.5.06 or later) or PATROL KM for Unix installed on the remote host in order for this parameter to be functional.

Collector: OSColl
SiebelCpuUtil

Reports the percent of CPU utilization by all Siebel processes.

Collector: OSColl
SiebelMemUsage

Graphically depicts the total virtual memory (in kilobytes) used by all Siebel processes.

Note: If the Siebel server resides on a remote machine, you must have a PATROL Agent and the PATROL KM for Windows NT (version 3.5.06 or later) or PATROL KM for Unix installed on the remote host in order for this parameter to be functional.

Collector: OSColl
SiebelProcList

Lists all current Siebel processes.

Note: If the Siebel server resides on a remote machine, you must have a PATROL Agent and the PATROL KM for Windows NT (version 3.5.06 or later) or PATROL KM for Unix installed on the remote host in order for this parameter to be functional.

Collector: OSColl
SIEBEL_PERF_COMP Application Class
AvgConnTime

Depicts the average connect time for Object Manager sessions.

Collector: PerformanceColl
AvgRepSize

Graphically depicts the average size (in bytes) of reply messages.

Collector: PerformanceColl
AvgReqs

Graphically depicts the average number of requests per Object Manager session.

Collector: PerformanceColl
AvgReqSize

Graphically depicts the average size (in bytes) of request messages.

Collector: PerformanceColl
AvgRespTime

Graphically depicts the average response time (in seconds) of the Object Manager.

Collector: PerformanceColl
AvgSQLExecTime

Displays the average time (in seconds) for SQL execute operations.

Collector: PerformanceColl
AvgSQLFetchTime

Displays the average time (in seconds) for SQL fetch operations.

Collector: PerformanceColl
AvgSQLParseTime

Displays the average time (in seconds) for SQL parse operations.

Collector: PerformanceColl
AvgThinkTime

Depicts the average end-user think time (in seconds) between requests.

Collector: PerformanceColl
AvgTime

Displays the average time (in seconds) per extracted or processed node.

Collector: PerformanceColl
CPUTime

Displays the total CPU time (in seconds) for component tasks.

Collector: PerformanceColl
ElapsedTime

Displays the total elapsed running time (in seconds) for a server component task.

Collector: PerformanceColl
Errors

Depicts the number of errors encountered during an Object Manager session.

Collector: PerformanceColl
NumDBConnRtrs

Depicts the number of retries due to database connection loss.

Collector: PerformanceColl
NumDLRbkRtrs

Depicts the number of retries due to deadlocked rollbacks.

Collector: PerformanceColl
NumExhstRtrs

Depicts the number of times all retries were exhausted.

Collector: PerformanceColl
NumRequests

Displays the total number of processed requests.

Collector: PerformanceColl
RepMsgs

Displays the number of reply messages sent by the server.

Collector: PerformanceColl
RepSize

Displays the total size (in bytes) of reply messages.

Collector: PerformanceColl
ReqMsgs

Displays the number of request messages received by the server.

Collector: PerformanceColl
ReqSize

Displays the total size (in bytes) of request messages.

Collector: PerformanceColl
RespTime

Displays the total response time (in seconds) for the Object Manager.

Collector: PerformanceColl
Sleeps

Displays the total number of sleeps for server component tasks.

Collector: PerformanceColl
SleepTime

Displays the total amount of sleep time (in seconds) for server component tasks.

Collector: PerformanceColl
SQLExecs

Displays the total number of SQL execute operations.

Collector: PerformanceColl
SQLExecTime

Displays the total elapsed time (in seconds) for SQL execute operations.

Collector: PerformanceColl
SQLFetches

Displays the total number of SQL fetch operations.

Collector: PerformanceColl
SQLFetchTime

Displays the total elapsed time (in seconds) for SQL fetch operations.

Collector: PerformanceColl
SQLParses

Displays the total number of SQL parse operations.

Collector: PerformanceColl
SQLParseTime

Displays the total elapsed time (in seconds) for SQL parse operations.

Collector: PerformanceColl
ThinkTime

Displays the total end-user think time (in seconds).

Collector: PerformanceColl
TotalTasks

Displays the total number of tasks started for server components.

Collector: PerformanceColl
TotNodes

Displays the total number of extracted or processed nodes.

Collector: PerformanceColl
TotTime

Displays the total time for extracted or processed nodes.

Collector: PerformanceColl
Violations

Displays the total number of policy violations.

Collector: PerformanceColl
SIEBEL_PERF_SERVER Application Class
AvgConnTime

Depicts the average connect time for Object Manager sessions.

Collector: PerformanceColl
AvgRepSize

Depicts the average size (in bytes) of reply messages.

Collector: PerformanceColl
AvgReqs

Depicts the average number of requests per Object Manager session.

Collector: PerformanceColl
AvgReqSize

Depicts the average size (in bytes) of request messages.

Collector: PerformanceColl
AvgRespTime

Depicts the average response time (in seconds) of the Object Manager.

Collector: PerformanceColl
AvgSQLExecTime

Displays the average time (in seconds) for SQL execute operations.

Collector: PerformanceColl
AvgSQLFetchTime

Displays the average time (in seconds) for SQL fetch operations.

Collector: PerformanceColl
AvgSQLParseTime

Displays the average time (in seconds) for SQL parse operations.

Collector: PerformanceColl
AvgThinkTime

Depicts the average end-user think time (in seconds) between requests.

Collector: PerformanceColl
CPUTime

Displays the total CPU time (in seconds) for server component tasks.

Collector: PerformanceColl
ElapsedTime

Displays the total elapsed running time (in seconds) for server component tasks.

Collector: PerformanceColl
Errors

Depicts the number of errors encountered during an Object Manager session.

Collector: PerformanceColl
NumDBConnRtrs

Depicts the number of retries due to database connection loss.

Collector: PerformanceColl
NumDLRbkRtrs

Depicts the number of retries due to deadlock rollbacks.

Collector: PerformanceColl
NumExhstRtrs

Depicts the number of times all retries are exhausted.

Collector: PerformanceColl
RepMsgs

Displays the number of reply messages sent by the server.

Collector: PerformanceColl
RepSize

Displays the total size (in bytes) of reply messages.

Collector: PerformanceColl
ReqMsgs

Displays the number of request messages received by the server.

Collector: PerformanceColl
ReqSize

Displays the total size (in bytes) of request messages.

Collector: PerformanceColl
RespTime

Displays the total response time (in seconds) for the Object Manager.

Collector: PerformanceColl
Sleeps

Displays the total number of sleeps for server component tasks.

Collector: PerformanceColl
SleepTime

Displays the total amount of sleep time (in seconds) for server component tasks.

Collector: PerformanceColl
SQLExecs

Displays the total number of SQL execute operations.

Collector: PerformanceColl
SQLExecTime

Displays the total elapsed time (in seconds) for SQL execute operations.

Collector: PerformanceColl
SQLFetches

Displays the total number of SQL fetch operations.

Collector: PerformanceColl
SQLFetchTime

Displays the total elapsed time (in seconds) for SQL fetch operations.

Collector: PerformanceColl
SQLParses

Displays the total number of SQL parse operations.

Collector: PerformanceColl
SQLParseTime

Displays the total elapsed time (in seconds) for SQL parse operations.

Collector: PerformanceColl
ThinkTime

Displays the total end-user think time (in seconds).

Collector: PerformanceColl
TotalTasks

Displays the total number of tasks started for server components.

Collector: PerformanceColl
SIEBEL_REQUEST Application Class
ApsrvrReqAlert

Displays the number of application server requests that have the following statuses: active for longer than a specified period of time, queued for longer than a specified period of time, or failed.

Collector: RequestColl
ApsrvrReqAlertList

Displays a list of the application server requests that have the following statuses:active for longer than a specified period of time, queued for longer than a specified period of time, or failed.

Collector: RequestColl
SrmReqAlert

Displays the number of component requests that have the following statuses: active for longer than a specified period of time, queued for longer than a specified period of time, or failed.

Collector: RequestColl
SrmReqAlertList

Displays a list of the component requests that have the following statuses: active for longer than a specified period of time, queued for longer than a specified period of time, or failed.

Collector: RequestColl
SIEBEL_SARM_CHILD_GRP Application Class
















AvgContTime

Displays the aggregated average child contributed time.

Collector: SARMColl
ContCallPercent

Displays the aggregated child contributed call percentage.

Collector: SARMColl
ContCalls

Displays the aggregated total number of child contributed calls.

Collector: SARMColl
ContTimePercent

Displays the aggregated child contributed time percentage.

Collector: SARMColl
TotContTime

Displays the aggregated total child contributed time.

Collector: SARMColl
SIEBEL_SARM_GROUP Application Class
AvgExecTime

Displays the aggregated average execution time.

Collector: SARMColl
AvgRespTime

Displays the aggregated average response time.

Collector: SARMColl
MaxExecTime

Displays the aggregated maximum execution time.

Collector: SARMColl
MaxRespTime

Displays the aggregated maximum response time.

Collector: SARMColl
MinExecTime

Displays the aggregated minimum execution time.

Collector: SARMColl
MinRespTime

Displays the aggregated minimum response time.

Collector: SARMColl
NonRecursiveCalls

Displays the aggregated total number of nonrecursive instrumentation calls.

Collector: SARMColl
RecursiveCalls

Displays the aggregated total number of recursive instrumentation calls.

Collector: SARMColl
TotExecTime

Displays the aggregated total execution time.

Collector: SARMColl
TotRespTime

Displays the aggregated total response time.

Collector: SARMColl
SIEBEL_SARM_PARENT_GRP Application Class
AvgContTime

Displays the aggregated average child contributing time.

Collector: SARMColl
ContCallPercent

Displays the aggregated child contributing call percentage.

Collector: SARMColl
ContCalls

Displays the aggregatedtotal number of child contributing calls.

Collector: SARMColl
ContTimePercent

Displays the aggregated child contributing time percentage.

Collector: SARMColl
TotContTime

Displays the aggregated total child contributing time.

Collector: SARMColl
SIEBELSERVER Application Class
ServerState

Indicates the current status of the Siebel application server (running, shut down, or unavailable).

Collector: SysAvailColl




SvcStatus

Indicates the status of the of the NT Gateway Service or the Unix Gateway Daemon Service.

Collector: SysAvailColl




SIEBEL_SYNC Application Class
LowFreeDiskCount

Displays the number of remote clients whose percentage of free local diskspace is lower than the specified minimum threshold. The user is notified only if the last synchronization occurred during the last 24 hours.

Collector: RemoteSyncColl
OldTxnCount

Displays the total number of transactions in the transaction log that may not have been processed successfully. This parameter may serve as a sanity check to identify transactions that have not completed since the time of the last synchronization.

Collector: RemoteSyncColl
SyncCount

Displays the number of remote clients who have synchronized since the start of the calendar day.

Collector: RemoteSyncColl
SyncDueCount

Displays the number of remote clients due for synchronization.

Collector: RemoteSyncColl
SIEBEL_SYNC_USER Application Class
SyncAge

Displays a remote client's synchronization age in days.

Collector: RemoteSyncColl
SIEBEL_TABLE Application Class
NumRows

Displays the total number of rows in the target database table. Goes into alarm when the number of rows exceeds the threshold set by coll Setup Alarm Criteria.

Collector: DBDirectColl
TableIncreaseRate

Displays the rate of increase (per hour) in the number of rows in the target table. Goes into alarm when the table increases in size at a rate greater than that set by coll Setup Alarm Criteria.

Collector: DBDirectColl
SIEBEL_WEB_CLIENT_APPS Application Class
NumAnonSession

Reports the number of anonymous sessions used for the Object Manager.

Collector: WebClientColl
NumUserSession

Reports the number of anonymous sessions used for the Object Manager.

Collector: WebClientColl
NumWebSession

Reports the total number of sessions connected to the Object Manager.

Collector: WebClientColl
SessionList

Reports a list of Web user sessions

Collector: WebClientColl
SIEBEL_WEB_CLIENTS Application Class
NumProblemClient

Reports the number of problem Web clients.

Collector: WebClientColl
ProblemClientList

Reports a list of problem clients.

Collector: WebClientColl
SIEBEL_WEB_LOG Application Class
LogArchiveColl

Archives the Siebel Web Server Extension log files based on the web engine log archiving configuration.

Collector: RemoteSyncColl
SIEBEL_WEB_LOG Application Class
AnonSessRequested

Reports the number of anonymous sessions requested from the pool.

Collector: WebStatsColl
AnonSessReturnPct

Reports the percentage of anonymous sessions returned to the pool compared to the requests from the pool.

Collector: WebStatsColl
AvgLoginFreq

Reports the average frequency of login requests.

Collector: WebStatsColl
AvgLoginTime

Reports the average web session login time.

Collector: WebStatsColl
AvgReqFreq

Reports the average frequency of service requests.

Collector: WebStatsColl
AvgReqTime

Reports the average request time waiting for the service method to process.

Collector: WebStatsColl
LoginAttempt

Reports the number of login attempts.

Collector: WebStatsColl
RequestAttempt

Reports the number of service request attempts.

Collector: WebStatsColl
StdAvgLoginFreq

reports the standard deviation of the average login request frequency.

Collector: WebStatsColl
StdAvgLoginTime

Reports the standard deviation of the average login time.

Collector: WebStatsColl
StdAvgReqFreq

Reports the standard deviation of the average service request frequency.

Collector: WebStatsColl
StdAvgReqTime

Reports the standard deviation of the average request time.

Collector: WebStatsColl
SIEBEL_WORKFLOW Application Class
TotActnReq

Reports the total number of requests to be processed by the Workflow Action Agent

Collector: WorkflowColl
TotEsclReq

Reports the total number of requests to be prcessed by Workflow Monitor Agent.

Collector: WorkflowColl
TotTimedEsclReq

Reports the total number of time-based requests to be processed by Workflow Monitor Agent.

Collector: WorkflowColl
SIEBEL_WORKFLOW_GRP Application Class
ExpireReqNotProcessed

Displays the number of requests generated after the Siebel expiration time was exceeded and that also did not complete processing by the threshold set in the Setup Threshold Period.

Collector: WorkflowColl
ReqNoAction

Displays the number of requests with action not taken by the Workflow Action Agent.

Collector: WorkflowColl
ReqNotProcessed

Displays the number of requests not processed by the Workflow Monitor Agent.

Collector: WorkflowColl
SIEBEL_WORKFLOW_PROC Application Class
WfStepError

Displays the number of steps with errors in the defined workflow process.

Collector: WorkflowColl
WfStepErrorList

Displays the steps with errors in the defined workflow process.

Collector: WorkflowColl
















PATROL for Site Monitor/Site Monitor Connector 1.2.00


Table 36 PATROL for Site Monitor/Site Monitor Connector 1.2.00
Parameter



SITE_MONITOR
CategoryColl

Collects data for the Site Monitor category views; creates and populates the instances and parameters of all the JARTA and Synthetic Transaction Monitor (STM) classes under the category view.


DomainViewColl

Collects data for the Site Monitor domain view; creates and populates the instances and parameters of all classes under the domain view.
SITE_MONITOR_STATS
SafePassageLostReports

Sends data reports to the Site Monitor Collector at regular intervals. It reads and graphs the number of reports sent from the SafePassage that were dropped and not received by the Collector. By default, this parameter warns you upon the loss of one SafePassage report. The loss of a SafePassage report affects the reliability of your JARTA and STM information.

Collector: DomainViewColl


SafePassageQOverRun

Reads and graphs the total number of queued reports lost in the SafePassage proxy due to a queue overrun condition. This condition prevents the SafePassage data reports from reaching the Site Monitor KM.

Collector: DomainViewColl


SiteMonitorCollector

Indicates the overall status of the Collector during the current processing interval. When the SiteMonitorCollector alarms, it means that the Collector is not receiving data from the managed servers.

The Collector status is in an alarm state (red) if the heartbeat.smc file is non-existence or the file has not been updated during the last 15-minute interval. The Collector updates the heartbeat.smc file every minute when it is working normally.

Collector: DomainViewColl
SiteMonitorConnector

Monitors the number of connectors reporting data during the current processing interval.

Collector: DomainViewColl
SiteMonitorProcessor

Indicates the overall status of the Processor during the current processing interval. When the SiteMonitorProcessor alarms, it means that the Processor is not receiving data from the Collector.

Collector: DomainViewColl


SMG_CHAT
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the CHAT service on the domain and port during the current processing period.

Collector: DomainViewColl
ResponseTimeMaxSecs

Reports the maximum response time, in milliseconds, for the CHAT service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of CHAT servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored CHAT servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the CHAT service for the domain and port during the current processing interval. This parameter calculates percentages for servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl
SMG_CHATSERVER
chatDownTime

Graphs the downtime, in seconds, experienced by the monitored CHAT server.

Collector: DomainViewColl
chatResponseTime

Displays the response time, in milliseconds, for the monitored CHAT server during the current processing interval

Collector: DomainViewColl
chatStatus

The chatStatus parameter indicates the overall status of the monitored CHAT server.

The CHAT server status is OK (green) when the server is online and in an OK state.
The CHAT server is considered in an alarm state (red) when the server is in an offline, alarm, or warn state.

Collector: DomainViewColl
SMG_DNS
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the DNS service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the DNS service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of DNS servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored DNS servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the DNS service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Threshold for alarms and warnings

OK state (green) indicates the value is greater than the maximum Alarm2 percentage
Warning or cautionary state (yellow) indicates the value is within the Alarm2 range
Alarm state (red) indicates the value is within the Alarm1 range.

Collector: DomainViewColl
SMG_DNSSERVER
dnsDownTime

Graphs the downtime experienced by the monitored DNS server.

Collector: DomainViewColl
dnsResponseTime

Displays the response time, in milliseconds, for the DNS server during the current processing interval.

Collector: DomainViewColl
dnsStatus

The dnsStatus parameter indicates the overall status of the monitored DNS server.

The DNS server status is OK (green) when the server is online and in an OK state.
The DNS server status is considered in an alarm state (red) when the server is in an offline, alarm, or warn state.

Collector: DomainViewColl
SMG_FTP
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the FTP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response times, in milliseconds, for the FTP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of FTP servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored FTP servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the FTP service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

OK state (green) indicates the value is greater than the maximum Alarm2 percentage
Warning or cautionary state (yellow) indicates the value is within the Alarm2 range
Alarm state (red) indicates the value is within the Alarm1 range

Collector: DomainViewColl
SMG_FTPSERVER
ftpDownTime

Graphs the downtime, in seconds, experienced by the monitored FTP server.

Collector: DomainViewColl
ftpResponseTime

Displays the response time, in milliseconds, experienced by the monitored FTP server during the current processing interval.

Collector: DomainViewColl
ftpStatus

Indicates of the overall status of the monitored FTP server.

The FTP server status is OK (green) when the server is online and in an OK state.
The FTP server is considered in an alarm state (red) when the server is in an offline, alarm, or warn state.

Collector: DomainViewColl
SMG_HTTP
HTTP400Errors

Totals and graphs the number of the HTTP 400 series service errors reported on the monitored domain and port during the current processing interval.

Collector: DomainViewColl
HTTP400ErrorsAvgRate

Displays the average number of HTTP 400 series service errors reported on the monitored domain during the current processing interval.

Collector: DomainViewColl
HTTP400ErrorsMaxRate

Displays the maximum number of HTTP 400 series service errors reported on the monitored domain during the current processing interval.

Collector: DomainViewColl
HTTP500Errors

Totals and graphs the number of HTTP 500 series service errors reported on the monitored domain during the current processing interval.

Collector: DomainViewColl
HTTP500ErrorsAvgRate

Displays the average number of HTTP 500 series service errors reported on the monitored domain during the current processing interval.

Collector: DomainViewColl
HTTP500ErrorsMaxRate

Displays the maximum number of HTTP 500 series service errors reported on the monitored domain during the current processing interval.

Collector: DomainViewColl
httpResponseTime

Calculates and graphs the HTTP or HTTPS Service average response time, in milliseconds, during the current processing interval on the domain and port.

This parameter gathers its data from the httpResponseTime (INET_Web_Server) Internet Server Manager parameter.

Collector: DomainViewColl
KbytesSent

Graphs the number of kilobytes sent by the HTTP or HTTPS service on the domain and port during the current processing interval.

Collector: DomainViewColl
RequestsProcessed

Aggregates and graphs the total number of HTTP requests made on the domain and port during the current processing interval. This parameter gathers its data from the Requests (Web_AccLogStat) PATROL Internet Server Manager parameter. If you do not load the PATROL Internet Server Manager ISM_LOGMON.kml file on a managed server, this parameter will not report any data.

Collector: DomainViewColl
RequestRate

Aggregates and graphs the rate of HTTP requests processed on the domain and port during the current processing interval. This parameter gathers its data from the HTTP RequestRate (Inet_Web_Server) PATROL Internet Server Manager parameter. If you do not load the PATROL Internet Server Manager ISM_LOGMON.kml file on a managed internet host (managed server), this parameter will not report any data.

Collector: DomainViewColl
SiteDownTime

Aggregates and graphs the reported downtime of the HTTP or HTTPS site during the current processing interval. This parameter gathers its data from the httpDownTime (INET_Web_Server) Internet Server Manager parameter. All HTTP or HTTPS servers in the same domain and port are considered a Site. A site is down when all its servers are not responding to home page requests. When this condition exists, SiteDownTime displays the minimum httpDownTime value reported during the processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of HTTP servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored HTTP or HTTPS servers online on the domain and port with an OK status during the current interval.

This parameter gathers its data from the httpStatus (INET_Web_Server) Internet Server Manager parameter.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the HTTP service for the domain and port during the current processing interval.This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl
SMG_HTTPSERVER
httpDownTime

Graphs the downtime, in seconds, experienced by the monitored HTTP or HTTPS server.

Collector: DomainViewColl
httpErrors

Totals and graphs the number of errors experienced by the monitored HTTP server. If you do not load the PATROL Internet Server Manager ISM_LOGMON.kml file on a managed server, this parameter will not report any data.

Collector: DomainViewColl
httpRequests

Reports the number of HTTP requests made to this server.

Collector: DomainViewColl
httpResponseTime

Displays the response time, in milliseconds, experienced by the monitored HTTP server during the current processing interval.

Collector: DomainViewColl
httpStatus

Indicates of the overall status of the monitored HTTP server.

Collector: DomainViewColl
SMG_IMAP
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the IMAP service (online) on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the IMAP (online) service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of IMAP servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored IMAP servers online on the domain and port with an OK status during current interval.

Collector: DomainViewColl


SiteStatus

Reports the overall status of the IMAP service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl


SMG_IMAPSERVER
imapDownTime

Graphs the downtime experienced by the monitored IMAP server.

Collector: DomainViewColl
imapResponseTime

Displays the response time, in milliseconds, experienced by the monitored IMAP server during the current processing interval.

Collector: DomainViewColl
imapStatus

Indicates of the overall status of the monitored IMAP server.

Collector: DomainViewColl
SMG_JARTA
Description

Contains the complete name of the JARTA instance, which is the full description sent from JARTA. The JARTA icon label provides only a truncated portion of the instance name. You can also view the full description from the SMG_JARTA InfoBox.

Collector: DomainViewColl and CategoryColl
DNSLookupTimeAvgMsecs

Calculates and graphs the average amount of time spent performing a DNS name lookup on the monitored JARTA-enabled pages during the current processing interval.

Collector: DomainViewColl and CategoryColl
DNSLookupTimeMaxMsecs

Calculates and graphs the maximum amount of time spent performing a DNS name lookup on the monitored JARTA-enabled pages during the current processing interval.

Collector: DomainViewColl and CategoryColl
HTTP400Errors

Totals and graphs the number of HTTP 400 errors reported for the monitored JARTA-enabled pages during the current processing interval.

Collector: DomainViewColl and CategoryColl
HTTP500Errors

Totals and graphs the number of HTTP 500 errors reported for the monitored JARTA-enabled pages during the current processing interval.

Collector: DomainViewColl and CategoryColl
JARTAReportCount

Reports the number of requests on JARTA-enable pages counted by JARTA during the current processing interval.

Collector: DomainViewColl and CategoryColl
NetworkLatencyAvgMSec

Reports the average time, in milliseconds, that it takes the JARTA pages to travel from the Web Browser, to the Web server, and return back to the Web browser. Site Monitor calculates this parameter based on two parameters: ResponseTimeAvgMsecs and ServerLatencyAvgMsecs. NetworkLatencyAvgMsec equals ResponseTime AvgMsec less Server Latency AvgMsec.

Collector: DomainViewColl and CategoryColl
PageViewTimeAvgMsecs

Graphs the average amount of time, in milliseconds, that the JARTA Helper pages are loaded into the Web browser before being replaced by the JARTA-enabled page. The JARTA Helper page is the page that links to the JARTA-enabled page.

Collector: DomainViewColl and CategoryColl
PageViewTimeMinMsecs

Graphs the minimum amount of time, in milliseconds, that the JARTA Helper pages are loaded into the Web browser before being replaced by the JARTA-enabled page. The JARTA Helper page is the page that links to the JARTA-enabled page.

Collector: DomainViewColl and CategoryColl
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the monitored JARTA-enabled page on the domain and port during the current processing interval. Response time is measured from when the user selects the link until the requested HTML page loads into the browser.

Collector: DomainViewColl and CategoryColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the monitored JARTA-enabled page on the domain and port during the current processing interval. Response time is measured from when the user selects the link until the requested HTML page loads into the browser.

Collector: DomainViewColl and CategoryColl
ServerLatencyAvgMsecs

Graphs the average amount of time spent by the Web server in processing the request for the JARTA-enabled page.

Collector: DomainViewColl and CategoryColl
ServerLatencyMaxMsecs

Graphs the maximum amount of time spent by the Web server in processing the request for the JARTA-enabled HTTP page.

Collector: DomainViewColl and CategoryColl
ServerProcessingTimeAvgMsecs

Graphs the average amount of time, in milliseconds, for the server to process a JARTA-enabled HTTP request and send the reply to its recipient during the current processing interval.

Collector: DomainViewColl and CategoryColl
ServerProcessingTimeMaxMsecs

Graphs the maximum amount of time, in milliseconds, for the server to process a JARTA-enabled HTTP request and send the reply to its recipient during the current processing interval.

Collector: DomainViewColl and CategoryColl
SMG_JARTA_CACHE
Description

Contains the complete name of the JARTA instance, which is the full description sent from JARTA. The JARTA icon label provides only a truncated portion of the instance name. You can also view the full description from the JARTA_CACHE InfoBox.

Collector: DomainViewColl and CategoryColl
DNSLookupTimeAvgMsecs

Calculates and graphs the average amount of time spent performing a DNS name lookup on monitored JARTA-enabled pages during the current processing interval. Because these pages were cached before or during the processing interval, this DNS lookup time should be considerably less than the average lookup time for noncached pages.

Collector: DomainViewColl and CategoryColl
DNSLookupTimeMaxMsecs

Calculates and graphs the maximum amount of time spent performing a DNS name lookup on the monitored JARTA-enabled pages during the current processing interval. This parameter differs from DNSLookupTimeMaxMsecs (SMG_JARTA) in that these pages have been cached and should have a faster lookup time.

Collector: DomainViewColl and CategoryColl
HTTP400Errors

Totals and graphs the number of HTTP 400 errors reported for the monitored JARTA-enabled pages during the current processing interval. This parameter differs from HTTP400Errors (SMG_JARTA) in that these pages were cached before or during the current processing interval.

Collector: DomainViewColl and CategoryColl
HTTP500Errors

Totals and graphs the number of HTTP 500 errors reported for the monitored JARTA-enabled pages during the current processing interval. This parameter differs from HTTP500Errors (SMG_JARTA) in that these pages were cached before or during the current processing interval.

Collector: DomainViewColl and CategoryColl
JARTAReportCount

Graphs the number of requests on cached JARTA-enabled pages counted by JARTA during the current processing interval.

Collector: DomainViewColl and CategoryColl
NetworkLatencyAvgMsec

Reports the average time, in milliseconds, that it takes the cached JARTA pages to travel from the Web browser, to the Web server, and return back to the Web browser. Network Latency AvgMsec is equal to ResponseTimeAvgMsecs less ServerLatencyAvgMsecs. Since the JARTA pages are cached, the Server Latency AvgMsec is equal to zero. Therefore, Network Latency AvgMsec is equal to ResponseTime AvgMsec.

Collector: DomainViewColl and CategoryColl
PageViewTimeAvgMsecs

Graphs the average amount of time, in milliseconds, that the JARTA Helper pages are loaded into the Web browser before being replaced by the JARTA-enabled page. The JARTA Helper page is the page that links to the JARTA-enabled page. This parameter differs from PageViewTimeAvgMsecs (SMG_JARTA_CACHE) in that these pages were cached.

Collector: DomainViewColl and CategoryColl
PageViewTimeMinMsecs

Graphs the average amount of time in milliseconds that the JARTA Helper pages are loaded into the Web browser before being replaced by the JARTA-enabled page. The JARTA Helper page is the page that links to the JARTA-enabled page. This parameter differs from PageViewTimeMinMsecs (SMG_JARTA) in that these pages were cached.

Collector: DomainViewColl and CategoryColl
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the monitored JARTA page on the domain and port during the current processing interval. This parameter differs from ResponseTimeAvgMsecs (SMG_JARTA) in that these pages were cached.

Collector: DomainViewColl and CategoryColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, of the monitored JARTA-enabled page on the domain and port during the current processing interval. Response time is the amount of time from when the user selects the link until the requested HTML page loads into the browser. This parameter differs from ResponseTimeMaxMsecs (SMG_JARTA) in that these pages were cached.

Collector: DomainViewColl and CategoryColl
SMG_LDAP
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the LDAP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the LDAP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of LDAP servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored LDAP servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl


SiteStatus

Reports the overall status of the LDAP service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl


SMG_LDAPSERVER
ldapDownTime

Graphs the downtime, in seconds, experienced by this LDAP server.

Collector: DomainViewColl
ldapResponseTime

Totals and graphs the response time, in milliseconds, experienced by the monitored LDAP server during the current processing interval.

Collector: DomainViewColl
ldapStatus

Indicates of the overall status of the monitored LDAP server.

Collector: DomainViewColl
SMG_NNTP
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the NNTP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the NNTP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of NNTP servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored NNTP servers, online on the domain and port, with an OK status during the current processing interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the NNTP service for the domain and port during the current processing interval.This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl


SMG_NNTPSERVER
nntpDownTime

Graphs the downtime, in seconds, experienced by the monitored NNTP server.

Collector: DomainViewColl
nntpResponseTime

Displays the response time, in milliseconds, experienced by the monitored NNTP server during the current processing interval.

Collector: DomainViewColl
nntpStatus

Indicates the overall status of the monitored NNTP server.

Collector: DomainViewColl
SMG_POP3
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the POP3 service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the POP3 service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of POP3 servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored POP3 servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the POP3 service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl


SMG_POP3SERVER
pop3DownTime

Graphs the downtime, in seconds, experienced by the monitored POP3 server.

Collector: DomainViewColl
pop3ResponseTime

Displays the response time, in milliseconds, experienced by the monitored POP3 server during the current processing interval.

Collector: DomainViewColl
pop3Status

Indicates of the overall status of the monitored POP3 server.

Collector: DomainViewColl
SMG_PROXY
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the proxy service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the proxy service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of proxy servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored proxy servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the PROXY service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl


SMG_PROXYSERVER
proxyDownTime

Graphs the downtime, in seconds, experienced by the monitored proxy server.

Collector: DomainViewColl
proxyResponseTime

Collector: Displays the response time, in milliseconds, experienced by the monitored proxy server during the current processing interval.

Collector: DomainViewColl
proxyStatus

Indicates of the overall status of the monitored proxy server.

Collector: DomainViewColl
SMG_SMTP
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, for the SMTP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ResponseTimeMaxMsecs

Reports the maximum response time, in milliseconds, for the SMTP service on the domain and port during the current processing interval.

Collector: DomainViewColl
ServersMonitored

Displays the number of SMTP servers, both online and offline, on the domain and port reporting data during the current processing interval. This parameter can fluctuate if all the servers are not reporting data within the current processing interval.

Collector: DomainViewColl
ServersOnline

Displays the number of monitored SMTP servers online on the domain and port with an OK status during the current interval.

Collector: DomainViewColl
SiteStatus

Reports the overall status of the SMTP service for the domain and port during the current processing interval. This parameter calculates the percentage of servers with an OK status. SiteStatus is computed as Percentage equals ServersOnline divided by ServersMonitored.

Collector: DomainViewColl




SMG_SMTPSERVER
smtpDownTime

Graphs the downtime, in seconds, experienced by the monitored SMTP server.

Collector: DomainViewColl
smtpResponseTime

Displays the response time, in milliseconds, experienced by the monitored SMTP server during the current processing interval.

Collector: DomainViewColl
smtpStatus

Indicates of the overall status of the monitored SMTP server.

Collector: DomainViewColl
SMG_STM
AbortedTransactions

Sums and graphs the number of STM transactions that were aborted because of errors. The STM Completion statistic indicates the completion status of the transaction. Completion is either Aborted or Normal. Aborted indicates that the transaction did not complete normally, which can invalidate other statistics. An accompanying STM Status code can reveal why the transaction was aborted.

Collector: DomainViewColl and CategoryColl
BadConnections

Displays the total number of failed, refused, and dropped HTTP or HTTPS connections captured by the STM during the current processing interval. Bad TCP/IP connections is the sum of all failed, dropped, or refused connections captured by the STM during the current processing interval.

Collector: DomainViewColl and CategoryColl
BadConnectionsPercent

Displays the total number of failed, refused, and dropped HTTP or HTTPS connections captured by the STM during the current processing interval. Bad TCP/IP connections is the sum of all failed, dropped, or refused connections captured by the STM during the current processing interval.

Collector: DomainViewColl and CategoryColl
BrowserErrors

Displays the number of errors reported by STM that were not included in the standard HTTP status codes. These errors can occur when one or more of the following components are not responding:

Web server
network
domain name server

The status code range for browser errors is 12000 through 12999.

Collector: DomainViewColl and Category Coll
ContentErrors

Sums and graphs the number of content validation errors reported by STM. STM reports a content validation error when it receives a Web page containing text that was flagged as an error according to the criteria defined for this transaction. When it encounters content errors, the STM uses error codes between 13000 and 13999.

Collector: DomainViewColl and Category Coll
Description

Contains the complete name of the STM instance, which is the full description sent from STM. The STM icon label provides only a truncated portion of the instance name. You can also view the full description from the SMG_STM InfoBox.

Collector: DomainViewColl and CategoryColl
DNSLookupTimeAvgMsecs

Calculates and graphs the average time, in milliseconds, reported by the STM that it takes to perform a DNS name look up from Web pages during the current processing interval.

Collector: DomainViewColl and CategoryColl
DNSLookupTimeMaxMsecs

Calculates and graphs the maximum time, in milliseconds, reported by the STM that it takes to perform a DNS name lookup from Web pages during the current processing interval.

Collector: DomainViewColl and CategoryColl
FailedConnections

Reports the number of failed HTTP or HTTPS connections reported by the STM during the current processing interval. A connection fails when it is attempted but not completed because the site could not be contacted.

Collector: DomainViewColl and CategoryColl
GoodConnections

Graphs the number of good HTTP or HTTPS connections reported by the STM during the current processing interval.

Collector: DomainViewColl and CategoryColl
HTTP400Errors

Totals and graphs the number of HTTP 400 errors reported by the STM during the current processing interval. You can keep some HTTP errors from being handled as errors by creating an error exclusion list of HTTP codes.

Collector: DomainViewColl and CategoryColl
HTTP500Errors

Totals and graphs the number of HTTP 500 errors reported by the STM during the current processing interval. You can keep some HTTP errors from being handled as errors by creating an error exclusion list of HTTP codes.

Collector: DomainViewColl and CategoryColl
IncompletePages

Sums and graphs the number of incomplete Web pages (pages reported with a STM status code of 1101). A Web page is considered incomplete when the
</HTML> tag is not rendered or it is missing, or the tag is not read due to a transmission problem.

Collector: DomainViewColl and CategoryColl
MatchPercentAvg

Graphs the average MatchPercent values of the reporting devices.

MatchPercent is the percentage of playback data that matches the data received during the original recording. MatchPercent is computed as (Matched bytes divided by Total bytes) multiplied by 100. Total bytes is the sum of the replaced bytes, deleted bytes, and inserted bytes

Collector: DomainViewColl and CategoryColl
MatchPercentMin

Graphs the minimum MatchPercent values of the reporting devices. MatchPercent is the percentage of playback data that matches the date received during the original recording. MatchPercent is computed as (Matched bytes divided by Total bytes) multiplied by 100. Total bytes is the sum of the replaced bytes, deleted bytes, and inserted bytes.

Collector: DomainViewColl and CategoryColl
MatchPercentStDev

Graphs the standard deviation of the MatchPercent values received from the reporting devices. MatchPercent is the percentage of playback data that matches the data received during the original recording. MatchPercent is computed as (Matched bytes divided by Total bytes) multiplied by 100. Total bytes is the sum of the replaced bytes, deleted bytes, and inserted bytes.

Collector: DomainViewColl and CategoryColl
NetworkLatencyAvgMsec

Reports the average time, in milliseconds, that it takes the STM transactions to travel from the STM client to the Web server, and return back to the Web server. Site Monitor calculates this parameter based on two parameters: ResponseTimeAvgMsecs and ServerLatencyAvgMsecs. NetworkLatencyAvgMsec is equal to Response TimeAvgMsec less ServerLatencyAvgMsec. Site Monitor only reports this parameter when the Site Monitor Collector is installed with STM. This parameter is not available if you run STM in standalone mode.

Collector: DomainViewColl and CategoryColl
NumberofTransactions

Graphs the total number of STM Web transactions reported by the STM that occur during the current processing period.

Collector: DomainViewColl and CategoryColl
RefusedConnections

Totals and graphs the number of refused HTTP or HTTPS connections reported by the STM during the current processing interval. A connection is refused when an attempt is made and the site is contacted, but the site rejects the connection.

Collector: DomainViewColl and CategoryColl
ResponseTimeAvgMsecs

Reports the average response time, in milliseconds, captured by the STM on the domain and port during the current processing interval.

Collector: DomainViewColl and CategoryColl
ResponseTimeMaxMsecs

Reports the maximum TCP/IP response time, in milliseconds, captured by the STM on the domain and port during the current processing interval.

Collector: DomainViewColl and CategoryColl
ServerLatencyAvgMsecs

Graphs the average amount of time, as reported by the STM, for the Web server to process an HTTP or HTTPS request. The server latency time is the server processing time plus, the amount of time the server takes to perform an authorization request, and send it back to the originator. The server processing time is the time the server starts processing the request until is it complete.Because the Site Monitor Collector measures server latency, this parameter requires the presence of the Site Monitor Collector on the managed Web server.

Collector: DomainViewColl and CategoryColl
ServerLatencyMaxMsecs

The ServerLatencyMaxMsecs parameter graphs the maximum amount of time, as reported by the STM, for the Web server to process an HTTP or HTTPS request. The server latency time is the server processing time plus, the amount of time the server takes to perform an authorization request, and send it back to the originator. The server processing time is the time the server starts processing the request until is it complete.

Because the Site Monitor Collector measures server latency, this parameter requires the presence of the Site Monitor Collector on the managed Web server.

Collector: DomainViewColl and CategoryColl
ServerProcessingTimeAvgMsecs

Graphs the average amount of time, in milliseconds, reported by the STM, that it took the server to process an HTTP or HTTPS request during the current processing interval. The server processing time is the time the server starts processing the request until is it complete.

Because the Site Monitor Collector measures server processing time, this parameter requires the presence of the Site Monitor Collector on the managed Web server.

Collector: DomainViewColl and CategoryColl
ServerProcessingTimeMaxMsecs

Graphs the maximum amount of time, in milliseconds, reported by the STM, that it took the server to process an HTTP or HTTPS request and send the reply to its recipient during the current processing interval. The server processing time is the time the server starts processing the request until is it complete. Because the Site Monitor Collector measures server processing time, this parameter requires the presence of the Site Monitor Collector on the managed Web server

Collector: DomainViewColl and CategoryColl
ThroughputAvgRate

Calculates and graphs the average rate at which the STM receives data from the network.

Collector: DomainViewColl and CategoryColl
ThroughputMinRate

Reports and graphs the minimum rate at which the STM receives data from the network.

Collector: DomainViewColl and CategoryColl
TotalConnections

Totals and graphs the number of connections recorded by the STM during the current processing interval. TotalConnections is the sum of all GoodConnections, BadConnections, and FailedConnections parameters.

Collector: DomainViewColl and CategoryColl
SMG_STM_NONWEB
AbortedTransactions

Sums and graphs the number of aborted non-web TCP/IP STM transactions. The STM Completion statistic indicates the completion status of the transaction. Completion is either Aborted or Normal. Aborted indicates that the transaction did not complete normally, which can invalidate other statistics. An accompanying STM Status code can reveal why the transaction was aborted.

Collector: DomainViewColl and CategoryColl
BadConnections

Displays the total number of failed, refused, and dropped TCP/IP connections captured by the STM during the current processing interval. The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
BadConnectionsPercent

Displays the percentage of all bad TCP/IP connections versus total TCP/IP connections captured by the STM during the current processing interval. Bad TCP/IP connections is the sum of all failed, dropped, or refused TCP/IP connections captured by the STM during the current processing interval.The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
Description

Contains the complete name of the STM instance, which is the full description sent from the STM. The STM icon label provides only a truncated portion of the instance name. You can also view the full description from the SMG_STM_NONWEB InfoBox.

Collector: DomainViewColl and CategoryColl
FailedConnections

Reports the number of failed TCP/IP connections reported by the STM during the current processing interval. A connection fails when it is attempted but not completed because the site could not be contacted. The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
GoodConnections

Graphs the number of good TCP/IP connections reported by the STM during the current processing interval. The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
MatchPercentAvg

Graphs the average MatchPercent values of the TCP/IP reporting devices. MatchPercent is the percentage of playback data that matches the data received during the original recording. MatchPercent is computed as (Matched bytes divided by Total bytes) multiplied by 100. Total bytes is the sum of the replaced bytes, deleted bytes, and inserted bytes.

Collector: DomainViewColl and CategoryColl
MatchPercentMin

Graphs the minimum MatchPercent values of the TCP/IP reporting devices. MatchPercent is the percentage of playback data that matches the data received during the original recording. MatchPercent is computed as (Matched bytes divided by Total bytes) multiplied by 100. Total bytes is the sum of the replaced bytes, deleted bytes, and inserted bytes.

Collector: DomainViewColl and CategoryColl
MatchPercentStDev

Graphs the standard deviation of the MatchPercent values received from the TCP/IP reporting devices. MatchPercent is the percentage of playback data that matches the data received during the original recording. MatchPercent is computed as (Matched bytes divided by Total Bytes) multiplied by 100. Total bytes is the sum of the replaced bytes, deleted bytes, and inserted bytes.

Collector: DomainViewColl and CategoryColl
NumberofTransactions

Graphs the total number of TCP/IP transactions reported by the STM that occur during the current processing period. The SMG_STM)_NONWEB application class displays various end-to-end response time and end-users experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
RefusedConnections

Totals and graphs the number of refused TCP/IP connections reported by the STM during the current processing period. A connection is refused when it is attempted and the site is connected, but the site rejects the connection. The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
ResponseTimeAvgMsecs

Reports the average TCP/IP response time, in milliseconds, captured by the STM during the current processing interval.The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
ResponseTimeMaxMsecs

Reports the maximum TCP/IP response time, in milliseconds, captured by the STM during the current processing interval.The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
ThroughputAvgRate

Averages and graphs the average rate at which the STM receives TCP/IP data from the network.The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
ThroughputMinRate

Aggregates and graphs the minimum rate at which the STM receives TCP/IP data from the network. The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl
TotalConnections

Totals and graphs the number of TCP/IP connections the STM recorded during the current polling period. TotalConnections is the sum of all GoodConnections, BadConnections, and FailedConnections parameters. The SMG_STM_NONWEB application class displays various end-to-end response time and end-user experience statistics from FTP servers only.

Collector: DomainViewColl and CategoryColl

















PATROL for Sun Automated Dynamic Reconfiguration (ADR) 1.1.01


Table 37 PATROL for Sun Automated Dynamic Reconfiguration (ADR) 1.1.01
Parameter



ADR Application Class
ADRdaemon

Performs the ADR operations that are necessary to balancethe CPU load across domains in the Sun Enterprise 10000 server.
ADRstatus

Displays the results of the last ADR operation in a text format.

Collector: ADRdaemon
ADRrecipients

Displays a list of domains for which a donor board could not be located.

Collector: ADRdaemon
ADR_DOMAIN Application Class
ADRLoad

Tracks the current CPU load on each domain within the system.
ADRAvgLoad

Tracks the average CPU load on each domain within the system. The ADRAvgLoad parameter receives data from the ADRLoad parameter
















PATROL for Sybase 10.3.00


Table 38 PATROL for Sybase 10.3.00
Parameter



Adaptive Server Enterprise KM 10.2.00
Application Queue (SYBASE_APPL_QUEUE) Application Class (active only when application queue monitoring is enabled)
EngineSkipRate

Reports the number of times per second that tasks were skipped by engines during a parallel query.

Collector: SysMon
PriorityChangesRate

Reports the number of tasks for which the priority level changed per second.

Collector: SysMon
SlicesExhaustedRate

Reports the number of times per second that tasks on each run queue used a full-time slice.

Collector: SysMon
Availability (SYBASE_AVAILABILITY) Application Class
ARATest

Tests recovery action configuration as a dummy parameter.
ASE_Status

Monitors the status of the ASE; updated by discovery.
BackupServerStatus

Reports the status of the backup server.
BkupErrorLogUpdates

Monitors the backup ASE error log for updates.

Collector: BkupErrorLogColl
BlockerProcs

Provides information about processes that are holding locks and are blocking other processes.

For ASE 12.0 or later, reports Distributed Transactions that are blocking other processes.

Collector: MonProbUsers
ConnectionsAvailable

Reports whether or not Sybase ASE is accessible via a new connection using isql. A value of 1 means a connection is available; a value of 0 means a connection is not available.

Collector: IoColl
EnginesOffline

Reports the number of engines in an offline status.

Collector: EnginesOfflineColl
ErrorLogUpdates

A consumer parameter that is fired when the related collector detects a message in the error log. (No alarms or warnings occur when ASE is in blackout mode.)

Collector: ErrorLogColl
MirrorDevices

Provides information about devices that are configured to be mirrored but are not currently being mirrored.
NumBlockedProcs

Reports the number of processes that are currently blocked by another process.

Collector: ProcColl
SQLViewerErrorLogUpdates

Monitors the SQL Viewer error log for updates.

Collector: SQLViewerErrorLogColl
SQLViewerStatus

Reports the status of the SQL Viewer.
SuspectDatabases

Provides information about databases marked as suspect or unusable by the ASE.
Capacity (SYBASE_CAPACITY) Application Class 
ConnectionsRemaining

Reports the number of user connections available for use on the ASE.

Collector: CurConfigsColl
ConnectionsUsedPct

Displays the percentage of user connections being used on the ASE.

Collector: CurConfigsColl
ErrorLogSize

Reports the size of the ASE error log.
GlobalChanLockErrs

Monitors the PATROL Agents global channel for lock requests that have not been granted.

Collector: All
IdleProcs

Provides information about idle processes.

Collector: MonProbUsers
LocksRemaining

Reports the number of locks available for use.

Collector: CurConfigsColl
NumProcesses

Reports the number of ASE processes.

Collector: ProcColl
OpenDbRemaining

Reports the number of databases that can still be opened without exceeding the current configuration limit.

Collector: CurConfigsColl
OpenIndexesFree

Reports the number of open indexes currently free.

Collector: MetaDataColl
OpenIndexesUsed

Reports the number of open indexes currently being used.

Collector: MetaDataColl
OpenIndexesUsedPct

Reports the percentage of open indexes currently being used.

Collector: MetaDataColl
OpenObjectsFree

Reports the number of open objects currently free.

Collector: MetaDataColl
OpenObjectsUsed

Reports the number of open objects currently being used.

Collector: MetaDataColl
OpenObjectsUsedPct

Reports the percentage of open objects currently being used.

Collector: MetaDataColl
UniqueLoginsConnected

Reports the number of unique logins connected to an ASE.

Collector: Collector:CurConfigsColl
XactDscrptrsAvail

Sybase ASE 12.0 or later only.

Reports the number of transaction descriptors currently free.

Collector: MetaDataColl
XactDscrptrsUsed

Sybase ASE 12.0 or later only.

Reports the number of transaction descriptors currently being used.

Collector: MetaDataColl
XactDscrptrsUsedPct

Sybase ASE 12.0 or later only.

Reports the percentage of transaction descriptors currently being used.

Collector: MetaDataColl
Collectors (SYBASE_COLLECTORS) Application Class
BkupErrorLogColl

Monitors the backup ASE error log for updates and filters new log entries for user-definable messages that indicate potential problems.
CheckConfig

Checks to see whether a PATROL user name and password have been customized for an ASE or a database instance.

Warning: If CheckConfig account information is incorrect, or if CheckConfig is deactivated, the collector and standard parameters will not collect data and the ASE KM will not be able to monitor your ASE.
CpuColl

Monitors the status (busy, idle, input/output operations) of the ASE.
CurConfigsColl

Monitors users, databases, and locks on the ASE.
DatabaseSpaceColl

Queries sysusages, syssegments, and sysindexes to calculate values for space related parameters in the Database and Segment applications.
EnginesOfflineColl

Queries the master..sysengines table to determine which engines are in an offline status.
ErrorLogColl

Monitors the ASE error log for updates and filters new log entries for user-definable messages that indicate potential problems.
GetVersionInfo

Obtains the current ASE version information from the Sybase @@version variable.
HTMLReportColl

Generates HTML report on parameters.
IoColl

Monitors the ASE reading and writing to disk for the Users application.
MetaDataColl

Collects information about open objects and open indexes like the commands sp_monitorconfig open objects and sp_monitorconfig open indexes.
MonProbUsers

Checks processes that are blocking other processes or are idle for a specified period of time.
NetColl

Monitors the ASE network traffic.
ObjectSizeColl

Monitors the size of database objects.
ProcColl

Monitors the status and number of processes currently running on the ASE.
ResponseColl

Measures the ASE response time, the total time to execute an ISQL and sample SQL, and the subset time to execute the sample SQL.
SQLViewerErrorLogColl

Monitors the SQL Viewers error log for updates that indicate potential problems.
SysMon

Produces ASE performance data used by advanced parameters. The information comes from the sp_sysmon system procedure.
VerifyDatabase

Creates and deletes monitored database instances.
Data Cache (SYBASE_DATACACHE) Application Class (active only when data cache monitoring is enabled)
DCBufGrabbedDirtyRate

Reports the number of times per second that fetching a buffer by data caches found a dirty page and had to wait while the buffer was written to disk.

Collector: SysMon
DCBufGrabbedRate

Reports the number of buffers that were replaced per second in data caches.

Collector: SysMon
DCCachedLRURate

Reports the number of buffers placed at the head of most recently used (MRU)/least recently used (LRU) chain per second for data caches.

Collector: SysMon
DCCacheHitPct

Reports the percentage of data cache hits.

Collector: SysMon
DCCacheHitRate

Reports the number of data cache hits per second to the total number of cache searches.

Collector: SysMon
DCDiscardedMRURate

Reports the number of MRU buffers that were discarded from cache per second.

Collector: SysMon
DCLargeIODeniedRate

Reports the number of large I/Os per second that could not be performed.

Collector: SysMon
DCLargeIOPerformedRate

Reports the number of requested large I/Os per second that were performed.

Collector: SysMon
Data Cache Instance (SYBASE_DATACACHE_INST) Application Class (active only when data cache monitoring is enabled)
DCI_CacheHitsPCT

Lists the percentage of the times that the data was found in the user-defined data cache.

Collector: SysMon
DCI_CacheMissesPCT

Displays the percentage of time the data was not found in the user-defined data cache.

Collector: SysMon
DCI_FoundinWashPCT

Displays the percentage of time the data was found in the wash area of the user defined data cache.

Collector: SysMon
DCI_TotalCacheSearchesCNT

Lists the total number of named cache searches.

Collector: SysMon
Database (SYBASE_DATABASE) Application Class
DatabaseSpaceFreeMB

Monitors the amount of free space the database has available for expansion.

Collector: DatabaseSpaceColl
DatabaseSpaceUsedMB

Monitors the amount of space already reserved or allocated for the database.

Collector: DatabaseSpaceColl
DatabaseSpaceUsedPCT

Monitors the amount of total space allocated to the database versus database size.

Collector: DatabaseSpaceColl
LastTransLogDump

Tracks when the transaction log of a database was last dumped.

Collector: DatabaseSpaceColl
LogSpaceFreeMB

Monitors the amount of space available for the syslogs table (transaction log) of the current database.

Collector: DatabaseSpaceColl
LogSpaceUsedMB

Monitors the amount of space used by the syslogs table (transaction log) of the current database.

Collector: DatabaseSpaceColl
LogSpaceUsedPct

Monitors the remaining amount of space used by the syslogs table (transaction log) of the current database.

Collector: DatabaseSpaceColl
SegSpace

Reports segment space usage of the most full segment.

Collector: DatabaseSpaceColl
SuspectIndex

Provides information about indexes marked as suspect by the ASE.
Discovery (SYBASE_DISCOVERY) Application Class
SYBDVerifyMonitorSvr

Creates Monitor Server instances and sets them to active or inactive.
Disk (SYBASE_DISK) Application Class (active only when disk monitoring is enabled)
DiskIOCompRate

Reports I/O completions by all engines and all devices per second.

Collector: SysMon
DiskIOReqRate

Reports I/O requests to all disk devices by the ASE per second.

Collector: SysMon
DiskMaxOutstdIoCnt

Reports the maximum number of I/Os pending for each disk device.

Collector: SysMon
Disk Detail (SYBASE_DISK_DETAIL) Application Class (active only when disk monitoring is enabled)
DiskDeviceReadRate

Reports the reads per second for the respective disk device of the instance.

Collector: SysMon
DiskDeviceWriteRate

Reports the writes per second for the respective disk device of the instance.

Collector: SysMon
DiskTotIoRate

Reports the total I/O consumption for the ASE for the respective disk device of the instance.

Collector: SysMon
Disk Std (SYBASE_DISK_STD) Application Class
DiskIoErrs

Reports the number of disk device errors encountered by the ASE while reading and writing to disk.

Collector: IoColl
DiskIoReads

Reports the number of disk device reads by the ASE that occur between polling cycles.

Collector: IoColl
DiskIoWrites

Reports the number of disk device writes by the ASE that occur between polling cycles.

Collector: IoColl
Index (SYBASE_INDEX) Application Class (active only when index monitoring is enabled)
IndexDelMaintRate

Reports the number of delete operations to a table with indexes that required modification to one or more of the indexes per second.

Collector: SysMon
IndexInsUpdMaintRate

Reports the number of insert and update operations to a table with indexes that required modification to one or more of the indexes per second.

Collector: SysMon
IndexPgShrinkRate

Reports the number of times that deleting index rows caused the index to shrink off a page.

Collector: SysMon
IndexPgSplitsRate

Reports the number of times that a data page, clustered index page, or nonclustered index page was split because there was not enough room for a new row.

Collector: SysMon
Kernel (SYBASE_KERNEL) Application Class (active only when kernel monitoring is enabled)
EngineBusyAvgPct

Reports the average active time for all ASE engines as a percentage.

Collector: SysMon
EngineYieldsTotRate

Reports the total number of times that all ASE engines yielded because the CPU was busy.

Collector: SysMon
Kernel Detail (SYBASE_KERNEL_DETAIL) Application Class (active only when kernel monitoring is enabled)
EngineBusyPct

Reports the percentage of time that the ASE kernel was busy executing tasks on each engine. The parameter does not include the time spent checking I/O and the task run queue.

Collector: SysMon
EngineYieldsRate

Reports the number of times per second that each ASE engine yielded to the operating system.

Collector: SysMon
Locks (SYBASE_LOCKS) Application Class (active only when lock monitoring is enabled)
LockContentionAvgRate

Reports the average number of lock contentions as a percentage of all locks requested.

Collector: SysMon
LockDeadLockPctRate

Reports the percentage of deadlocks to the total of lock requests.

Collector: SysMon
LockReqRate

Reports the number of lock requests per second.

Collector: SysMon
Memory (SYBASE_MEMORY) Application Class (active only when memory monitoring is enabled)
MemoryPgsAllocCnt

Reports the number of times that a new page was allocated in memory.

Collector: SysMon
MemoryPgsRelCnt

Reports the number of times that a page was freed from memory.

Collector: SysMon
Metadata Cache (SYBASE_METADATA) Application Class (active only when metadata cache monitoring is enabled)
HashSpinlockPct

Reports the percentage of hash spinlocks that had to wait.

Collector: SysMon
IndexSpinlockPct

Reports the percentage of index spinlocks that had to wait.

Collector: SysMon
ObjectSpinlockPct

Reports the percentage of object spinlocks that had to wait.

Collector: SysMon
OpenDatabaseRate

Reports the number of databases opened per second.

Collector: SysMon
OpenIndexRate

Reports the number of indexes opened per second.

Collector: SysMon
OpenObjectRate

Reports the number of objects opened per second.

Collector: SysMon
Network (SYBASE_NETWORK) Application Class (active only when network monitoring is enabled)
NetBytesRcvdPerPkt

Reports the average number of bytes per packet received by the ASE.

Collector: SysMon
NetBytesRcvdRate

Reports the number of bytes received for all packets per second by the ASE.

Collector: SysMon
NetBytesSentPerPkt

Reports the average number of bytes per packet sent by the ASE.

Collector: SysMon
NetBytesSentRate

Reports the number of bytes sent for all packets per second by the ASE.

Collector: SysMon
NetPacketsRcvdRate

Reports the number of tabular data stream (TDS) packets per second received by the ASE.

Collector: SysMon
NetPacketsSentRate

Reports the number of TDS packets per second sent by the ASE.

Collector: SysMon
Network Std (SYBASE_NETWORK_STD) Application Class
PacketErrs

Reports the number of packet errors encountered by the ASE while reading and writing network packets.

Collector: NetColl
PacketsRcvd

Reports the number of packets received by the ASE during the previous polling cycle.

Collector: NetColl
PacketsSent

Reports the number of packets sent by the ASE during the previous polling cycle.

Collector: NetColl
Objects (SYBASE_OBJECTS) Application Class (active only when object monitoring is enabled)
DataPageClusterRatio

Sybase ASE 11.9.2 and later.

Reports the ratio of page accesses that do not require an extra extent I/O when rows are accessed in index order. This ratio measures the ordering and density of data pages in extents and is used to estimate the effectiveness of large I/Os. A value of 1.0 indicates perfect clustering or complete packing of extents.

Collector: ObjectSizeColl
DataPageCount

Sybase ASE 11.9.2 and later.

Reports the number of data pages used by a table.

Collector: ObjectSizeColl
DataRowClusterRatio

Sybase ASE 11.9.2 and later.

Reports the percentage of row accesses for an index that do not require an extra logical or physical I/O when rows are accessed in index order. This ratio estimates the number of pages that need to be read when the index is used to access data pages. This parameter is only active for indexes.

Collector: ObjectSizeColl
DataRowSize

Sybase ASE 11.9.2 and later.

Reports the average length of a data row in bytes. The size includes row overhead.

Collector: ObjectSizeColl
DeletedRows

Sybase ASE 11.9.2 and later.

Reports the number of rows that have been deleted from the table, where the deletion has been committed and the space has not been reclaimed. This parameter is only active for data-only-locked tables.

Collector: ObjectSizeColl
EmptyDataPages

Sybase ASE 11.9.2 and later.

Reports the number of pages that contain only deleted rows. This parameter is only active for data-only-locked tables.

Collector: ObjectSizeColl
EmptyLeafPages

Sybase ASE 11.9.2 and later.

Reports the number of empty leaf pages in the index. This parameter is only active for indexes.

Collector: ObjectSizeColl
ForwardedRows

Sybase ASE 11.9.2 and later.

Reports the number of forwarded rows in the table. This parameter is only active for data-only-locked tables.

Collector: ObjectSizeColl
IndexPageClusterRatio

Sybase ASE 11.9.2 and later.

Reports the ratio of index leaf page accesses that do not require an extra extent I/O. This ratio measures the clustering of index pages on extents. The ratio is used to estimate the cost of large I/Os for queries that need to read a large number of leaf pages from clustered indexes on data-only-locked tables and from nonclustered indexes. The parameter value for newly created indexes will be 1.0 or very close to 1.0, indicating optimal clustering. This parameter is only active for indexes.

Collector: ObjectSizeColl
LastUpdateStatistics

Sybase ASE 11.9.2 and later.

Reports the date that the update statistics function was last run on the table or index.

Collector: ObjectSizeColl
LeafPageCount

Sybase ASE 11.9.2 and later.

Reports the number of leaf pages used by an index.

Collector: ObjectSizeColl
LeafRowSize

Sybase ASE 11.9.2 and later.

Reports the average size of a leaf row for the index; this parameter is only active for indexes.

Collector: ObjectSizeColl
ObjectDataSizeMB

Reports the size of an objects data; the size does not include the Sybase internal allocation structures for the object.

Collector: ObjectSizeColl
ObjectReservedSizeMB

Reports the size that is reserved for an object.

Collector: ObjectSizeColl
PageSize

Sybase ASE 12.0 or later.

Reports the size that is reserved for a page in megabytes.

Collector: ObjectSizeColl
RowCountEstimate

Reports the average estimated number of rows in a table.

Collector: ObjectSizeColl
Parallel Query (SYBASE_PARALLEL_QUERY) Application Class (active only when parallel query monitoring is enabled)
MergeLockRequestRate

Reports the number of merge lock requests per second.

Collector: SysMon
ParallelQueryRate

Reports the number of parallel queries per second.

Collector: SysMon
SortBufferWaitsRate

Reports the number of sort buffer waits per second.

Collector: SysMon
Performance (SYBASE_PERFORMANCE) Application Class
CpuBusy

Reports the percentage of time that the ASE was busy during the previous polling cycle.

Collector: CpuColl
CpuIdle

Reports the percentage of time that the ASE was idle during the previous polling cycle.

Collector: CpuColl
CpuIoBusy

Reports the percentage of time that the ASE was busy performing I/O operations during the previous polling cycle.

Collector: CpuColl
LongRunningTrans

Reports the number of ASE processes and transactions existing for longer than one polling cycle.

Collector: MonProbUsers
MemoryUsedByProcs

Reports the total amount of memory used by all processes currently on the ASE.

Collector: ProcColl
ResponseExecTime

Measures the operating response time by executing ISQL and a sample SQL statement; you can change the SQL statement.

Collector: ResponseColl
ResponseSqlTime

Measures the ASE response time by executing a sample SQL statement; you can change the SQL statement.

Collector: ResponseColl
TuningAdvisorTxt

Displays expert advice about performance and tuning of the ASE.

Collector: CpuColl, CurConfigsColl, IoColl, ProcColl, SysMon.
Procedure Cache (SYBASE_PROCCACHE) Application Class (active only when procedure cache monitoring is enabled)
PCProcHitPct

Reports the percentage of procedure cache hits.

Collector: SysMon
PCProcHitRate

Reports the procedure cache hits per second.

Collector: SysMon
PCProcPhyReadsRate

Reports the stored procedure reads from disk per second.

Collector: SysMon
PCProcPhyWritesRate

Reports the stored procedure writes to disk per second.

Collector: SysMon
PCProcRemovesRate

Reports the stored procedure removed from cache per second.

Collector: SysMon
PCProcRequestRate

Reports the stored procedure requests per second.

Collector: SysMon
Recovery (SYBASE_RECOVERY) Application Class (active only when recovery monitoring is enabled)
RecovAvgTimeFreeCheckpt

Reports the average time that free (housekeeper) checkpoints lasted for databases.

Collector: SysMon
RecovAvgTimeNormalCheckpt

Reports the average time that normal checkpoints lasted for databases.

Collector: SysMon
RecovFreeCheckptRate

Reports the number of free (housekeeper) checkpoints per second for databases.

Collector: SysMon
RecovNormalCheckptRate

Reports the number of normal checkpoints per second for databases.

Collector: SysMon
Segment (SYBASE_SEGMENT) Application Class
SegSpaceFreeMB

Monitors the amount of free segment space.

Collector: DatabaseSpaceColl
SegSpaceUsedMB

Monitors the amount of segment space that is currently being used.

Collector: DatabaseSpaceColl
SegSpaceUsedPct

Calculates the percentage of segment space that is currently being used.

Collector: DatabaseSpaceColl
Tasks (SYBASE_TASKS) Application Class (active only when task monitoring is enabled)
TaskSwitchRate

Reports the number of normal checkpoints per second for databases.

Collector: SysMon
Transaction Management (SYBASE_TRANS_MGMT) Application Class (active only when transaction management monitoring is enabled)
TMChangeDbPct

Reports the percentage of user log cache (ULC) flushes that occurred because a transaction changed databases.

Collector: SysMon
TMEndTransPct

Reports the percentage of ULC flushes that occurred because a transaction ended.

Collector: SysMon
TMFullUIcPct

Reports the percentage of ULC flushes that occurred because the ULC was full.

Collector: SysMon
TMMaxUlcBytesUsed

Reports the maximum number of bytes used in any ULC.

Collector: SysMon
TMOtherPct

Reports the percentage of ULC flushes that occurred because of other reasons.

Collector: SysMon
TMSysLogRecordPct

Reports the percentage of ULC flushes that occurred because a system transaction occurred within the user transaction; for example, when an Object Allocation Map (OAM) page allocation occurred.

Collector: SysMon
TMTransLogAllocRate

Reports the number of transaction log allocations per second.

Collector: SysMon
TMTransLogWritesRate

Reports the number of transaction log writes per second.

Collector: SysMon
Transactions (SYBASE_TRANS) Application Class (active only when transaction monitoring is enabled)
TransCommitRate

Reports the number of transactions that were committed per second.

Collector: SysMon
TransDeleteRate

Reports the number of deferred and direct row deletions per second.

Collector: SysMon
TransInsertRate

Reports the number of row insertions to all tables per second.

Collector: SysMon
TransUpdateRate

Reports the number of deferred and direct row updates per second.

Collector: SysMonn
Users (SYBASE_USERS) Application Class
UserBlocked

Displays the status of the user process (blocked or unblocked). The value of the parameter is set to one the first time UserColl determines the monitored user process is blocked. If the value of this parameter is one, and UserColl determines the monitored user process is blocked, then the value is set to two. When the value is two and UserColl determines the monitored user process is blocked, the value remains two. The value is reset to zero once the monitored process is no longer blocked.

Collector: UserColl
UserColl

Monitors users and processes.
UserCpu

Monitors the CPU usage for the currently monitored user or process.

Collector: UserColl
UserIdle

Monitors the idle state for the currently monitored user or process.

Collector: UserColl
UserIo

Monitors the physical I/O usage for the currently monitored user or process.

Collector: UserColl
UserMemUsage

Monitors the memory usage in number of pages for the currently monitored user or process.

Collector: UserColl
UserTotCpu

Monitors the total user CPU consumption in machine ticks for the currently monitored user or process.

Collector: UserColl
UserTotIo

Monitors the total user I/O consumption for the currently monitored user or process.

Collector: UserColl
Worker Processes (SYBASE_WORKER_PROC) Application Class (active only when worker process monitoring is enabled)
WpMemoryRequestFailedRate

Reports the number of memory requests for worker processes that failed per second.

Collector: SysMon
WpMemoryRequestRate

Reports the number of memory requests for worker processes per second.

Collector: SysMon
WpRequestDeniedRate

Reports the number of requests for worker processes that were denied per second.

Collector: SysMon
WpRequestRate

Reports the number of requests for worker processes per second.

Collector: SysMon
WpUsedRate

Reports the number of worker processes used per second.

Collector: SysMon
IQ Server KM 10.2.00
Availability (SYBIQ_AVAILABILITY) Application Class
IQErrorLogUpdates

Monitors the IQ Server error log for updates.

Collector: IQErrorLogColl
IQServerStatus

Monitors the up/down status of the IQ Server.
Collectors (SYBIQ_COLLECTORS) Application Class
IQErrorLogColl

Monitors the IQ Server error log for updates that indicate potential problems.
Monitor Server KM 10.2.00
Data Caches (SYBMON_CACHE) Application Class (active only when data cache statistics collection is enabled)
SMCDataCacheContention

Reports the rate of requests for a data caches spinlock that were forced to wait.

Collector: SMSCollector
SMCDataCacheEfficiency

Reports the number of cache hits per second per megabyte of cache.

Collector: SMSCollector
SMCDataCacheHitPct

Reports the percentage of times a data page could be read from the cache without requiring a page read from disk.

Collector: SMSCollector
SMCDataCacheHitRate

Reports the number of data page reads that could be read from the cache.

Collector: SMSCollector
SMCDataCacheMissRate

Reports the number of data page reads that could not be read from the cache.

Collector: SMSCollector
SMCLargeIODeniedRate

Reports the number of times that the buffer manager could not satisfy optimizer requests to use a large I/O operation.

Collector: SMSCollector
SMCLargeIOPerformedRate

Reports the number of times that the buffer manager could satisfy optimizer requests to use a large I/O operation.

Collector: SMSCollector
SMCLargeIORequestedRate

Reports the number of times that the optimizer requested the buffer manager to use a large I/O operation.

Collector: SMSCollector
SMCPrefetchEfficiency

Reports the percentage of pages reused in the buffers that were referenced by the Adaptive Server.

Collector: SMSCollector
SMCRefAndReuseRate

Reports the number of pages in buffers that were both reused and later referenced by the Adaptive Server.

Collector: SMSCollector
SMCReuseDirtyRate

Reports the number of times that a reused buffer had changes that needed to be written.

Collector: SMSCollector
SMCReuseRate

Reports the number of pages in buffers that were reused.

Collector: SMSCollector
Devices (SYBMON_DEV) Application Class (active only when device statistics collection is enabled)
SMDDevHitPct

Reports the percentage of database device requests that were granted.

Collector: SMSCollector
SMDDevHitRate

Reports the number of times access to a database device was granted.

Collector: SMSCollector
SMDDevIoRate

Reports the sum of database device reads and writes.

Collector: SMSCollector
SMDDevMissRate

Reports the number of times access to a database device had to wait.

Collector: SMSCollector
SMDDevReadRate

Reports the number of reads made from a database device.

Collector: SMSCollector
SMDDevWriteRate

Reports the number of writes made to a database device.

Collector: SMSCollector
Engines (SYBMON_ENG) Application Class (parameters are active only when engine statistics collection is enabled)
SMECpuBusyPct

Reports the percentage of time that an engine process was in busy state.

Collector: SMSCollector
SMECpuYieldRate

Reports the number of times that the engine yielded to the operating system.

Collector: SMSCollector
SMEPageHitPct

Reports the percentage of times that a data page could be read from cache without requiring a physical page read for an engine.

Collector: SMSCollector
SMEPageIoRate

Reports the sum of logical page reads, physical page reads, and page writes for an engine.

Collector: SMSCollector
SMEPageLogicalReadRate

Reports the number of data page reads for an engine.

Collector: SMSCollector
SMEPagePhysicalReadRate

Reports the number of data page reads that could not be read from cache for an engine.

Collector: SMSCollector
SMEPageWriteRate

Reports the number of data pages written by an engine.

Collector: SMSCollector
Monitor Server (SYBMON_SVR) Application Class
SMSCollector

Connects to the Monitor Server using ismc; opens a global channel from PATROL to the Monitor Server if a channel does not already exist. Reads Monitor Server data based on the Monitor Server KM statistics collection settings. Creates data cache, device, engine, and process instances when statistics collection for those applications are enabled. Sets the value for all parameters in the Monitor Server KM except for SMSErrorLogUpdates and SMSEventBufferOverrun.
SMSCpuBusyPct

Reports the percentage of time that the ASE was in busy state.

Collector: SMSCollector
SMSCpuYieldRate

Reports the number of times that the ASE yielded to the operating system.

Collector: SMSCollectorr
SMSDeadLocks

Reports the number of deadlocks for the ASE.

Collector: SMSCollector
SMSErrorLogCol

Monitors the Monitor Server error log for updates. Sets the value for SMSErrorLogUpdates and gathers data for SMSEventBufferOverrun.
SMSErrorLogUpdates

Reports error messages written to the Monitor Servers error log. When a message is written to the error log, SMSErrorLogCol sets the parameter value to 1. When the alarm is acknowledged, the parameter is set back to 0. Acknowledge the alarm either by changing the event status to acknowledged in the PEM or using the Patrol Admin => Reset Parameter Alarm => ErrorLogUpdates menu command.

Collector: SMSErrorLogCol
SMSEventBufferOverrun

Reports the occurrence of event buffer wrap messages in the Monitor Servers error log.

Collector: SMSErrorLogCol
SMSLockCntRate

Reports the number of locks for the ASE.

Collector: SMSCollector
SMSLockHitPct

Reports the percentage of successful requests for locks for the ASE.

Collector: SMSCollector
SMSLocksDeniedRate

Reports the number of locks that were requested but not granted.

Collector: SMSCollector
SMSLocksGrantedRate

Reports the number of locks that were requested and granted immediately.

Collector: SMSCollector
SMSLocksWaitedRate

Reports the number of locks that were requested and granted after waiting for another lock to be released.

Collector: SMSCollector
SMSLogContentionPct

Reports the percentage of times that two tasks tried to flush the user log cache to the transaction log and one task had to wait for the log semaphore.

Collector: SMSCollector
SMSMonitorServerStatus

Reports the number of discovery cycles that the Monitor Server has not been running.

Collector: SMSCollector
SMSNetByteIoRate

Reports the sum of network bytes sent and received.

Collector: SMSCollector
SMSNetBytesRcvdRate

Reports the number of network bytes received.

Collector: SMSCollector
SMSNetBytesSentRate

Reports the number of network bytes sent.

Collector: SMSCollector
SMSNetPktsRcvdRate

Reports the number of network packets received.

Collector: SMSCollector
SMSNetPktsSentRate

Reports the number of network packets sent.

Collector: SMSCollector
SMSPageHitPct

Reports the percentage of times that a data page could be read from cache without requiring a physical page read for the ASE.

Collector: SMSCollector
SMSPageIoRate

Reports the sum of logical page reads, physical page reads, and page writes for the ASE.

Collector: SMSCollector
SMSPageLogicalReadRate

Reports the number of data page reads for the ASE.

Collector: SMSCollector
SMSPagePhysicalReadRate

Reports the number of data page reads that could not be read from cache for the ASE.

Collector: SMSCollector
SMSPageWriteRate

Reports the number of data pages written by the ASE.

Collector: SMSCollector
SMSProblemUsers

When process monitoring is enabled, reports the number of processes that have a statistic that would be in a warning or an alarm state.

Collector: SMSCollector
SMSStpHitPct

Reports the percentage of time that a stored procedure execution is found in the procedures query plan in cache.

Collector: SMSCollector
SMSStpLogicalReadRate

Reports the number of requests to execute a stored procedure from cache or with a read from sysprocedures.

Collector: SMSCollector
SMSStpPhysicalReadRate

Reports the number of requests to execute a stored procedure from cache for which a read from sysprocedures was necessary.

Collector: SMSCollector
SMSXactDeleteDeferredRate

Reports the number of rows deleted from database tables that occurred in deferred mode.

Collector: SMSCollector
SMSXactDeleteDirectRate

Reports the number of rows deleted from database tables that occurred in direct mode.

Collector: SMSCollector
SMSXactDeleteRate

Reports the number of rows deleted from database tables.

Collector: SMSCollector
SMSXactInsertClusteredRate

Reports the number of rows inserted into database tables that have a clustered index.

Collector: SMSCollector
SMSXactInsertHeapRate

Reports the number of rows inserted into database tables that do not have a clustered index.

Collector: SMSCollector
SMSXactInsertRate

Reports the number of rows inserted into database tables.

Collector: SMSCollector
SMSXactRate

Reports the number of committed SQL statement blocks delimited by a begin transaction and commit transaction statement.

Collector: SMSCollector
SMSXactSelectRate

Reports the number of SELECT and OPEN CURSOR statements.

Collector: SMSCollector
SMSXactUpdateDeferredRate

Reports the number of updates to database tables that occurred in deferred mode.

Collector: SMSCollector
SMSXactUpdateDirectRate

Reports the number of updates to database tables that occurred in direct mode.

Collector: SMSCollector
SMSXactUpdateRate

Reports the number of updates to database tables.

Collector: SMSCollector
Processes Application Class
SMPCpuBusyPct

Reports the percentage of time that a process was in running state.

Collector: SMSCollector
SMPDeadlocks

Reports the number of deadlocks for a user.

Collector: SMSCollector
SMPLockCntRate

Reports number of locks for a user.

Collector: SMSCollector
SMPPageHitPct

Reports the percentage of times that a data page could be read from cache without requiring a physical page read for a user.

Collector: SMSCollector
SMPPageIoRate

Reports the sum of logical page reads, physical page reads, and page writes for a user.

Collector: SMSCollector
SMPPageLogicalReadRate

Reports the number of data page reads by a user.

Collector: SMSCollector
SMPPagePhysicalReadRate

Reports the number of data pages that could not be read from cache for a user.

Collector: SMSCollector
SMPPageWriteRate

Reports the number of data pages written by a user.

Collector: SMSCollector
Replication Server KM 10.2.00
Discovery (SYBRS_DISCOVERY) Application Class
GetRepServerPid

Retrieves the process ID of each configured Replication Server and LTM so that discovery can determine which processes are active.
Log Transfer Manager (SYBRS_LTM) Application Class
LTMErrorLogColl

Monitors the LTM error log for updates that indicate potential problems.
LTMErrorLogUpdates

Reports error messages written to the LTM error log.

Collector: LTMErrorLogColl
LTMErrorLogUpdatesFatal

Reports fatal error messages written to the LTM error log.

Collector: LTMErrorLogColl
LTMServerStatus

Indicates whether the LTM is running or is shut down.

Collector: LTMErrorLogColl
Partition (SYBRS_PARTITION) Application Class
PartitionAllocMB

Displays the allocated space for a partition.

Collector: RSPartitionColl
PartitionAllocPCT

Displays the percentage of allocated space to the total available space for a partition.

Collector: RSPartitionColl
PartitionSizeMB

Displays the total partition size.

Collector: RSPartitionColl
Queue (SYBRS_QUEUE) Application Class
QueueBlocksWrittenCNT

Displays the number of blocks written to the queue.

Collector: RSQueueColl
QueueBytesPerBlockCNT

Displays the number of bytes written divided by the number of blocks written.

Collector: RSQueueColl
QueueBytesPerMsgCNT

Displays the ratio of bytes written to the messages written in a queue.

Collector: RSQueueColl
QueueBytesWrittenCNT

Displays the number of bytes written to the queue.

Collector: RSQueueColl
QueueGrowthStatus

Indicates the growth status of the queue.

Collector: RSQueueColl
QueueMsgReadsCNT

Displays the number of messages read from the queue.

Collector: RSQueueColl
QueueMsgWritesCNT

Displays the number of messages written to the queue.

Collector: RSQueueColl
Replication Agent (SYBRS_REPAGENT) Application Class
RAThreadRetriesCNT

Reports the number of unsuccessful connections that the Replication Agent makes to the Replication Server.

Collector: RSRatColl
RAThreadStatus

Indicates whether the Replication Agent thread is running or is shut down.

Collector: RSRatColl
Replication Server Application Class
RepServerStatus

Displays the status of the Replication Server (up or down); allows you to define a recovery action when the server status changes.

Collector: RSErrorLogColl
RSErrorLogColl

Monitors the Replication Server error log for updates that indicate potential problems.
RSErrorLogUpdates

Reports error messages written to the Replication Server error log.

Collector: RSErrorLogColl
RSErrorLogUpdatesFatal

Reports fatal error messages written to the Replication Server error log.

Collector: RSErrorLogColl
RSMessagesDelivered

Displays the number of messages that the Replication Server sent to the Stable Queue Manager (SQM).
RSMessagesPending

Displays the number of messages that the Replication Server sent to the SQM and that have not been acknowledged.
RSPartitionColl

Creates Partition application instances and sets the value of the following partition parameters:

PartitionAllocMB
PartitionAllocPCT
PartitionSizeMB
RSPartitionSpaceUsed

Displays the percentage of available partition space currently being used by the Replication Server.
RSQueueColl

Creates Queue application instances and sets the value of the following queue parameters:

QueueBlocksWrittenCNT
QueueBytesPerBlockCNT
QueueBytesPerMsgCNT
QueueBytesWrittenCNT
QueueGrowthStatus
QueueMsgReadsCNT
QueueMsgWritesCNT
RSQuiesceCheck

Displays whether the Replication Server has been quiesced.
RSRatColl

Creates Replication Agent instances and sets the RAThreadStatus and RAThreadRetriesCnt parameters.
RSRouteStatus

Displays information about RSI threads.
RSThreadsDownColl

Displays information about all threads that are down and causes the appropriate ThreadsDown parameters to alarm:

RSThreadsDownDSI
RSThreadsDownLTM
RSThreadsDownRSI
RSThreadsDownSQM
RSThreadsDownSQT
RSThreadsDownDSI

Displays the number of Data Server Interface (DSI) threads that are down.

Collector: RSThreadsDownColl
RSThreadsDownLTM

Displays the number of Log Transfer Manager (LTM) threads that are down.

Collector: RSThreadsDownColl
RSThreadsDownRSI

Displays the number of Replication Server Interface (RSI) threads that are down.

Collector: RSThreadsDownColl
RSThreadsDownSQM

Displays the number of Stable Queue Manager (SQM) threads that are down.

Collector: RSThreadsDownColl
RSThreadsDownSQT

Displays the number of Stable Queue Transaction (SQT) threads that are down.

Collector: RSThreadsDownColl
















PATROL for Unix 9.1.10


Table 39 PATROL for Unix 9.1.10
Parameter

Note: See the PATROL Knowledge Module for Unix User Guide for platform group definitions.

COLLECTORS Application Class
DFColl

Executes the df command, collects the output, and then sets the values of the FILESYSTEM parameters.
HAAGColl

Gathers data on the systems overall CPU, File System, and Swap file usage.
NETColl

Executes the netstat command to collect information about incoming packets, outgoing packets, and errors and sets NETWORK parameters.
NFSColl

Executes the nfsstat command to collect information about NFS and sets the values of the various NFS parameters.
PrinterColl

Executes the lpstat -t command, determines the status of each queue, and displays information about all the local and remote printers you are monitoring.
PROCColl

Collects kernel information on the Linux platform and sets KERFileUsedPercent and KERINodeUsedPercent.
PSColl

Calculates the top 10 processes that use the most CPU resources and sets the PROCTopProcs parameter.
SARColl

Executes the sar command, sets various parameters, parses the output and performs the necessary data conversion.
SMPColl

Executes the mpstat command and collects information about each individual CPU on the system. This collector is different from the SARColl and VMColl because the latter look at multiple CPUs as a whole.
UPTColl

Executes the uptime command and sets the CPULoad parameter.
USRPROCColl

Collects information to set USERS parameters.
VMColl

Gathers operating system information related to system memory by executing the vmstat command and sets various parameters.
COMPOSITES_COLLECTOR Application Class
CPARMColl

Collects information for the defined composite parameters.
Composites Application Class
CPARMExpression

Displays the composite parameter definition.

Collector: CPARMColl
CPARMGeneratedCodeText

Displays the PSL that was generated by the composite expressions generator and used to determine the composite parameter value.

Collector: CPARMColl
CPARMResult

Displays the results of the composite parameter calculation for the specified composite parameter.

Collector: CPARMColl
COMPUTERS Application Class
BlockSize

Sets the value for reporting system usage and converts OS memory to 1-KB blocks.
BootTime

Setsthe time stamp of the last time the system was rebooted.
DFBlockSize

Sets the units for reporting disk usage and converts OS disk block values to 1-KB blocks.
KernelInfo

Collects information about the kernel, such as when it was last built.
KMVersion

Collects the version number of the Knowledge Module for Unix that is currently loaded.
LPSpoolDirectory

Maintains a list of possible locations for printer queues. Used by PRINTER discovery to limit instance creation to printers that have locally defined queues.
MaxConfigValLen

Contains the maximum number of characters allowed in the value of a variable stored in the agent configuration database and is used for edit checking.
OSName

Collects information about the operating system.
PageSize

Sets the value for reporting memory usage.
SetupClearText

Clears the screen for new output.
SNMPStart

Starts the SNMP Master Agent on Unix platforms.
TerminalEmulator

Sets the terminal emulator that PATROL should use; an xterm window is the default.
CPU Application Class
CPUCpuUtil

Displays the percentage of CPU utilization calculated by adding user time and system time.

Collector: DCMColl controlled by CPUCtrl, SARColl or VMColl
CPUIdleTime

Displays the percentage of time that the CPU was idle.

Collector: DCMColl controlled by CPUCtrl, SARColl or VMColl
CPUInt

Displays the number of non-VME device interrupts.

Collector: VMColl, DCM eceptions: All, PSL execptions: AIX

Note: When using DCM collection or PSL execptions, PATROL deactivates this parameter on all platforms.When using PSL collection, PATROL deactivates this parameter on AIX.
CPULoad

Displays the 1-minute load average from the uptime command.

Collector: UPTColl
CPUProcSwch

Displays the total number of CPU context switches per second.

Collector: SARColl, VMColl, DCM execptions: All

Note: When using DCM collection or PSL execptions, PATROL deactivates this parameter on all platforms.When using PSL collection, PATROL deactivates this parameter on AIX
CPURunQSize

Displays the number of processes in the run queue (RunQ).

Note: On HP-UX systems, SAR occasionally outputs a null value that can lead to incorrect values for the CPURunQSize parameter.

Collector: DCMColl controlled by CPUCtrl, SARColl or VMColl
CPUSysTime

Displays the percentage of CPU time spent in system mode doing system tasks, including the CPU resources consumed by calls to kernel routines.

Collector: DCMColl controlled by CPUCtrl, SARColl or VMColl
CPUUserTime

Displays the percentage of CPU time currently being spent in user mode executing commands and performing user tasks.

Collector: DCMColl controlled by CPUCtrl, SARColl or VMColl
CPUWio

Displays the percentage of CPU time spent waiting for input and output operations.

Collector: DCMColl controlled by CPUCtrl, SARColl

Note: When using PSL collection, PATROL deactivates this parameter on Compaq Tru64 (Digital Unix, OSF/1) and Solaris.
DCM Application Class
CPUCollStatus

Indicates whether the CPU data is collected by the DCM or PSL.
CPUCtrl

Controls the poll time and status (active or inactive) for DCM collection of CPU application parameter data.
DCMColl

Calls the DCM binary that runs outside of PATROL. Parameters ending in the Ctrl suffix control the poll time and status (active or inactive) for DCM data collection of their respective applications. For example, CPUCtrl controls DCM data collection for the CPU application class.
DCMMessages

Displays the status messages related to the DCM process.
DCMMonitor

Monitors the status of the DCM process and the global channel used by the KM to communicate with the DCM process.
DCMStatus

Displays status messages for the DCM process. Anytime the DCM_Alert parameter goes into alarm, PATROL documents the problem in this parameter. It also records start/stop/restart events for the DCM process.

Collector: DCMMonitor
DCMUpdateCount

Displays the number of parameter values sent to the PATROL Agent from the DCM process. It provides one measure of the performance of the PATROL Agent/DCM interface.

Collector: DCMMonitor
DCMUpdateTime

Displays the number of seconds spent by PATROL Agent processing a data update from the DCM process. It provides one measure of the performance of the PATROL Agent/DCM interface.

Collector: DCMMonitor
DFColl

Executes the df command and collects the output and sets the values of the FILESYSTEM parameter.

Collector: DCMColl
DISKCtrl

Controls the poll time and status (active or inactive) for DCM collection of DISK application parameter data.
DiskCollStatus

Indicates whether the disk data is collected by the DCM or PSL.

Collector: DISKCtrl
HAAGColl

Gathers data on the systems overall CPU, File System, and Swap file usage.

Collector: DISKCtrl
KernelCollStatus

Indicates whether kernel data is collected by the DCM or PSL.

Collector: KERNELCtrl
KERNELCtrl

Controls the poll time and status (active or inactive) for DCM collection of KERNEL application parameter data.
MemCollStatus

Indicates whether kernel data is collected by the DCM or PSL.

Collector: MEMORYCtrl
MEMORYCtrl

Controls the poll time and status (active or inactive) for DCM collection of MEMORY application parameter data.
NETColl

Executes the netstat command and collects information about incoming packets, outgoing packets, errors, and sets NETWORK sonsumer parameters.
NFSColl

Executes the nfsstat command to collect information about NFS (Network File System) and sets the values of the NFS collectors.
PRINTERColl

Executes the lpstat -t command, determines the status of each queue, and displays information about all the local and remote printers you are monitoring.
PROCColl

Collects kernel information on the Linux platform and sets KERFileUsedPercent and KERINodeUsedPercent.
ProcessCollStatus

Indicates whether process data is collected by the DCM or PSL.

Collector: PROCESSCtrl
PROCESSCtrl

Controls the poll time and status (active or inactive) for DCM collection of PROCESS application parameter data on group A platforms.
PSColl

Calculates the top 10 processes that use the most CPU resources and sets the PROCTopProcs parameter.
SARColl

Executes the sar command, collects the output, and sets the values of the appropriate PATROL parameters.
SMPColl

Executes the mpstat command, collects information about each individual CPU on the system, and sets the values of the SMP parameters.
SwapCollStatus

Indicates whether swap data is collected by the DCM or PSL.

Collector: SWAPCtrl
SWAPCtrl

Controls the poll time and status (active or inactive) for DCM collection of SWAP application parameter data on group A platforms.
UPTColl

Executes the uptime command.
UserCollStatus

Indicates whether user data is collected by the DCM or PSL.
USERPROColl

Collects operating system information relating to users.
USERSCtrl

Controls the poll time and status (active or inactive) for DCM collection of USERS application parameter data on group A platforms.
VMColl

Gathers operating system information realted ti system menomry and executes the vmstat commant, collects the output, and performs nessary data conversions.
DISK Application Class
ChangeDiskLabel

Changes the label for a DISK instance frim sdNN to sdNN (cNNtNNdNN) making the label more user-friendly.
DSKAvgQueue

Displays the average number of disk I/O requests in the queue.

Collector: DCMColl controlled by DISKCtrl

PSL exceptions: Compaq Tru64 (Digitak Unix, OSF/1)
DSKAvgServ

Displays the average service time, in milliseconds, that transfer requests are completed by the device. For a disk, it includes seek time, rotational latency, and data transfer times.

Collector: DCMColl controlled by DISKCtrl

PSL exceptions: Compaq Tru64 (Digitak Unix, OSF/1)
DSKAvgWait

Displays the average time that transfer requests wait in the queue for the device.

Collector: VMColl
DSKBps

Displays the number of blocks read from, or written to, the device per second and indicates the work load for the device.

Collector: DCMColl controlled by DISKCtrl, VMColl
DSKMsps

Displays the average disk seek time for the device and indicates the speed of the device. A gradual increase in average disk seek time usually indicates data fragmentation. A heavily fragmented disk can have a negative impact on system throughput.

Collector: VMColl
DSKPercentBusy

Displays the percentage of time that the device is busy servicing a transfer request and indicates the workload for the device..

Collector: DCMColl controlled by DISKCtrl, VMColl, VMColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1)
DSKRead

Displays the number of kilobytes read from disk per second.

Collector: DCMColl controlled by DISKCtrl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1)
DSKReadWrite

Displays the number of read and write pages read/written to the device per seconf and indicates the work load for the device.

Collector: DCMColl controlled by DISKCtrl, VMColl, VMColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1)
DSKSps

Displays the number of disk seeks per second and indicates the work load of the device..

Collector: DCMColl controlled by DISKCtrl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1)
DSKTps

Displays the number of disk transfers per second.

Collector: DCMColl controlled by DISKCtrl
DSKWrite

Displays the number of kilobytes written to disk per second.

Collector: DCMColl controlled by DISKCtrl

PSL exceptions: Solaris.
FILESYSTEM Application Class
FSAvailableSpace

Displays the amount of space available for this FILESYSTEM instance.

Collector: DFColl
FSAvailableSpaceMB

Displays the amount of space available in megabytes (MB) for this FILESYSTEM instance.

Collector: DFColl
FSCapacity

Displays the percentage of the file system storage that is currently in use.

Collector: DFColl
FSFreeInodes

Displays the number of I-nodes available on the local file system.

Note: This parameter applies to local files systemss only, not NFS.

Collector: DFColl
FSInodeUsedPercent

Displays the percentage of I-nodes used.

Collector: DFColl
FSMountStatus

Displays the mount status of the file system.

Collector: DFColl
FSUsedSpace

Displays the amount of used space for the FILESYSTEM instance.

Collector: DFColl
HEALTH AT A GLANCE (HAAG) Application Class
HAAGCPUUsage

Monitors the system's overall CPU usage and alarms when the overall CPU usage exceeds a user-defined value.

Collector: HAAGColl
HAAGFilesystemUsage

Monitors the system's overall File System usage and alarms when the overall File System usage exceeds a user-defined value.

Collector: HAAGColl
HAAGHealthSummary

Reports on the systems overall health based on the other HAAG parameters: HAAGCPUUsage, HAAGFileSystemUsage, and HAAGSwapUsage.

Collector: HAAGColl
HAAGSwapUsage

Monitors the system's overall Swap file usage and alarms when the overall Swap file usage exceeds a user-defined value.

Collector: HAAGColl
KERNEL Application Class
KERDirBlk

Displays the number of directory block reads issued per second.

Collector: SARColl

DCM exceptions: All
KERFileUsedPercent

Displays the percentage of kernel file slots being used; this parameter monitors file table use.

Collector: DCMColl controlled by KERNELCtrl, SARColl

DCM exceptions: AIX, Compaq Tru64 (Digital Unix, OSF/1), Linux, Reliant, Sequent DYNIX/ptx, Solaris

PSL execptions: Compaq Tru64 (Digital Unix, OSF/1).
KERIGet

Displays the number of files located by an I-node entry.

Collector: SARColl

DCM exceptions: All
KERINodeUsedPercent

Displays the percentage of kernel I-node slots being used.

Collector: DCMColl controlled by KERNELCtrl, SARColl

DCM exceptions: AIX, Linux, Reliant, Sequent DYNIX/ptx, Solaris

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1)
KERLgAlloc

Displays the number of bytes allocated for large memory requests.

Collector: SARColl
KERLgFail

Displays the number of large memory pool requests that were not satisfied.

Collector: SARColl
KERLgMem

Displays the amount of memory in bytes available in the KERNEL Memory Allocation (KMA) large memory request pool.

Collector: SARColl
KERLockUsedPercent

Displays the percentage of used kernel lock slots.

Collector: SARColl
KERMsg

Displays the number of message operations performed per second.

Collector: DCMColl controlled by KERNELCtrl, SARColl

DCM exceptions: HP-UX, Linux, Reliant, Sequent DYNIX/ptx, Solaris

PSL exceptions: Solaris
KERMsgNumQueueUsedPercent

Displays the percentage of the total number of available message queues being used system-wide.

Platform: All except Compaq Tru64/OSF1

Collector: DCMColl controlled by KERNELCtrl
KERMsgNumUsedPercent

Displays the percentage of the total number of available kernel messages that are being used system-wide.

Platform: All except AIX and Compaq Tru64/OSF1

Collector: DCMColl controlled by KERNELCtrl
KERNameI

Displays the number of file system pathname searches, which are the conversion of filenames to I-nodes.

Collector: SARColl

DCM exceptions: all
KEROvzAlloc

Displays the amount of memory dynamically allocated for oversized requests.

Collector: SARColl
KEROvzFail

Displays the number of requests for oversized memory that could not be satisfied.

Collector: SARColl
KERProcUsedPercent

Displays the percentage of used kernel process and monitors the process table utilization.

Collector: DCMColl controlled by KERNELCtrl, SARColl

DCM exceptions: AIX, Linux, Reliant, Sequent DYNIX/ptx, Solaris

PSL exceptions: Solaris
KERSemNumSetUsedPercent

Displays the percentage of the total number of available semaphore sets that are being used system-wide.

Collector: DCMColl controlled by KERNELCtrl, SARColl
KERSemNumUsedPercent

Displays the percentage of the total number of available semaphores used system-wide

Collector: DCMColl controlled by KERNELCtrl
KERSemOps

Displays the number of active semaphores.

Collector: DCMColl controlled by KERNELCtrl, SARColl

DCM exceptions: HP-UX, Linux, Reliant, Sequent DYNIX/ptx, Solaris

PSL exceptions: Solaris
KERShmNumUsedPercent

Displays the percentage of the total number of available shared memory segments that are being used system-wide.

Collector: DCMColl controlled by KERNELCtrl
KERSmlAlloc

Displays the amount of memory in bytes allocated to the small memory request pool by KERNEL Memory Allocation.

Collector: SARColl
KERSmlFail

Displays the number of small memory requests that failed.

Collector: SARColl
KERSmlMem

Displays the amount of memory in bytes that is available in the small memory request pool allocated by KERNEL Memory Allocation.

Collector: SARColl
KERSysCall

Displays the total number of system calls made per second; this is the total of all read, write, fork, and exec system calls.

Collector: DCMColl controlled by KERNELCtrl, SARColl or VMColl
MEMORY Application Class
MEMActiveVirPage

Displays the number of active virtual pages.

Collector: VMColl

DCM exceptions: All

PSL exceptions: AIX (32 bit)
MEMAddrTransFault

Displays the number of pages that were not in physical memory when accessed.

Collector: SARColl for all supported platforms except OSF, whcih uses VMColl

DCM exceptions: All
MEMBRead

Displays the number of physical reads per second from the disk to the buffer cache.

Collector: SARColl

DCM exceptions: All
MEMBWrt

Displays the number of physical writes per second from the disk to the system buffer cache.

Collector: SARColl

DCM exceptions: All
MEMCow

Displays the number of page write faults that have occurred.

Collector: VMColl

DCM exceptions: All
MEMFreeMem

Displays the number of 1 kilobyte (KB) pages of memeory available.

Collector: DCMColl controlled by MEMORYCtrl, SARColl or VMColl

PSL exceptions: AIX (32 bit) and Solaris
MEMLRead

Displays the number of logical blocks read per second from the system buffer.

Collector: DCMColl controlled by MEMORYCtrl, SARColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1) and Solaris.
MEMLWrt

Displays the number of writes per second to the system buffer.

Collector: DCMColl controlled by MEMORYCtrl, SARColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1) and Solaris.
MEMPageAnticipated

Displays the anticipated short-term memory shortfall in 1 kilobyte pages.

Collector: VMColl

DCM exceptions: All
MEMPageFreed

Displays the number of 1 kilobyte pages that were added to the free list by the page-stealing daemon.

Collector: VMColl or SARColl

DCM exceptions: All

PSL exceptions: AIX (32 bit)
MEMPageIn

Displays the number of 1 kilobyte pages that have been swapped in from secondary memory.

Collector: SARColl or VMColl

PSL exceptions: AIX (32 bit)
MEMPageOut

Displays the number of 1 KB pages of memory paged out of physical memory to disk.

Collector: SARColl or VMColl

PSL exceptions: AIX (32 bit)SARColl or VMColl
MEMPageScanned

Displays the number of pages scanned per second by the page-stealing daemon in order to find more memory.

Collector: DCMColl controlled by MEMORYCtrl, SARColl or VMColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1)
MEMPFault

Displays the number of detected page protection faults that caused pages to be copied.

Collector: DCMColl controlled by MEMORYCtrl, SARColl

PSL exceptions: AIX, Compaq Tru64 (Digital Unix, OSF/1), HP-UX, and Solaris
MEMPgFil

Displays the number of page faults that have been reclaimed by bringing the pages in from the file system.

Collector: SARColl
MEMPRead

Displays the number of raw reads per second from character device.

Collector: DCMColl controlled by MEMORYCtrl, SARColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1), HP-UX, and Solaris
MEMPWrt

Displays the number of raw writes per second to character devices.

Collector: DCMColl controlled by MEMORYCtrl, SARColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1), HP-UX, and Solaris
MEMRCache

Displays the percentage of logical reads that are in the buffer cache.

Collector: SARColl

DCM exceptions: All
MEMWCache

Displays the percentage of logical blocks written in the buffer cache; indicating the effectiveness of system buffering.

Collector: DCMColl controlled by MEMORYCtrl, SARColl

PSL exceptions: Compaq Tru64 (Digital Unix, OSF/1), Solaris
MEMWire

Displays the number of 1 kilobyte memory pages that cannot be paged out of main memory. This parameter shows locked memory.

Collector: VMColl

DCM exceptions: All
MEMZero

Displays the number of memory pages that are zero-filled on demand.

Collector: VMColl

DCM exceptions: All
NETWORK Application Class
NETCollisionPrc

Displays the percentage of output attempts by the selected host that resulted in an Ethernet collision.

Collector: NETColl
NETInErrPrc

Displays the percentage of incoming data packets containing packet format errors.

Collector: NETColl
NETOutErrPrc

Displays the percentage of outgoing data packets that contain packet format errors.

Collector: NETColl
NETPacketsIn

Displays the total number of incoming packets during the sample interval.

Collector: NETColl
NETPacketsOut

Displays the total number of outgoing packets during the sample interval.

Collector: NETColl
NETPseudoAddresses

Displays the virtual address assigned to a network interface.

Collector: NETWORK Discovery
NFS Application Class
NFSCBadCall

Displays the percentage of all NFS client calls that failed.

Collector: NFSColl
NFSCCall

Displays the total number of NFS client calls made since the last sample.

Collector: NFSColl
NFSCCreate

Displays the percentage of all NFS client calls made to create a new file.

Collector: NFSColl
NFSCFsStat

Displays the percentage of all NFS client calls made to retrieve file attributes or statistics (since the last sample).

Collector: NFSColl
NFSCGetAttr

Displays the percentage of all NFS client calls that are requests to get file attributes.

Collector: NFSColl
NFSCLink

Displays the percentage of all NFS client calls made to create hard links.

Collector: NFSColl
NFSCLookUp

Displays the percentage of all NFS client calls made to look up directory paths.

Collector: NFSColl
NFSCMkDir

Displays the percentage of all NFS client calls that are calls made to create directories.

Collector: NFSColl
NFSCNclGet

Displays the number of times that the client had to request a new client handle for an NFS call.

Collector: NFSColl
NFSCNclSleep

Displays the number of times that the kernel had to wait to obtain client structure information

Collector: NFSColl
NFSCNull

Displays the percentage of NFS client calls that request no action other than acknowledgement.

Collector: NFSColl
NFSCRead

Displays the number of all NFS client calls for reading data from files.

Collector: NFSColl
NFSCReadDir

Displays the percentage of all NFS client calls made to read directories.

Collector: NFSColl
NNFSCReadLink

Displays the percentage of NFS client calls made to read symbolic links.

Collector: NFSColl
NFSCRemove

Displays the percentage of all NFS client calls made to remove files.

Collector: NFSColl
NFSCRename

Displays the percentage of all NFS client calls made to rename files.

Collector: NFSColl
NFSCRmDir

Displays the percentage of all NFS client calls made to remove directories.

Collector: NFSColl
NFSCRpcBadCall

Displays the percentage of all NFS client RPC calls that returned an error other than time-outs or interrupts.

Collector: NFSColl
NFSCRpcBadXid

Displays the percentage of client RPC calls for which multiple responses were received.

Collector: NFSColl
NFSCRpcCall

Displays the total number of NFS client RPC calls made to the selected server by all clients.

Collector: NFSColl
NFSCRpcNewCred

Displays the number of client RPC calls made to refresh authentication information.

Collector: NFSColl
NFSCRpcNullRecv

Displays the number of empty messages received from TCP or LAN.

Collector: NFSColl
NFSCRpcRetrans

Displays the number of NFS client RPC requests that had to be retransmitted.

Collector: NFSColl
NFSCRpcTimeOut

Displays the percentage of all client RPC calls that timed out because no client handles were available.

Collector: NFSColl
NFSCRpcWait

Displays the number of times that a client request had to wait because a client handle was unavailable.

Collector: NFSColl
NFSCSetAttr

Displays the percentage of all NFS client calls made to store file attributes.

Collector: NFSColl
NFSCSymLink

Displays the percentage of all NFS client calls made to create symbolic links.

Collector: NFSColl
NFSCWrite

Displays the number of all NFS client calls made to write files.

Collector: NFSColl
NFSSBadCall

Displays the percentage of all NFS server calls that failed.

Collector: NFSColl
NFSSCall

Displays the total number of NFS server calls made.

Collector: NFSColl
NFSSCreate

Displays the percentage of all NFS server calls made to create a new file.

Collector: NFSColl
NFSSFsStat

Displays the percentage of all NFS server calls made to retrieve file attributes or statistics.

Collector: NFSColl
NFSSGetAttr

Displays the percentage of all NFS server calls that are requests to get file attributes.

Collector: NFSColl
NFSSLink

Displays the percentage of all NFS server calls made to create hard links.

Collector: NFSColl
NFSSLookUp

Displays the percentage of all NFS server calls made to look up directory paths.

Collector: NFSColl
NFSSMkDir

Displays the percentage of all NFS server calls made to create directories.

Collector: NFSColl
NFSSNull

Displays the percentage of NFS server calls that request no action other than acknowledgment.

Collector: NFSColl
NFSSRead

Displays the percentage of all NFS server calls made to read data from files.

Collector: NFSColl
NFSSReadDir

Displays the percentage of all NFS server calls made to read data directories.

Collector: NFSColl
NFSSReadLink

Displays the percentage of all NFS server calls made to read symbolic links.

Collector: NFSColl
NFSSRemove

Displays the percentage of NFS server calls made to remove files.

Collector: NFSColl
NFSSRename

Displays the percentage of all NFS server calls made to rename files.

Collector: NFSColl
NFSSRmDir

Displays the percentage of all NFS server calls made to remove directories.

Collector: NFSColl
NFSSRpcBadCall

Displays the percentage of all NFS RPC server requests rejected by the server RPC facility before the request could be passed to the kernel NFS service routines.

Collector: NFSColl
NFSSRpcBadLen

Displays the total number of server RPC calls that have an invalid length.

Collector: NFSColl
NFSSRpcCall

Displays the total number of NFS server RPC calls.

Collector: NFSColl
NFSSRpcNullRecv

Displays the number of null RPC calls that the server received.

Collector: NFSColl
NFSSRpcXdrCall

Displays the total number of NFS server RPC calls whose headers could not be XDR-decoded. This network problem occurs mostly on wide area networks (WANs).

Collector: NFSColl
NFSSSetAttr

Displays the percentage of all NFS server calls made to store file attributes.

Collector: NFSColl
NFSSSymLink

Displays the percentage of all NFS server calls made to create symbolic links.

Collector: NFSColl
NFSSWrite

Displays the percentage of all NFS server calls made to write to files.

Collector: NFSColl
PATROLAGENT Application Class
PADeltaBetweenExecSecs

Displays the number of seconds between executions. This value is stored in the RUNQ_DELTA variable.
PAInternalErrors

Displays the number of miscellaneous internal errors.
PAOutstandingJobs

Displays the number of currently executing jobs on the PATROL Agent and the time that they were started.
PATotalErrors

Displays the total number of errors detected by the PATROL Agent.
PAUserErrors

Displays the number of errors that have occured un user-specific commands.
PAWorkRateExecMin

Displays the number of operating system process executions performed per minute by the PATROL Agent.

PATROL_NT Application Class

PAOutstandingJobs

Displays the number of currently executing jobs on the PATROL Agent and the time that they were started.
PATotalErrors

PRINTER Application Class
PRNQLength

Displays the number of print jobs waiting in the print queue of the selected printer.

Collector: PrinterColl
PROCCONT (PROCESS_PRESENCE) Application Class
PROCPPStatus

Displays a text window that lists the status of monitored processes and host groups
groupMonitorDaemon

Collects data that is gathered and analyzed by the PROCPPStatus parameter. The groupMonitorDaemon parameter has no icon.
PROCESS Application Class
PROCAvgUsrProc

Displays the average number of processes per non-root user.

Collector: DCMColl controlled by PROCESSCtrl, USRPROCColl
PROCExec

Displays the number of exec system calls per second.

Collector: SARColl

DCM exceptions: All
PROCNoZombies

Displays the total number of zombie processes currently running.

Collector: DCMColl controlled by PROCESSCtrl, USRPROCColl
PROCNumProcs

Displays the total number of active processes on the system.

Collector: DCMColl controlled by PROCESSCtrl, USRPROCColl
PROCProcWait

Displays the number of processes that are currently waiting for resources.

Collector: DCMColl controlled by PROCESSCtrl, VMColl

DCM exceptions: All

PSL exceptions: AIX (32 bit) and Compaq Tru64 (Digital Unix, OSF/1).
PROCProcWaitInt

Displays the number of processes in an interruptible wait state.

Collector: VMColl
PROCProcWaitUnint

Displays the number of processes in an uninterruptible wait state.

Collector: VMColl

DCM exceptions: All
PROCTopProcs

Displays the processes (up to ten) using the highest percentage of CPU time during the sample period. Machines with multiple CPUs may show more than 100% utilization for a given process.

Collector: DCMColl controlled by PROCESSCtrl, PSColl

PSL exceptions: AIX
PROCUserProcs

Displays the total number of non-root user processes.

Collector: DCMColl controlled by PROCESSCtrl, USRPROCColl
PROCPRES Application Class
PROCPPCPUPerc

Displays the percentage of CPU used by the selected process.

Collector: DCMColl controlled by PROCESSCtrl
PROCPPCount

Displays the number of processes started with the same command-line string as the selected process.

Collector: DCMColl controlled by PROCESSCtrl
PROCPPCountCheck

Indicates whether the process count is within the acceptable range specified by the user.
PROCPPMem

Displays the amount of virtual memory that the process is using.

Collector: DCMColl controlled by PROCESSCtrl
PROCPPOwnerCheck

Displays the results of a verification that a process is owned by an authorized user name. PATROL issues an alert if it discovers that the process is owned by an unauthorized user name.
PROCPPParentPID1

Displays the results of a verification that the parent process ID (PPID) for a designated process is 1. Processes with PPID of 1 are owned by the Unix scheduler, or init.
SCHEDULER Application Class
scheduler

Displays the PATROL Scheduling Report that provides information about items in the schedule queue.
scheduler_daemon

Gathers information that is displayed in the PATROL Scheduling Report and not display an icon.
SMP Application Class
SMPContextSwitch

Displays the number of CPU context switches.

Collector: SMPColl

DCM exceptions: All
SMPCrossCalls

Displays the number of interprocessor cross-calls.

Collector: SMPColl

DCM exceptions: All
SMPIdlePercent

Displays the percentage of time the CPU was idle.

Collector: DCMColl controlled by CPUCtrl
SMPInterrupts

Displays the number of processor interrupts.

Collector: SMPColl

DCM exceptions: All
SMPIntThread

Displays the number of interrupts as threads, excluding clock interrupts.

Collector: SMPColl

DCM exceptions: All
SMPInvContSwitch

Displays the number of processor involuntary context switches.

Collector: SMPColl

DCM exceptions: All
SMPMajorFaults

Displays the number of major faults.

Collector: SMPColl

DCM exceptions: All
SMPMinorFaults

Displays the number of minor faults.

Collector: SMPColl

DCM exceptions: All
SMPRunQLen1Min

Displays the average number of processes in the CPU's run queue during the last minute.

Collector: SMP discovery

DCM exceptions: All
SMPRunQLen5Min

Displays the average number of processes in the CPU's run queue during the last five minutes.

Collector: SMP discovery

DCM exceptions: All
SMPRunQLen15Min

Displays the average number of processes in the CPU's run queue during the last 15 minute.

Collector: SMP discovery

DCM exceptions: All
SMPSpinMutex

Displays the number of spins on mutexes, or locks that were not acquired on the first try.

Collector: SMPColl

DCM exceptions: All
SMPSpinRdWr

Displays the number of reader and writer locks that were not acquired on the first try.

Collector: SMPColl

DCM exceptions: All
SMPSystemCalls

Displays the number of system calls.

Collector: SMPColl

DCM exceptions: All
SMPSystemPrcnt

Displays the amount of processor time spent on system activities.

Collector: DCMColl controlled by CPUCtrl
SMPThMigration

Displays the number of thread migrations to another processor.

Collector: SMPColl

DCM exceptions: All
SMPUserPercent

Displays the amount of processor time spent on user requested activities.

Collector: DCMColl controlled by CPUCtrl
SMPWaitPercent

Displays the percentage of time the processor spent waiting.

Collector: DCMColl controlled by CPUCtrl
SNMPHealth Application Class
SNMPH_diagnostics

Gathers and displays diagnostic information relating to the PATROL SNMP system. In addition to being displayed in the text parameter window, the diagnostic information is also written to the file, SNMPHealth.log in $PATROL_HOME/log.
SNMPH_monitorSubAgent

Monitors the sub-agent's status and if it is running, PATROL sets its value to OK. If the sub-agent is not running, PATROL sets the value to ALARM.
SNMPH_startSubAgent

Uses the output of snmp_agent_config to determine whether the SNMP sub-agent is running. If the sub-agent is not running, PATROL issues the PSL command snmp_agent_start() to start the sub-agent.
SNMPH_testparm

Performs diagnostics on the PATROL SNMP system. Use it to test the automatic SNMP traps that are issued through the event management system when an event is generated. This parameter's test uses Standard Event 11, which is triggered in PATROL when a parameter's value falls within an alarm range. It uses Standard Event 9 when the parameter's value falls within the OK range after having been in the alarm range.
SWAP Application Class
SWPnPageSizeAvail

Displays the number of swap pages available on the swap device. The page size is represented by the n in the parameter name and is measured in KBs, as follows:

SWP32PageSizeAvail
SWP64PageSizeAvail
SWP128PageSizeAvail
SWP256PageSizeAvail
SWP512PageSizeAvail
SWP1024PageSizeAvail
SWP2048PageSizeAvail

Collector: SWAP Discovery
SWPSwapFreeSpace

Displays the size of the available swap space.

Collector: SWAP Discovery

DCM exceptions: All
SWPSwapSize

Displays the size of a particular swap area.

Collector: SWAP Discovery

DCM exceptions: All
SWPSwapUsedPercent

Displays the percentage of swap space used for a particular swap area.

Collector: SWAP Discovery

DCM exceptions: All
SWPTotSwapFreeSpace

Displays the total size of the free swap space; appears under the Summary instance only.

Collector: DCMColl controlled by SWAPCtrl, SWAP Discovery or SARColl
SWPTotSwapSize

Displays the total size of the swap space. On Solaris, this value includes the space used in /tmp.

Collector: DCMColl controlled by SWAPCtrl, SWAP Discovery when in PSL collection mode
SWPTotSwapUsedPercent

Displays the percentage of total system-wide swap space in use.

Collector: DCMColl controlled by SWAPCtrl, SWAP Discovery
USERS Application Class
USRNoSession

Displays the number of active, non-root user sessions currently on this machine.

Collector: DCMColl controlled by USERSCtrl
USRNoUser

Displays the number of unique users that are currently logged on to the system. This parameter deos not show the number of user sessions.

Collector: DCMColl controlled by USERSCtrl, USRPROCColl
















PATROL for Web Data Optimizer 1.2.00


Table 40 PATROL Web Data Optimizer 1.2.00
Parameter



Detail Application Class
Delta_Bytes_Processed

Displays the number of bytes that PATROL WDO processed for Web transactions since the last PATROL collector cycle. This value includes traffic for objects that were compressed, uncompressed, and excluded by the administrator.

Collector: WDO_Collector
Delta_Msgs_Compressed

Reports the number of messages that PATROL WDO compressed since the last PATROL collection cycle.

Collector: WDO_Collector
Delta_Msgs_Processed

Reports the number of messages that PATROL WDO processed from Web transactions in the last PATROL collection cycle.

Collector: WDO_Collector
EligibleTrafficCompressedPct

Reports the percent by which only the eligible objects were compressed. PATROL WDO compresses HTML, Javascript, Java applets, XML, Microsoft Word documents, PowerPoint documents, and Microsoft Excel documents.

PATROL WDO determines the percentage of Eligible Compression by dividing the number of bytes by which the eligible objects were compressed by the total number of bytes for the eligible objects. For example, the eligible objects have 2500 bytes. These objects were reduced by 2000 bytes to 500 bytes. Divide 2000 bytes by 2500 bytes, and the eligible objects were compressed by 80%.

Collector: WDO_Collector
NumCacheRetrievals

Reports the number of times that a compressed object is retrieved from the PATROL WDO cache when caching is enabled.

Collector: WDO_Collector
NumHits

Indicates the number of times that a request for a URL was processed in the last PATROL collection cycle. If a Web page has multiple frames, each frame is counted.

Collector: WDO_Collector
ResponseTimeSavingsPct

Provides the amount of time that was saved by using the PATROL WDO compression since the last collection cycle. This value is calculated by using values that PATROL WDO compiles from individual connections, path speed, and compression time.

Collector: WDO_Collector
Total_Bytes_Processed

Indicates the number of bytes PATROL WDO processed from Web transactions since the last PATROL WDO reset or a system reboot. This value includes transactions that are compressed, uncompressed, and excluded by the administrator.

Collector: WDO_Collector
Total_Msgs_Compressed

Reports the total number of messages that PATROL WDO compressed since the last PATROL WDO reset or server reboot.

Collector: WDO_Collector
Total_Msgs_Processed

Reports the total messages that PATROL WDO processed since the last PATROL WDO reset or server reboot.

Collector: WDO_Collector
TotalTrafficCompressedPct

Reports the percent by which the all of the objects were compressed, ineligible and eligible, since the last PATROL WDO reset or server reboot.

Total Compression is based on the Eligible Compression number.

PATROL WDO determines the percentage of Total Compression by dividing the number of bytes by which the eligible objects were compressed by the total number of bytes for all of the objects; eligible and ineligible. For example the total objects have 7500 bytes. Of that, the eligible objects have 2500 bytes. The eligible objects were reduced by 2000 bytes to 500 bytes. Divide 2000 bytes by 7500 bytes, and the total objects were compressed by 27%.

Collector: WDO_Collector
Exceptions Application Class
Exceptions

Indicates the number of items that were not compressed in the last PATROL collection cycle. Exception reasons are annotated for each data point greater than 0.

Collector: WDO_Collector
ExceptionsReasons

Reports the number of occurrences for each of the Exceptions reasons. When an item is not compressed, PATROL WDO searches the reasons in the following order, and the searching stops when the first match is made. Some of the main reasons have more than one possible description.

Excluded by administrator
Unknown length
Not compressible
Already compressed
File is too small
No browser support
Unsupported attachment
CPU utilization too high
Path speed too high

Collector: WDO_Collector
ExceptionsBytes

Indicates the number of bytes that were not compressed for each Exception reason. Exception reasons are annotated for each data point greater than 0.

Collector: WDO_Collector
Summary Application Class
CacheUtil

Indicates the number of kilobytes (KB) used of the PATROL WDO cache pool. The administrator sets the amount of cache that is available to PATROL WDO.

Collector: WDO_Collector
CPUUtil

Indicates the average CPU usage of the server. If the server is multiprocessor, f the server is a multiprocessor, the usage values of all of the processors are averaged, including usage by all executing tasks in addition to PATROL WDO.

Collector: WDO_Collector
Delta_Bytes_Processed

Displays the number of bytes that were processed by PATROL WDO for Web transactions since the last PATROL collection cycle. This value includes traffic for objects that are compressed, uncompressed, and excluded by the administrator.

Collector: WDO_Collector
Delta_Msgs_Compressed

Reports the number of messages that PATROL WDO compressed since the last PATROL collection cycle.

Collector: WDO_Collector
Delta_Msgs_Processed

Reports the number of messages that PATROL WDO processed from Web transactions for the last PATROL collection cycle.

Collector: WDO_Collector
DetailStats

Lists the statistical information for the entire Web server and for each URL that is processed on that server. This parameter is activated when the Debug feature is turned on, and it becomes inactive when the Debug feature is turned off.

Collector: WDO_Collector
EligibleTrafficCompressedPct

Reports the percent by which only the eligible objects were compressed. PATROL WDO compresses HTML, Javascript, Java applets, XML, Microsoft Word documents, PowerPoint documents, and Microsoft Excel documents.

Collector: WDO_Collector
NumCacheRetrievals

Reports the number of times that a compressed object is retrieved from the PATROL WDO cache when Cache is enabled.

Collector: WDO_Collector
NumServerHits

Reports the number of times that a compressed object is retrieved from the PATROL WDO cache when Cache is enabled.

Collector: WDO_Collector
ResponseTimeSavingsPct

Indicates the amount of time that was saved by using the PATROL WDO compression since the last collection cycle. This value is calculated by using values that PATROL WDO compiles from individual connections, path speed, and compression time.

Collector: WDO_Collector
Total_Bytes_Processed

Indicates the number of bytes that PATROL WDO processed from Web transactions. This value includes transactions that are compressed, uncompressed, and excluded by the administrator since the last PATROL WDO reset or server reboot.

Collector: WDO_Collector
Total_Msgs_Compressed

Reports the total number of messages that PATROL WDO compressed since the last PATROL WDO reset or server reboot.

Collector: WDO_Collector
Total_Msgs_Processed

Reports the total number of messages that PATROL WDO processed since the the last PATROL WDO reset or server reboot.

Collector: WDO_Collector
TotalTrafficCompressedPct

Reports the percent by which the all of the objects were compressed, ineligible and eligible, since the last PATROL WDO reset or server reboot.

Total Compression is based on the Eligible Compression number.

Collector: WDO_Collector
WDOMemoryUsage

Reports the amount of storage that PATROL WDO and its underlying architecture are using. Storage refers to the amount of memory that is used in the privileged or kernel areas of the operating system.

Collector: WDO_Collector
Web Data Optimizer Application Class
WDO_Collector

Collects data for PATROL WDO; creates and populates the instances and parameters of all the WDO application classes.
TrialDaysRemaining

Indicates the number of days remaining in the trial session.

Collector: WDO_Collector
















PATROL for WebSphere Application Server 2.2.00


Table 41 PATROL for WebSphere Application Server 2.2.00
Parameter



PMW_APPSERVER Application Class
AppServerAvailability

Indicates the availability of the application server during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: AppServerCollector (PMW_MAIN)

Collector: AppServerCollector (PMW_WEBSPHERE)
DbUrlsDisc

Collects a list of DBURL names available during runtime within the collection interval. If data is available during setup, the setup routine populates a selection list of DBURLs for monitoring during bytecode instumentation.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
HTTPTransportConnState

Shows the connection status of the HTTP transport connection.

IBM WebSphere version supported: 4.x, 5.x

Collector: ServerTransportCol (PMW_MAIN)

Collector: ServerTransportCol (PMW_WEBSPHERE)
PerfCollector

Serves as the collector for the PATROL for WebSphere category tree. This Collector creates and populates the instances and data performance metric parameters of all the classes under the category tree.

IBM WebSphere version supported: 4.x
For WebSphere 5.x, see PerfCollector2, below.

Collector: NA
PerfCollector2

Serves as the collector for the PATROL for WebSphere category tree. This Collector creates and populates the instances and data performance metric parameters of all the classes under the category tree.

IBM WebSphere version supported: 5.x
For WebSphere 4.x, see PerfCollector, above.

Collector: NA
PjsClassNameDisc

Collects a list of Java class names available during runtime within the collection interval. If data is available during the setup time, setup will populate a selection list of classes for monitoring method profiling.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PjsMethodProfileDisc

Collects a list of method names available within a Java class during runtime within the collection interval. If data is available during the setup time, setup will populate a selection list of methods for monitoring during method profiling.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PjsServletMethodDisc

Collects a list of servlet methods and populates the selection lists for method profiling.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PmiLevel

Shows the current setting of the PMI level. The PMI level determines whether data is collected for different sets of parameters.

IBM WebSphere version supported: 5.x

Collector: PerfCollector2
PMW_BEANS Application Class
ActiveMethods

Displays the number of concurrent method invocations of the bean that took place during the collection interval, averaged across all methods of the bean.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
AvgDrainSize

Displays the number of objects returned to the object pool when the object pool was drained, averaged across the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanActivates

Displays the number of times that an instance of the bean was activated during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanActivatesPerSec

Displays the number of times per second that an instance of the bean was activated during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanActivateTime

Displays the average time a beanActivate call takes, including the time at the database (if any).

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanCreates

Displays the number of instances of the bean that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanCreatesPerSec

Displays the number of instances of the bean that were created per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanCreateTime

Displays the average elapsed time required to execute the bean's create method during the collection interval, including load time (if any).

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanDestroys

Displays the number of instances of the bean that were destroyed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanDestroysPerSec

Displays the number of instances of the bean that were destroyed per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanInstantiates

Displays the number of times that beans were instantiated during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanInstantiatesPerSec

Displays the number of times that beans were instantiated per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanLoads

Displays the number of times during the collection interval that bean data was loaded from persistent storage

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanLoadsPerSec

Displays the number of times during the collection interval that bean data was loaded per second from persistent storage

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanMethodCalls

Displays the number of times during the collection interval that methods were invoked.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanMethodCallsPerSec

Displays the rate at which methods were invoked during the collection interval.

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanMethodLoads

Displays the average number of method invocations that were processed concurrently over all methods during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
BeanMethodRT

Displays the elapsed time required to execute a method during the collection interval, averaged across all remote methods of the bean.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
BeanPassivates

Displays the number of times during the collection interval that instances of the bean were passivated.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanPassivatesPerSec

Displays the number of times per second during the collection interval that instances of the bean were passivated.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanPassivateTime

Displays the average time a beanPassivate call takes, including the time at the database (if any).

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanPoolSize

Displays the average number of available connections in the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanRemoves

Displays the number of times during the collection interval that the bean's remove method was called.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanRemovesPerSec

Displays the number of times per second during the collection interval that the bean's remove method was called.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanRemoveTime

Displays the average elapsed time required to execute the bean's remove method during the collection interval (including database access time if any).

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeansActive

Displays the average number of times bean instances are in the ready state.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeansLive

Displays the average number of times bean objects exist in runtime.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanStores

Displays the number of times during the collection interval that bean data was moved to persistent storage.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanStoresPerSec

Displays the number of times per second during the collection interval that bean data was moved to persistent storage.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
DrainsFromPool

Displays the number of times during the collection interval that WebSphere found the connection pool was idle and attempted to drain unneeded connections.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
DrainsFromPoolPerSec

Displays the number of times per second during the collection interval that WebSphere found the connection pool was idle and attempted to drain unneeded connections.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
EntityBeansActive

Displays the average number of entity beans that were active (in use) during the collection interval.

IBM WebSphere version supported: 3.5x

Collector: PerfCollector or PerfCollector2
EntityBeansLive

Displays the average number of entity beans that were live (active or available for activation) during the collection interval.

IBM WebSphere version supported: 3.5x

Collector: PerfCollector or PerfCollector2
GetsFound

Displays the number of get requests processed during the collection interval that found the requested object in the object pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GetsFoundPerSec

Displays the number of get requests processed per second during the collection interval that found the requested object in the object pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GetsFromPool

Displays the number of get requests for objects in the object pool that were processed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GetsFromPoolPerSec

Displays the number of get requests per second for objects in the object pool that were processed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsBackedOut

Displays the number of messages that failed to be delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsBackedOutPerSec

Displays the average number of messages per second that failed to be delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsDelivered

Displays the number of messages that were delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsDeliveredPerSec

Displays the average number of messages per second that were delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsDiscarded

Displays the number of times during the collection interval that objects that had been returned to the object pool were discarded from the object pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsDiscardedPerSec

Displays the number of times per second during the collection interval that objects that had been returned to the object pool were discarded from the object pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsToPool

Displays the number of objects that were returned to the object pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsToPoolPerSec

Displays the number of objects that were returned to the object pool per second during the collection interval.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
StatefulBeansActive

Displays the average number of stateful bean instances that were in the ready state during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector or PerfCollector2
StatefulBeansLive

Displays the average number of stateful bean instances that were live (active or available for activation) during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatelessBeansLive

Displays the average number of stateless bean instances that were live (active or available for activation) during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
SvrSessionUtilization

Displays the percentage of server session pool in use.

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
SvrSessionUtilization

Displays the average time to obtain ServerSession from the pool (message driven pool).

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
PMW_BLACKOUT Application Class
PMW_BlackoutCollector

Determines whether a blackout period is due to begin or expire by schedule. Also determines whether a command has been issued to suspend or resume monitoring on one or more application servers. Generates the events needed to implement the blackout schedule or to execute the suspend or resume command.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PMW_CACHE_SUMMARY Application Class
ClientRequests

Displays the number of requests for this cacheable object generated by applications running on the application server.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ClientRequestsPerSec

Displays the number of requests per second for this cacheable object.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
CurrentEntries

Displays the current number of cache entries created from this template. Refers to the per-template equivalent of totalCacheSize.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
CurrentEntriesInMemory

Displays the number of cache entries currently in memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvDisk

Displays the number of explicit invalidations resulting in an entry being removed from disk.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvDiskPerSec

Displays the number of explicit invalidations per second resulting in an entry being removed from disk.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvLocal

Displays the number of explicit invalidations generated locally, either programmatically or by a cache policy.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvLocalPerSec

Displays the number of explicit invalidations per second, generated locally, either programmatically or by a cache policy.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvMemory

Displays the number of explicit invalidations resulting in an entry being removed from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvMemoryPerSec

Displays the number of explicit invalidations per second resulting in an entry being removed from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvNoEntry

Displays the number of explicit invalidations received for this template where no corresponding entry exists.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvNoEntryPerSec

Displays the number of explicit invalidations received per second for this template where no corresponding entry exists.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvRemote

Displays the number of explicit invalidations received from a cooperating JVM in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvRemotePerSec

Displays the number of explicit invalidations received per second from a cooperating JVM in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvalidations

Displays the total number of explicit invalidations issued for this template.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvalidationsPerSec

Displays the total number of explicit invalidations per second issued for this template.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistInMemory

Displays the number of requests for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistInMemoryPerSec

Displays the number of requests per second for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistOnDisk

Displays the number of requests for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistOnDiskPerSec

Displays the number of requests per second for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
JVMRequests

Displays the number of requests for this cacheable object generated by cooperating caches in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
JVMRequestsPerSec

Displays the number of requests per second for this cacheable object generated by cooperating caches in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LruInvalidations

Displays the number of cache entries evicted from memory by a Least Recently Used (LRU) algorithm. These entries are passivated to disk if disk overflow is enabled.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LruInvalidationsPerSec

Displays the number of cache entries evicted from memory per second by a Least Recently Used (LRU) algorithm. These entries are passivated to disk if disk overflow is enabled.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MaxEntriesInMemory

Displays the maximum number of in-memory cache objects.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
Misses

Displays the number of requests for this caheable object that were not found in the cache.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MissesPerSec

Displays the number of requests per second for this caheable object that were not found in the cache.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
RemoteCreations

Displays the number of entries received from cooperating dynamic caches.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
RemoteCreationsPerSec

Displays the number of entries received per second from cooperating dynamic caches.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TemplateTimeouts

Displays the aggregate of template timeouts and disk timeouts.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TemplateTimeoutsPerSec

Displays the aggregate of template timeouts per second and disk timeouts per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TimeoutInvalidations

Displays the number of cache entries evicted from memory and/or disk because their timeout expired.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TimeoutInvalidationsPerSec

Displays the number of cache entries evicted per second from memory and/or disk because their timeout expired.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_CACHE_TEMPLATE Application Class
ClientRequests

Displays the number of requests for this cacheable object generated by applications running on the application server.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ClientRequestsPerSec

Displays the number of requests per second for this cacheable object.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
CurrentEntries

Displays the current number of cache entries created from this template. Refers to the per-template equivalent of totalCacheSize.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
CurrentEntriesInMemory

Displays the number of cache entries currently in memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvDisk

Displays the number of explicit invalidations resulting in an entry being removed from disk.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvDiskPerSec

Displays the number of explicit invalidations per second resulting in an entry being removed from disk.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvLocal

Displays the number of explicit invalidations generated locally, either programmatically or by a cache policy.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvLocalPerSec

Displays the number of explicit invalidations per second, generated locally, either programmatically or by a cache policy.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvMemory

Displays the number of explicit invalidations resulting in an entry being removed from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvMemoryPerSec

Displays the number of explicit invalidations per second resulting in an entry being removed from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvNoEntry

Displays the number of explicit invalidations received for this template where no corresponding entry exists.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvNoEntryPerSec

Displays the number of explicit invalidations received per second for this template where no corresponding entry exists.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvRemote

Displays the number of explicit invalidations received from a cooperating JVM in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvRemotePerSec

Displays the number of explicit invalidations received per second from a cooperating JVM in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvalidations

Displays the total number of explicit invalidations issued for this template.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExplicitInvalidationsPerSec

Displays the total number of explicit invalidations per second issued for this template.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistInMemory

Displays the number of requests for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistInMemoryPerSec

Displays the number of requests per second for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistOnDisk

Displays the number of requests for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
HistOnDiskPerSec

Displays the number of requests per second for this cacheable object served from memory.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
JVMRequests

Displays the number of requests for this cacheable object generated by cooperating caches in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
JVMRequestsPerSec

Displays the number of requests per second for this cacheable object generated by cooperating caches in this cluster.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LruInvalidations

Displays the number of cache entries evicted from memory by a Least Recently Used (LRU) algorithm. These entries are passivated to disk if disk overflow is enabled.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LruInvalidationsPerSec

Displays the number of cache entries evicted from memory per second by a Least Recently Used (LRU) algorithm. These entries are passivated to disk if disk overflow is enabled.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MaxEntriesInMemory

Displays the maximum number of in-memory cache objects.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
Misses

Displays the number of requests for this caheable object that were not found in the cache.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MissesPerSec

Displays the number of requests per second for this caheable object that were not found in the cache.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
RemoteCreations

Displays the number of entries received from cooperating dynamic caches.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
RemoteCreationsPerSec

Displays the number of entries received per second from cooperating dynamic caches.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TemplateTimeouts

Displays the aggregate of template timeouts and disk timeouts.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TemplateTimeoutsPerSec

Displays the aggregate of template timeouts per second and disk timeouts per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TimeoutInvalidations

Displays the number of cache entries evicted from memory and/or disk because their timeout expired.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TimeoutInvalidationsPerSec

Displays the number of cache entries evicted per second from memory and/or disk because their timeout expired.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_CELL Application Class
DMgrAvailability

Shows the availability (up or down) of the Deployment Manager.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
PMW_CLUSTER Application Class
AvailableServers

Displays the number of servers availbale in the cluster.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
PMW_DATASOURCE Application Class
AvgJDBCTime

Displays the amount of time (in milliseconds) spent executing the JDBC driver. (This includes tme spent in JDBC driver, network, and database.)

IBM WebSphere version supported: 5.0

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgTimeHeld

Displays the average length of time during the collection interval that a connection was active.

IBM WebSphere version supported: 5.0

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgWaitTime

Displays the average length of time during the collection interval that a thread had to wait for an available connection from the connection pool.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ConcurrentWaiters

Displays the average number of threads waiting for an available connection from the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ConnectionAllocates

Displays the number of connections that were allocated from the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionAllocatesPerSec

Displays the number of connections per second that were allocated from the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionCreates

Displays the number of connections that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionCreatesPerSec

Displays the number of connections per second that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionDestroys

Displays the number of connections that were destroyed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionDestroysPerSec

Displays the number of connections that were destroyed per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionFaults

Displays the number of times during the collection interval that a thread timed out while waiting for an available connection from the connection pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionFaultsPerSec

Displays the number of times per second during the collection interval that a thread timed out while waiting for an available connection from the connection pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionReturns

Displays the number of connections that were deactivated and made available for re-use during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionReturnsPerSec

Displays the number of connections that were deactivated per second and made available for re-use during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsInUse

Displays the number of connections in use.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
DataSource_Col

Launches a Java class file that retrieves required data source and JDBC driver information from the admin repository. This is a background process only and does not set values for any consumer parameters.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
DbFreePoolSize

Displays the average free pool size.

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
DbPercentMaxed

Displays the percentage of time during the collection interval that all possible connections in the connection pool were active.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
DbPoolSize

Displays the average number of available connections in the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
JDBCConnectState

Indicates the availability of the data source JDBC connection during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: standard parameterself collecting
ManagedConnectionsInUse

Displays the number of ManagedConnections objects in use.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PercentUsed

Displays the average percentage of the connection pool that was active during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
PrepStmtCacheDiscarded

Displays the number of prepared SQL statements that were discarded from the cache during the collection interval because the cache was full.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PrepStmtCacheDiscardedPerSec

Displays the number of prepared SQL statements that were discarded per second from the cache during the collection interval because the cache was full.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TimoutWaiters

Displays the number of times during the collection interval that a thread timed out while waiting for an available connection from the connection pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
PMW_DBPOOLS_SUMMARY Application Class
AvgJDBCTime

Displays the amount of time (in milliseconds) spent executing the JDBC driver. (This includes tme spent in JDBC driver, network, and database.)

IBM WebSphere version supported: 5.0

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgTimeHeld

Displays the average length of time during the collection interval that a connection was active.

IBM WebSphere version supported: 3.5

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgWaitTime

Displays the average length of time during the collection interval that a thread had to wait for an available connection from the connection pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ConcurrentWaiters

Displays the average number of threads waiting for an available connection from the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ConnectionAllocates

Displays the number of connections that were allocated from the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionAllocatesPerSec

Displays the number of connections per second that were allocated from the connection pool during the collection interval.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionCreates

Displays the number of connections that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionCreatesPerSec

Displays the number of connections per second that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionDestroys

Displays the number of connections that were destroyed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionDestroysPerSec

Displays the number of connections that were destroyed per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionFaults

Displays the number of times during the collection interval that a thread timed out while waiting for an available connection from the connection pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionFaultsPerSec

Displays the number of times per second during the collection interval that a thread timed out while waiting for an available connection from the connection pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionReturns

Displays the number of connections that were deactivated and made available for re-use during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionReturnsPerSec

Displays the number of connections that were deactivated per second and made available for re-use during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsInUse

Displays the number of connections in use.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
DbFreePoolSize

Displays the average free pool size.

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
DbPercentMaxed

Displays the percentage of time during the collection interval that all possible connections in the connection pool were active.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
DbPoolSize

Displays the average number of available connections in the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ManagedConnectionsInUse

Displays the number of ManagedConnections objects in use.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PercentUsed

Displays the average percentage of the connection pool that was active during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
PrepStmtCacheDiscarded

Displays the number of prepared SQL statements that were discarded from the cache during the collection interval because the cache was full.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PrepStmtCacheDiscardedPerSec

Displays the number of prepared SQL statements that were discarded per second from the cache during the collection interval because the cache was full.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TimoutWaiters

Displays the number of times during the collection interval that a thread timed out while waiting for an available connection from the connection pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
PMW_DBURL Application Class
AggregatedInvocationRate

Displays the rate at which SQL statements were invoked over all SQL statements generated from the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
AvgResponseTime

Displays the average response time for all SQL statement invocations over all SQL statements generated from the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
DbUrlCollector

Invokes four byte code instrumentation collectors that discover upto the top 30 SQL statements and collect information required for the SQL Performance Report by Database URL menu command.

IBM WebSphere version supported: 4.x, 5.x

Collector: SvrDbUrlCollector
HighestInvocationRate

Displays the highest rate of invocations of any SQL statement generated from the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
HighestInvocations

Displays the highest number of invocations of any SQL statement generated from the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
MostCumulativeTime

Displays the highest amount of cumulative time (in milliseconds) that it took to respond to all invocations of an SQL statement generated from the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
SlowestRespTime

Displays the slowest response time (in milliseconds) for a single invocation of an SQL statement generated from the database URL during the collection cycle

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
TotalCumulativeTime

Displays the total cumulative response time (in milliseconds) for all invocations to all SQL statements generated from the database URL in the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
TotalInvocations

Displays the total number of invocations to all SQL statements generated from the database URL in the database URL during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: DbUrlCollector
PMW_DBURLS Application Class
SvrDbUrlCollector

Invokes four byte code instrumentation collectors that discover all database URLs and collect information required for the SQL Performance Report by Application Server menu command.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PMW_EJB_METHOD Application Class
MethodCalls

Displays the number of times during the collection interval that the method was invoked.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
MethodCallsPerSec

Displays the rate at which the method was invoked during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
MethodConcurrentCalls

Displays the number of concurrent invocations to call a method.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
MethodRT

Displays the elapsed time required to execute the method during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
PMW_EJB_SUMMARY Application Class
ActiveMethods

Displays the number of concurrent method invocations of the bean that took place during the collection interval, averaged across all methods of summarized beans.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
AvgDrainSize

Displays the number of objects returned to the object pool when the object pool was drained, averaged across the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanActivates

Displays the number of times that an instance of the bean was activated during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanActivatesPerSec

Displays the number of times that an instance of the bean was activated per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanActivateTime

Displays the average time (in milliseconds) a beanActivate call takes, including the time at the database, if any.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanCreates

Displays the number of instances of the bean that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanCreatesPerSec

Displays the number of instances of the bean that were created per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanCreateTime

Displays the average elapsed time required to execute the bean's create method during the collection interval, including load time (if any).

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanDestroys

Displays the number of instances of the bean that were destroyed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanDestroysPerSec

Displays the number of instances of the bean that were destroyed per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanInstantiates

Displays the number of times that beans were instantiated during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanInstantiatesPerSec

Displays the number of times that beans were instantiated per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanLoads

Displays the number of times during the collection interval that bean data was loaded from persistent storage.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanLoadsPerSec

Displays the number of times during the collection interval that bean data was loaded per second from persistent storage.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanMethodCalls

Displays the number of times during the collection interval that methods were invoked.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
BeanMethodCallsPerSec

Displays the rate at which methods were invoked during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
BeanMethodLoads

Displays the average number of bean method invocations that were processed concurrently over all methods during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
BeanMethodRT

Displays the average elapsed time during the collection interval required to execute the method, including load time (if any).

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanPassivates

Displays the number of times during the collection interval that instances of the bean were passivated.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanPassivatesPerSec

Displays the number of times per second during the collection interval that instances of the bean were passivated.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanPassivateTime

Displays the number of average time (in millisecodns) a beanPassivate call takes , including the time at the database, if any.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeanPoolSize

Displays the average number of available connections in the connection pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanRemoves

Displays the number of times during the collection interval that the bean's remove method was called.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanRemovesPerSec

Displays the number of times per second during the collection interval that the bean's remove method was called.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanRemoveTime

Displays the average elapsed time required to execute the bean's remove method during the collection interval (including database access time if any).

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
BeansActive

Displays the average number of ready.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeansLive

Displays the number of concurrently live beans.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
BeanStores

Displays the number of times during the collection interval that bean data was moved to persistent storage.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeanStoresPerSec

Displays the number of times per second during the collection interval that bean data was moved to persistent storage.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
DrainsFromPool

Displays the number of times during the collection interval that WebSphere found the connection pool was idle and attempted to drain unneeded connections.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
DrainsFromPoolPerSec

Displays the number of times per second during the collection interval that WebSphere found the connection pool was idle and attempted to drain unneeded connections.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
EntityBeanActivates

Displays the number of times that an instance of an entity bean was activated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanCreates

Displays the number of times that a create method was invoked during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanDestroys

Displays the number of times that a destroy method was invoked during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanInstantiates

Displays the number of instances of an entity bean that were instantiated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanLoads

Displays the number of times during the collection interval that entity bean data was loaded from persistent storage.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanMethodLoads

Displays the average number of entity bean method invocations that were processed concurrently over all methods during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanPassivates

Displays the number of times that instances of the entity bean were passivated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanRemoves

Displays the number of times that the entity bean's remove method was called during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeansActive

Displays the average number of entity beans that were active (in use) during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeansLive

Displays the average number of entity beans that were live (active or available for activation) during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
EntityBeanStores

Displays the number of times during the collection interval that entity bean data was moved to persistent storage.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
GetsFound

Displays the number of get requests processed during the collection interval that found the requested object in the object pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GetsFoundPerSec

Displays the number of get requests processed per second during the collection interval that found the requested object in the object pool.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector or PerfCollector2
GetsFromPool

Displays the number of get requests for objects in the object pool that were processed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GetsFromPoolPerSec

Displays the number of get requests per second for objects in the object pool that were processed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsBackedOut

Displays the number of messages that failed to be delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsBackedOutPerSec

Displays the number of messages per second that failed to be delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsDelivered

Displays the number of messages delivered to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MsgsDeliveredPerSec

Displays the number of messages delivered per second to the bean onMessage method (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsDiscarded

Displays the number of times during the collection interval that objects that had been returned to the object pool were discarded from the object pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsDiscardedPerSec

Displays the number of times per second during the collection interval that objects that had been returned to the object pool were discarded from the object pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsToPool

Displays the number of objects that were returned to the object pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ReturnsToPoolPerSec

Displays the number of objects that were returned per second to the object pool during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
StatefulBeanActivates

Displays the number of times that an instance of a stateful bean was activated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector or PerfCollector2
StatefulBeanCreates

Displays the number of times that a create method was invoked during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector or PerfCollector2
StatefulBeanDestroys

Displays the number of instances of the stateful bean that were destroyed during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector or PerfCollector2
StatefulBeanInstantiates

Displays the number of times that an instance of a stateful bean was instantiated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector or PerfCollector2
StatefulBeanMethodLoads

Displays the average number of entity bean method invocations that were processed concurrently over all methods during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatefulBeanPassivates

Displays the number of times that an instance of a stateful bean was passivated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatefulBeanRemoves

Displays the number of times that an instance of a stateful bean was removed during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatefulBeansActive

Displays the average number of stateful bean instances that were in the ready state during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatefulBeansLive

Displays the average number of stateful bean instances that were live (active or available for activation) during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatelessBeanDestroys

Displays the number of instances of the stateless bean that were destroyed during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatelessBeanInstantiates

Displays the number of times that an instance of a stateless bean was instantiated during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatelessBeanMethodLoads

Displays the average number of entity bean method invocations that were processed concurrently over all methods during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
StatelessBeansLive

Displays the average number of stateless bean instances that were live (active or available for activation) during the collection interval.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
SvrSessionUtilization

Displays the percentage of server session pool in use (message driven).

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
SvrSessionWait

Displays the average time to obtain a ServerSession from the pool (message driven bean).

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
PMW_EJB_TRANSACTION Application Class
ActiveGlobalTrans

Displays the average number of concurrent active global transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ActiveLocalTrans

Displays the average concurrent active local transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ActiveTrans

Displays the average number of concurrently active transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
BeansPerTrans

Displays the average number of bean objects per transaction.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
GlobalBeforeCompletionDuration

Displays the average duration for before-completion for global transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
GlobalCommitDuration

Displays the average duration for commit for global transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
GlobalPrepareDuration

Displays the average duration for commit for global transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
GlobalTransBegun

Displays the number of global transactions that were started during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransBegunPerSec

Displays the number of global transactions that were started per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransCommitted

Displays the number of global transactions that were committed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransCommittedPerSec

Displays the number of global transactions that were committed per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransDuration

Displays the average duration of global transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
GlobalTransInvolved

Displays the total number of global transactions begun and imported.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransInvolvedPerSec

Displays the total number of global transactions begun and imported per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransRolledBack

Displays the total number of global transactions rolled back.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransRolledBackPerSec

Displays the total number of global transactions rolled back per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransTimeout

Displays total number of global transactions that timed out.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GlobalTransTimeoutPerSec

Displays total number of global transactions that timed out per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalBeforeCompletionDuration

Displays the average duration for before-completion for local transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
LocalCommitDuration

Displays the average duration for commit for local transactions.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
LocalTransBegun

Displays the number of local transactions that were started during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransBegunPerSec

Displays the number of local transactions that were started during the collection interval per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransCommitted

Displays the number of local transactions that were committed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransCommittedPerSec

Displays the number of local transactions that were committed during the collection interval per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransDuration

Displays the average duration of local transactions during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
LocalTransRolledBack

Displays the total number of local transactions rolled back during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransRolledBackPerSec

Displays the total number of local transactions rolled back per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransTimeout

Displays the number of local transactions timed out during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LocalTransTimeoutPerSec

Displays the number of local transactions timed out per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MethodsPerTrans

Displays the average number of method calls per transaction during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
Optimizations

Displays the number of global transactions converted to single phase for optimization.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
OptimizationsPerSec

Displays the number of global transactions converted to single phase for optimization per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
Transactions

Displays the number of transactions that were processed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
TransCommited

Displays the number of transactions that were committed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
TransDuration

Displays the average duration of a transaction.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
TransRolledBack

Displays the number of transactions that were rolled back during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_ENVIRONMENT Application Class
Messages

Displays environment discovery messages.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
PMW_J2C_FACTORY Application Class
AvgHeldTime

Displays the average time in milliseconds that connections are in use.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgWaitTime

Displays the average waiting time in milliseconds until a connetion is granted.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ConnectionFaults

Displays the number of faults, such as timeouts, in the connection pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionFaultsPerSec

Displays the number of faults per second, such as timeouts, in the connection pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsAllocated

Displays the total number of connections allocated.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsAllocatedPerSec

Displays the number of connections allocated per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsCreated

Displays the total number of connections created.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsCreatedPerSec

Displays the total number of connections created per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsDestroyed

Displays the total number of connections destroyed.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionDestroysPerSec

Displays the total number of connections destroyed per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsFreed

Displays the total number of connections freed.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsFreedPerSec

Displays the total number of connections freed per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsInUse

Displays the total number of connection objects in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionWaiters

Displays the average number of threads concurrently waiting for a connection.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
FreeConnections

Displays the number of free connections in the pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ManagedConnectionsInUse

Displays the number of managed connection objects in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PercentMaxed

Displays the average percentage of the time that all connections are in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PercentUsed

Displays the average percentage of the pool that is currently in use.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PoolSize

Displays the total number of connections in the pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_J2C_SUMMARY Application Class
AvgHeldTime

Displays the average time in milliseconds that connections are in use.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgWaitTime

Displays the average waiting time in milliseconds until a connetion is granted.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ConnectionFaults

Displays the number of faults, such as timeouts, in the connection pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionFaultsPerSec

Displays the number of faults per second, such as timeouts, in the connection pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsAllocated

Displays the total number of connections allocated.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsAllocatedPerSec

Displays the number of connections allocated per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsCreated

Displays the total number of connections created.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsCreatedPerSec

Displays the total number of connections created per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsDestroyed

Displays the total number of connections destroyed.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionDestroysPerSec

Displays the total number of connections destroyed per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsFreed

Displays the total number of connections freed.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsFreedPerSec

Displays the total number of connections freed per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionsInUse

Displays the total number of connection objects in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ConnectionWaiters

Displays the average number of threads concurrently waiting for a connection.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
FreeConnections

Displays the number of free connections in the pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ManagedConnectionsInUse

Displays the number of managed connection objects in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PercentMaxed

Displays the average percentage of the time that all connections are in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PercentUsed

Displays the average percentage of the pool that is currently in use.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PoolSize

Displays the total number of connections in the pool.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_LOG Application Class
LogFileSize

Displays the size (in KB) of the log file at the most recent collection interval

IBM WebSphere version supported: 4.x, 5.x

Collector: LogSizeCollector
LogGrowthSize

Displays the number of KB by which the log file grew during the collection interval

IBM WebSphere version supported: 4.x, 5.x

Collector: LogSizeCollector
LogMessages

Displays the number of log messages that matched patterns being scanned for by the log monitor during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: LogMonitorCollector
LogMonitorCollector

Periodically scans the log looking for matching patterns.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
LogMonitorStatus

Indicates the results of log monitoring during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: LogMonitorCollector
LogSizeCollector

Periodically records the log files size and calculates its growth rate.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PMW_MAIN Application Class
AppServerCollector

Collects information about the application server and administration server.

IBM WebSphere version supported: 5.x

Collector: NA
MessageCollector

Collects information about JRAS messages.

IBM WebSphere version supported: 5.x

Collector: NA
PostProcess

Handles a number of internal processes

This parameter displays no user information and should not be modified in any way.

IBM WebSphere version supported: 5.x

Collector: NA
ServerTransportCol

Determines the state of the HTTP transport connection.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PMW_NODE Application Class
NodeAgentAvailability

Displays whether the node agent is available

IBM WebSphere version supported: 5.x

Collector: NA
PMW_ORB_INTERCEPTOR Application Class
ORBInterceptTime

Displays the time (in milliseconds) it takes a registered portable interceptor to run.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ORBRequests

Displays the total number of requests sent to the ORB.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ORBRequestsActive

Displays the number of requests that are concurrently processed by the ORB.

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ORBRequestsPerSec

Displays the total number of requests sent to the ORB per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ObjectLookupTime

Displays the time (in milliseconds) to look up an object reference before method dispatch can be carried out.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
PMW_ORB_SUMMARY Application Class
ORBInterceptTime

Displays the time (in milliseconds) it takes a registered portable interceptor to run.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ORBRequests

Displays the total number of requests sent to the ORB.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ORBRequestsActive

Displays the number of requests that are concurrently processed by the ORB.

IBM WebSphere version supported: 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ORBRequestsPerSec

Displays the total number of requests sent to the ORB per second.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ObjectLookupTime

Displays the time (in milliseconds) to look up an object reference before method dispatch can be carried out.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
PMW_PROF_CLASS Application Class
PjsClassMethodDiscCol

Invokes a collector for a given Java class selected for profiling.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PMW_PROF_METHOD Application Class
MethodCalls

Displays the number of methods invoked in the specified Java class during the collection cycle.

IBM WebSphere version supported: 4.x

Collector: PjsClassMethodDiscCol
MethodCallsPerSec

Displays the number of methods invoked per second in the specified Java class during the collection cycle.

IBM WebSphere version supported: 4.x

Collector: PjsClassMethodDiscCol
MethodCpu

Displays the CPU consumption of methods invoked in the profiled Java class during the collection cycle.

IBM WebSphere version supported: 4.x

Collector: PjsClassMethodDiscCol
MethodRT

Displays the average response time in milliseconds that it took for methods to execute in the profiled Java class during the collection cycle.

IBM WebSphere version supported: 4.x

Collector: PjsClassMethodDiscCol
PMW_RAS_MESSAGES Application Class
AuditMsgCount

Displays number of audit messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
AuditMsgCount

Displays the number of audit messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
ErrorMsgCount

Displays the number of error messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
FatalMsgCount

Displays the number of fatal messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
InfoMsgCount

Displays the number of informational messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
ServiceMsgCount

Displays the number of service messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
WarningMsgCount

Displays the number of warning messages logged.

IBM WebSphere version supported: 5.x

Collector: PerfCollector
PMW_SERVER_RESOURCES Application Class
ActiveThreads

Displays the average number of active threads in the pool.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
AllocatedHeaps

Displays the total amount of heap storage (both used and unused) allocated for objects at the end of the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
CpuUtilization

Displays the amount of CPU time (in seconds) consumed by the JVM during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
FreeMemory

Displays the amount of free JVM memory at the end of the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
GarbageCollectionDuration

Displays the average amount of time (in seconds) spent to complete each garbage collection during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: JVMCollector
(Requires JVM profiling to be active)
GarbageCollectionInterval

Displays the number of seconds between garbage collection calls over the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
GarbageCollectionObjectsInUsed

Displays the number of used objects in the heap during the most recent garbage collection.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
GarbageCollections

Displays the total number of garbage collections during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: JVMCollector
(Requires JVM profiling to be active)
GarbageCollectionsPerSec

Displays the total number of garbage collections per second during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: JVMCollector
(Requires JVM profiling to be active)
HeapsInUse

Displays the amount of heap storage allocated for objects that running JVM threads were still using at the end of the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
HighestCpuThread

Displays the highest amount of CPU time (in seconds) used by a one JVM thread during the collection cycle. This might indicate that the thread was stuck.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
JVMCollector

Collects information to populate all Server Resource consumer parameters displaying profiler generated information

Collector: JVMCollector
LockWaits

Displays the number of times that a thread waited for a lock during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
LockWaitsPerSec

Displays the number of times per second that a thread waited for a lock during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
LockWaitTime

Displays the average time that a thread waited for a lock during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsAllocated

Displays the number of objects that were allocated during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsAllocatedPerSec

Displays the number of objects that were allocated per second during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsFreed

Displays the number of objects that were discontinued and whose resources were reclaimed during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsFreedPerSec

Displays the number of objects that were discontinued per second and whose resources were reclaimed during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsInUse

Displays the number of objects that are currently being used.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsMoved

Displays the number of objects that were moved within the heap during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
ObjectsMovedPerSec

Displays the number of objects that were moved per second within the heap during the previous polling cycle.

IBM WebSphere version supported: 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
PeakNTRealMemory

Displays the peak amount of real memory allocated by the JVM during the collection cycle (NT only).

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
PeakNTVirtualMemory

Displays the peak amount of virtual memory allocated by the JVM during the collection cycle (NT only).

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
PercentMemoryUsed

Displays the percentage of maximum heap space for an application server that is currently in use.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
RealMemory

Displays the total amount of real memory allocated by the JVM during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
ThreadCreates

Displays the number of threads that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ThreadCreatesPerSec

Displays the number of threads that were created per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ThreadDestroys

Displays the number of threads that were destroyed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ThreadDestroysPerSec

Displays the number of threads that were destroyed per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ThreadMaxSize

Displays the maximum configured size of the thread pool.

IBM WebSphere version supported: 3.5

Collector: PerfCollector
ThreadPercentMaxed

Displays the average percent of time during the collection cycle that threads reached the maximum limit.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ThreadPoolSize

Displays the average number of threads in the pool.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
Threads

Displays the number of threads in the JVM.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
ThreadsObjects

Displays the number of objects in use by JVM threads that were still running at the end of the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: JVMCollector
(Requires JVM profiling to be active)
TotalMemory

Displays the total amount of JVM memory.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
UpTime

Displays the amount of time that the JVM has been running.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
UsedMemory

Displays the amount of JVM memory that has been used.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_SERVLET Application Class
ServletConcurrentRequests

Displays the number of requests that were processed by the servlet during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ServletErrors

Displays the number of servlet requests that encountered errors or exceptions during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletErrorsPerSec

Displays the number of servlet requests per second that encountered errors or exceptions during the collection interval.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector2
ServletLoadedSince

Displays the time that has elapsed (in milliseconds) since the servlet was loaded.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ServletLoads

Displays the number of servlets that were loaded.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletReloads

Displays the number of servlets that were reloaded.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletReloadsPerSec

Displays the number of servlets that were reloaded per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletRequestPerSec

Displays the rate at which servlet requests were processed during the collection interval.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector2
ServletResponseTime

Displays the average elapsed time required to complete a servlet request during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ServletTotalRequests

Displays the number of requests that were processed by the servlet during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_SERVLET_ENGINE Application Class
ServerServletCollector

Collects data required to generate the Servlet Performance Report, showing statistics of upto the 30 worst performing servlets.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
WebAppCollector

Collects data required to generate the WebApp Performance Report, showing statistics of upto the 30 worst performing Web applications.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
PMW_SERVLET_GROUP Application Class
AvgRespTime

Displays the average response time over all servlets and JSPs in the Web application during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
HighCummulativeTime

Displays the run time of the servlet or JSP with the most accumulated run time during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
HighUsed

Displays invocation count of the servlet or JSP that was invoked the greatest number of times during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
HighUsedRate

Displays the rate at which the most used servlet or JSP was invoked.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
InvocationRate

Displays the average invocation rate over all servlets and JSPs in the Web application during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
PjsServletClassCol

Collects data to generate the performance report of servlets within the Web application and to populated the PMW_SERVLET_METHOD parameters.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
PjsWebAppTopNCol

Collects data to generate top web application data.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
SelectedAliasesActive

Displays the number of virtual hosts selected through the PMW_SERVLET_GROUP/Ping Virtual Host menu command that returned a successful ping during the most recent collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: standard parameterself collecting
SlowestRespTime

Displays the response time of the servlet or JSP with the slowest response time during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
TotalCumulativeTime

Displays the total cumulative response time.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
TotalInvocations

Displays the total number of invocations of servlets and JSPs in the Web application during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: PjsWebAppTopNCol
PMW_SERVLET_HOST Application Class
HTTPConnectState

Displays the status of the HTTP connection (available or unavailable).

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
PMW_SERVLET_METHOD Application Class
MethodCalls

Displays the number of times during the collection interval that the servlet method was invoked.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
MethodCallsPerSec

Displays the rate at which the servlet method was invoked during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
MethodRT

Displays the elapsed time required to execute the servlet method during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
PMW_SERVLET_SUMMARY Application Class
ServletConcurrentRequests

Displays the number of requests that were processed by the servlet during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ServletErrors

Displays the number of servlet requests that encountered errors or exceptions during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletErrorsPerSec

Displays the number of servlet requests that encountered errors or exceptions per second during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletLoads

Displays the current number of loaded servlets.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletReloads

Displays the number of times that servlets were re-loaded during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ServletRequestPerSec

Displays the rate at which servlet requests were processed during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
ServletResponseTime

Displays the average elapsed time required to complete a servlet request during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ServletTotalRequests

Displays the number of requests that were processed by the servlet during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_SESSIONS Application Class
ActiveSessions

Displays the average number of sessions that were active (in use) during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
AffinityBreaks

Displays the number of requests received for sessions that were last accessed from another web application. This can indicate failover processing or a corrupt plug-in configuration.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
AffinityBreaksPerSec

Displays the number of requests received per second for sessions that were last accessed from another web application. This can indicate failover processing or a corrupt plug-in configuration.

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
CacheDiscards

Displays the number of session objects that were forced out of the cache. (An LRU algorithm removes old entries to make room for new objects.)

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
CacheDiscardsPerSec

Displays the number of session objects that were forced out of the cache per second. (An LRU algorithm removes old entries to make room for new objects.)

IBM WebSphere version supported: 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ExternalReadSize

Displays the size of session data read from persistent store. Applicable only for (serialized) persistent sessions; similar to ExternalReadTime.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ExternalReadTime

Displays the time (in milliseconds) taken to read session data from persistent storage. For multirow sessions, the metrics are for the attribute; for single row, the metrics are for the whole session. Applicable only for persistent sessions and for serialized data.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ExternalWriteSize

Displays the size of session data written to persistent store. Applicable only for (serialized) persistent sessions; similar to ExternalReadTime.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ExternalWriteTime

Displays the time (in milliseconds) taken to write session data to persistent storage. For multirow sessions, the metrics are for the attribute; for single row, the metrics are for the whole session. Applicable only for persistent sessions and for serialized data.

IBM WebSphere version supported: 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
FinalizedSessions

Displays the number of servlet sessions that were finalized during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
InvalidatedSessions

Displays the number of sessions that were invalidated during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
InvalidatedSessionsPerSec

Displays the number of sessions that were invalidated per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
InvReqNonExistent

Displays the number of requests for a session that no longer exists, presumably because the session timed out. Use this counter to help determine if the timeout is too short.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
InvReqNonExistentPerSec

Displays the number of requests per second, for a session that no longer exists, presumably because the session timed out. Use this counter to help determine if the timeout is too short.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
InvReqNonTimeout

Displays the number of requests for a session for which no CountStatistic exists, presumably because the session timed out.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
InvReqNonExistentPerSec

Displays the number of requests for a session per second, for which no CountStatistic exists, presumably because the session timed out.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
LiveSessions

Displays the average number of live client sessions during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector
MaxSessionsExceeded

Displays the number of times that a request for a new session could not be handled because it exceeded the maximum session count. Applies only to sessions in memory with AllowOverflow = false.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
MaxSessionsExceededPerSec

Displays the number of times per second that a request for a new session could not be handled because it exceeded the maximum session count. Applies only to sessions in memory with AllowOverflow = false.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
SerializableSessObjSize

Displays the size of the serializable attributes of in-memory sessions in bytes. Only count session objects that contain at least one serializable attribute object are reflected.

Note: A session may contain both serializable and non-serializable attributes.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: max

Collector: PerfCollector or PerfCollector2
SessionCreates

Displays the number of sessions that were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
SessionCreatesPerSec

Displays the rate at which clients sessions were created during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
SessionInvalidateTime

Displays the average elapsed time between session invalidation and session finalization during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
SessionLifetime

Displays the average elapsed time between session creation and session invalidation during the collection interval.

IBM WebSphere version supported: 4.x, 5.x

Collector: PerfCollector
TimeSinceLastActivated

Displays the time difference between previous and current access time stamps. Does not include session timeout.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: medium

Collector: PerfCollector or PerfCollector2
PMW_SQL Application Class
AverageResponseTime

Displays the average response time of invocations of the SQL statement during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: SQLCollector
InvocationRate

Displays the rate at which the SQL statement was invoked during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: SQLCollector
SQLCollector

Collects information about the SQL statement to populated the consumer parameters concerning this SQL statement and to populate reports that are generated about this SQL statement.

IBM WebSphere version supported: 4.x, 5.x

Collector: NA
TotalCumulativeTime

Displays the cumulative total elapsed time between invocation and completion for all invocations of this SQL statement during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: SQLCollector
TotalInvocation

Displays the total number of times this SQL statement was invoked during the collection cycle.

IBM WebSphere version supported: 4.x, 5.x

Collector: SQLCollector
PMW_THREADPOOL Application Class
ActiveThreads

Displays the number of concurrently active threads.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ThreadCreates

Displays the total number of threads created.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadCreatesPerSec

Displays the total number of threads created per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadDestroys

Displays the number of threads destroyed.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadDestroysPerSec

Displays the number of threads destroyed per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadMaxSize

Displays the maximum configured size of the thread pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadPercentMaxed

Displays the average percentage of the time that all threads were in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ThreadPoolSize

Displays the average number of threads in the pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
PMW_THREADPOOL_SUMMARY Application Class
ActiveThreads

Displays the number of concurrently active threads.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ThreadCreates

Displays the total number of threads created.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadCreatesPerSec

Displays the total number of threads created per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadDestroys

Displays the number of threads destroyed.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadDestroysPerSec

Displays the number of threads destroyed per second.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadMaxSize

Displays the maximum configured size of the thread pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: low

Collector: PerfCollector or PerfCollector2
ThreadPercentMaxed

Displays the average percentage of the time that all threads were in use.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
ThreadPoolSize

Displays the average number of threads in the pool.

IBM WebSphere version supported: 4.x, 5.x

PMI Level: high

Collector: PerfCollector or PerfCollector2
PMW_WEBSERVICE Application Class
AsynchRequests

Displays the number of asynchronous requests that were made.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AsynchRequestsPerSec

Displays the number of asynchronous requests that were made per second.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AsynchResponses

Displays the number of asynchronous responses that were made.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AsynchResponsesPerSec

Displays the number of asynchronous responses that were made per second.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AvgPayLoadSize

Displays the average payload size (in bytes) of a received request or reply.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgReplySize

Displays the average payload size of a reply.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgRequestSize

Displays the average payload size of a request.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
LoadedServices

Displays the number of loaded web services.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsDispatched

Displays the number of requests for service dispatched or delivered.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsDispatchedPerSec

Displays the number of requests for service dispatched or delivered per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsReceived

Displays the number of requests for service received.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsReceivedPerSec

Displays the number of requests for service received per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsSuccessful

Displays the number of requests for service that were successfully processed.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsSuccessfulPerSec

Displays the number of requests for service that were successfully processed per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
ResponseTimeDispatch

Displays the average response time (in milliseconds) to dispatch a request.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ResponseTimeReply

Displays the average response time (in milliseconds) to prepare a reply after dispatch.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ResponseTimeRequest

Displays the average response time (in milliseconds) to prepare a request to dispatch.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ResponseTimeSuccessful

Displays the average response time (in milliseconds) for a successful request.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
SynchRequests

Displays the number of synchronous requests that were made.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
SynchRequestsPerSec

Displays the number of synchronous requests that were made per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
SynchResponses

Displays the number of synchronous responses that were sent.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
SynchResponsesPerSec

Displays the number of synchronous responses that were sent per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_WEBSERVICE_SUMMARY Application Class
AsynchRequests

Displays the number of asynchronous requests that were made.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AsynchRequestsPerSec

Displays the number of asynchronous requests that were made per second.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AsynchResponses

Displays the number of asynchronous responses that were made.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AsynchResponsesPerSec

Displays the number of asynchronous responses that were made per second.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
AvgPayLoadSize

Displays the average payload size (in bytes) of a received request or reply.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgReplySize

Displays the average payload size of a reply.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
AvgRequestSize

Displays the average payload size of a request.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
LoadedServices

Displays the number of loaded web services.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsDispatched

Displays the number of requests for service dispatched or delivered.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsDispatchedPerSec

Displays the number of requests for service dispatched or delivered per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsReceived

Displays the number of requests for service received.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsReceivedPerSec

Displays the number of requests for service received per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsSuccessful

Displays the number of requests for service that were successfully processed.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
RequestsSuccessfulPerSec

Displays the number of requests for service that were successfully processed per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
ResponseTimeDispatch

Displays the average response time (in milliseconds) to dispatch a request.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ResponseTimeReply

Displays the average response time (in milliseconds) to prepare a reply after dispatch.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ResponseTimeRequest

Displays the average response time (in milliseconds) to prepare a request to dispatch.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
ResponseTimeSuccessful

Displays the average response time (in milliseconds) for a successful request.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
SynchRequests

Displays the number of synchronous requests that were made.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
SynchRequestsPerSec

Displays the number of synchronous requests that were made per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
SynchResponses

Displays the number of synchronous responses that were sent.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
SynchResponsesPerSec

Displays the number of synchronous responses that were sent per second.

IBM WebSphere version supported: 5.0.2 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_WEBSPHERE Application Class
AdminDBConnState

Indicates whether or not the JDBC connection is currently up (0 = down, 1 = up)

IBM WebSphere version supported: 4.x

Collector: standard parameterself collecting
AdminServerAvailability

Indicates whether or not the admin server is currently running (0 = running, 1 = stopped)

IBM WebSphere version supported: 4.x

Collector: AppServerCollector (PMW_MAIN)

Collector: AppServerCollector (PMW_WEBSPHERE)
AppServerCollector

Collects information about the application server and about the admin server

IBM WebSphere version supported: 4.x

Collector: NA
PostProcess

Handles a number of internal processes.

This parameter displays no user information and should not be modified in any way.

IBM WebSphere version supported: 4.x

Collector: NA
ServerTransportCol

Collects information about the server transport.

IBM WebSphere version supported: 5.x

Collector: NA
PMW_WLM Application Class
WLMClientClustUpd

Displays the number of times initial or updated server cluster data is sent to a WLM enabled client from server cluster member. Use this metric to determine how often cluster information is being propagated.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientClustUpdPerSec

Displays the number of times per second initial or updated server cluster data is sent to a WLM enabled client from server cluster member. Use this metric to determine how often cluster information is being propagated.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientRespTime

Displays the response time (in milliseconds) of IIOP requests being setnt from a client. The response time is calculated based on the time the request is sent from the client to the time the reply is received from the server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientsServiced

Displays the number of WLM enabled clients that have been serviced by this application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientsServicedPerSec

Displays the number of WLM enabled clients that have been serviced per second by this application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMCurrentRequests

Displays the number of IIOP requests being processed by this server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMMinReq

Displays the total number of incoming IIOP requests to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMMinReqPerSec

Displays the number of incoming IIOP requests per second to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonWLMRequests

Displays the number of incoming IIOP requests to an application server that came from a client that does not have the WLM runtime present or where the object reference on the client was flagged not to participate in workload management.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonWLMRequestsPerSec

Displays the number of incoming IIOP requests per second to an application server that came from a client that does not have the WLM runtime present or where the object reference on the client was flagged not to participate in workload management.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonAffinReq

Displays the number of incoming IIOP requests to an application server based on no affinity. This request was sent to this server based on workload management selection policies that were decided in the Workload Management (WLM) runtime of the client.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonAffinReqPerSec

Displays the number of incoming IIOP requests per second to an application server based on no affinity. This request was sent to this server based on workload management selection policies that were decided in the Workload Management (WLM) runtime of the client.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMOutReq

Displays the total number of outgoing IIOP requests being sent from a client to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMOutReqPerSec

Displays the total number of outgoing IIOP requests per second, being sent from a client to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMServClustUpdate

Displays the number of times initial or updated server cluster data is sent to a server member from the deployment manager. This metric determines how often cluster information is being prpogated.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMServClustUpdatePerSec

Displays the number of times per second, initial or updated server cluster data is sent to a server member from the deployment manager.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMServRespTime

Displays the response time of IIOP requests being serviced by the server. (Based on time request received to time reply sent out.)

IBM WebSphere version supported: 5.0 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
WLMStrongAffinReq

Displays the number of incoming requests based on strong affinity. A request with strong affinity is one that must be serviced by this server because of a dependency that resides on the server, and because this request could not be serviced by another server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMStrongAffinReqPerSec

Displays the number of incoming requests per second based on strong affinity. A request with strong affinity is one that must be serviced by this server because of a dependency that resides on the server, and because this request could not be serviced by another server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
PMW_WLM_SUMMARY Application Class
WLMClientClustUpd

Displays the number of times initial or updated server cluster data is sent to a WLM enabled client from server cluster member. Use this metric to determine how often cluster information is being propagated.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientClustUpdPerSec

Displays the number of times per second initial or updated server cluster data is sent to a WLM enabled client from server cluster member. Use this metric to determine how often cluster information is being propagated.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientRespTime

Displays the response time (in milliseconds) of IIOP requests being setnt from a client. The response time is calculated based on the time the request is sent from the client to the time the reply is received from the server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientsServiced

Displays the number of WLM enabled clients that have been serviced by this application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMClientsServicedPerSec

Displays the number of WLM enabled clients that have been serviced per second by this application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMCurrentRequests

Displays the number of IIOP requests being processed by this server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMMinReq

Displays the total number of incoming IIOP requests to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMMinReqPerSec

Displays the number of incoming IIOP requests per second to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonWLMRequests

Displays the number of incoming IIOP requests to an application server that came from a client that does not have the WLM runtime present or where the object reference on the client was flagged not to participate in workload management.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonWLMRequestsPerSec

Displays the number of incoming IIOP requests per second to an application server that came from a client that does not have the WLM runtime present or where the object reference on the client was flagged not to participate in workload management.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonAffinReq

Displays the number of incoming IIOP requests to an application server based on no affinity. This request was sent to this server based on workload management selection policies that were decided in the Workload Management (WLM) runtime of the client.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMNonAffinReqPerSec

Displays the number of incoming IIOP requests per second to an application server based on no affinity. This request was sent to this server based on workload management selection policies that were decided in the Workload Management (WLM) runtime of the client.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMOutReq

Displays the total number of outgoing IIOP requests being sent from a client to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMOutReqPerSec

Displays the total number of outgoing IIOP requests per second, being sent from a client to an application server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMServClustUpdate

Displays the number of times initial or updated server cluster data is sent to a server member from the deployment manager. This metric determines how often cluster information is being prpogated.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMServClustUpdatePerSec

Displays the number of times per second, initial or updated server cluster data is sent to a server member from the deployment manager.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMServRespTime

Displays the response time of IIOP requests being serviced by the server. (Based on time request received to time reply sent out.)

IBM WebSphere version supported: 5.0 and above

PMI Level: medium

Collector: PerfCollector or PerfCollector2
WLMStrongAffinReq

Displays the number of incoming requests based on strong affinity. A request with strong affinity is one that must be serviced by this server because of a dependency that resides on the server, and because this request could not be serviced by another server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
WLMStrongAffinReqPerSec

Displays the number of incoming requests per second based on strong affinity. A request with strong affinity is one that must be serviced by this server because of a dependency that resides on the server, and because this request could not be serviced by another server.

IBM WebSphere version supported: 5.0 and above

PMI Level: low

Collector: PerfCollector or PerfCollector2
JMX_CONDITION Application Class
AnnotatedStatus

Tracks the status of a condition. The numeric value indicates the status of the condition. When the status changes or actions are taken, the graph is annotated. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
BooleanFalseCount

Displays the number of monitored MBeans for which the current value of the attribute is false. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
BooleanTrueCount

Displays the number of monitored MBeans for which the current value of the attribute is true. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
MBeanCount

Displays the number of MBeans being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
StatusCriticalCount

Displays the number of monitored MBeans for which the current status is alarm, as defined by notifications or attribute values. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
StatusOKCount

Displays the number of monitored MBeans for which the current status is OK, as defined by notifications or attribute values. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
StatusWarningCount

Displays the number of monitored MBeans for which the current status is warning, as defined by notifications or attribute values. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
StringMatchCount

Displays the number of monitored MBeans for which the current value of the string matches the specified value. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
StringNoMatchCount

Displays the number of monitored MBeans for which the current value of the string does not match the specified value. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
ValueAverage

Displays the average attribute value across all MBeans being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
ValueMaximum

Displays the highest value in any MBean being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
ValueMinimum

Displays the lowest value in any MBean being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
ValueSum

Displays the total value of all MBeans being monitored by this condition. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
JMX_DOMAIN Application Class
MBeanCount

Displays the number of MBeans registered in the MBean domain. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
JMX_MAIN Application Class
SetupRequired

Indicates that setup is required for the KM. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
JMX_SERVER Application Class
Availability

Displays the availability of the registered server (up or down). This parameter triggers an alarm if the server is down or if the JMX client is unable to connect to the server. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery
MBeanCount

Displays the number of MBeans registered in the MBean server. JMX Discovery runs a thread that updates parameter values on a flexible schedule, as needed.

IBM WebSphere version supported: 5.x

Collector: JMX Discovery

















PATROL for WebSphere MQ 4.2.00


Table 42 PATROL for WebSphere MQ 4.2.00
Parameter



AMQ_Bench Application Class
MTMServerList

Displays a list of message transit monitor (MTM) Servers.

Collector: AMQ_Bench discovery
AMQ_Channel_RCVR Application Class
Bytes

Indicates bytes sent and received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector when channel event occurs
ChEventsOutstanding

Indicates events currently outstanding on channel. Warning and alarm status is determined by channel rules.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountActive

Indicates number of channel instances active.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountRetrying

Indicates number of channel instances retrying.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStarting

Indicates number of channel instances starting.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStopped

Indicates number of channel instances stopped.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
EvChAutoDefError

Displays the details for outstanding events of type channel auto-definition error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChConversionError

Displays the details for outstanding events of type channel conversion error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated

Displays the details for outstanding events of type channel not activated. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError

No desc

Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError

No desc

Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError

No desc

Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError

No desc

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
Messages

Displays the number of messages received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
AMQ_Channel_RQSTR Application Class
Bytes

Indicates bytes sent and received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector
ChEventsOutstanding

Indicates events currently outstanding on channel. Warning and alarm status is determined by channel rules.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountActive

Indicates number of channel instances active.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountRetrying

Indicates number of channel instances retrying.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStarting

Indicates number of channel instances starting.

Collector: Value set by AMQ_Channel discovery (all channels); AMQ_EventCollector when channel event occurs (one channel); Refresh Parameters menu command (one channel when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStopped

Indicates number of channel instances stopped.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
EvChAutoDefError

Displays the details for outstanding events of type channel auto-definition error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChConversionError

Displays the details for outstanding events of type channel conversion error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated

Displays the details for outstanding events of type channel not activated. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError



Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
Messages

Displays the number of messages received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
AMQ_Channel_SDR Application Class
Bytes

Indicates bytes sent and received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector
ChEventsOutstanding

Indicates events currently outstanding on channel. Warning and alarm status is determined by channel rules.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChRestart

Displays the information about attempts to restart a channel as specified in channel rules. Goes into alarm status if the start channel command fails.

Collector: Channel Restart Recovery processing as defined in channel rules
EvChAutoDefError

Displays the details for outstanding events of type channel auto-definition error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChConversionError

Displays the details for outstanding events of type channel conversion error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated

Displays the details for outstanding events of type channel not activated. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError



Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
InDoubtStatus

Displays the in doubt status

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
Messages

Displays the number of messages sent since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ShortRetriesLeft

Displays the number of short retries remaining; activated if channel is in retry status.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
Status

Displays the current status of a channel.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)





XMTQCapacity

Displays the transmission queue depth as a percentage of the maximum depth. A high percentage could indicate a channel performance problem.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQDepth

Displays the transmission queue depth in messages. Goes into warning status if less than 0 and channel is stopped, retrying, or inactive.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQGetStatus

Displays whether the GET attribute is enabled or disabled. For messages to be transmitted properly, enable this attribute.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQPutStatus

Displays whether the PUT attribute is enabled or disabled. For messages to be transmitted properly, enable this attribute.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQTriggerStatus

Displays whether the TRIGGER attribute is enabled or disabled.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
AMQ_Channel_SVR Application Class
Bytes

Indicates bytes sent and received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector
ChEventsOutstanding

Indicates events currently outstanding on channel. Warning and alarm status is determined by channel rules.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChRestart

Displays the information about attempts to restart a channel as specified in channel rules. Goes into alarm status if the start channel command fails.

Collector: Channel Restart Recovery processing as defined in channel rules
EvChAutoDefError

Displays the details for outstanding events of type channel auto-definition error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChConversionError

Displays the details for outstanding events of type channel conversion error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated

Displays the details for outstanding events of type channel not activated. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError



Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
InDoubtStatus

Displays the in doubt status

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
Messages

Displays the number of messages sent since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ShortRetriesLeft

Displays the number of short retries remaining; activated if channel is in retry status.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
Status

Displays the current status of a channel.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)





XMTQCapacity

Displays the transmission queue depth as a percentage of the maximum depth. A high percentage could indicate a channel performance problem.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQDepth

Displays the transmission queue depth in messages. Goes into warning status if less than 0 and channel is stopped, retrying, or inactive.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQGetStatus

Displays whether the GET attribute is enabled or disabled. For messages to be transmitted properly, enable this attribute.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQPutStatus

Displays whether the PUT attribute is enabled or disabled. For messages to be transmitted properly, enable this attribute.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
XMTQTriggerStatus

Displays whether the TRIGGER attribute is enabled or disabled.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
AMQ_Channel_SVRCONN Application Class
Bytes

Indicates bytes sent and received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector when channel event occurs
ChEventsOutstanding

Indicates events currently outstanding on channel. Warning and alarm status is determined by channel rules.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountActive



Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountRetrying



Collector: AMQ_Channel discovery (all channels); AMQ_EventCollector when channel event occurs (one channel); Refresh Parameters menu command (one channel)
CountStarting



Collector: AMQ_Channel discovery (all channels); AMQ_EventCollector when channel event occurs (one channel); Refresh Parameters menu command (one channel)
CountStopped



Collector: AMQ_Channel discovery (all channels); AMQ_EventCollector when channel event occurs (one channel); Refresh Parameters menu command (one channel)
EvChAutoDefError



Collector: AMQ_EventCollector when channel event occurs
EvChConversionError



Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated



Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError



Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
Messages

Displays the number of messages sent since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
AMQ_Clustering Application Class
Availability

Displays the availability of clustering on OS/390 platforms only.

Collector: AMQ_Clustering discovery
AMQ_Connect_CLUSRCVR Application Class
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector
ChEventsOutstanding

Indicates events currently outstanding on channel. Warning and alarm status is determined by channel rules.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountActive

Indicates number of channel instances active.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountRetrying

Indicates number of channel instances retrying.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStarting

Indicates number of channel instances starting.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStopped

Indicates number of channel instances stopped.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
EvChAutoDefError

Displays the details for outstanding events of type channel auto-definition error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChConversionError

Displays the details for outstanding events of type channel conversion error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated

Displays the details for outstanding events of type channel not activated. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError



Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
AMQ_Connect_CLUSSDR Application Class
Bytes

Indicates bytes sent and received since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChEventLatest

Displays the details of latest channel events, if event presentation rules specify static parameter style. Warning and alarm status is determined by channel rules.

Collector: AMQ_EventCollector when channel event occurs
ChEventsOutstanding

Indicates events currently outstanding on channel.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ChRestart

Displays the information about attempts to restart a channel as specified in channel rules. Goes into alarm status if the start channel command fails.

Collector: Channel Restart Recovery processing as defined in channel rules
CountActive

Indicates number of channel instances active.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountRetrying

Indicates number of channel instances retrying.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStarting

Indicates number of channel instances starting.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
CountStopped

Indicates number of channel instances stopped.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollectorwhen channel event occurs (one channel), Refresh Parameters menu command (one channel)
EvChAutoDefError

Displays the details for outstanding events of type channel auto-definition error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChConversionError

Displays the details for outstanding events of type channel conversion error. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChNotActivated

Displays the details for outstanding events of type channel not activated. Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChSSLCipherSpecError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLClientAuthError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLHandshakeError



Collector: AMQ_EventCollector when channel event occurs
EvChSSLPeerNameError



Collector: AMQ_EventCollector when channel event occurs
EvChStoppedDisabled

Displays the details for outstanding events of type channel stopped (disabled). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedError

Displays the details for outstanding events of type channel stopped (error). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedOK

Displays the details for outstanding events of type channel stopped (OK). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
EvChStoppedRetry

Displays the details for outstanding events of type channel stopped (retrying). Warning and alarm status is determined by channel rules and display only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when channel event occurs
InDoubtStatus

Displays the in doubt status

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
Messages

Displays the number of messages sent since activation.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
ShortRetriesLeft

Displays the number of short retries remaining; activated if channel is in retry status.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)
Status

Displays the current status of a channel.

Collector: AMQ_Channel discovery (all channels), AMQ_EventCollector when channel event occurs (one channel), Refresh Parameters menu command (one channel)





AMQ_Hosts Application Class
AccessStatus

Indicates the availability of the defined host. The warning and alarm status is determined by queue manager rules. If the rules, accessed from the MQ_Series command menu, specify any queue managers on this host that should be placed in warning status when offline, this parameter will be placed in warning status if the host is not available.

Collector: AMQ_QManagers discovery
amq_bCollect

Supplies data for the Benchmark parameters.
AMQ_EventCollector

Supplies event data to consumer parameters (OS/390).
amq_qCollectDead

Supplies dead letter queue data to consumer parameters.
QMM_ResetLog

Supplies the reset log for message management functions.
AMQ_MTM_Client Application Class
AverageTranRate

Indicates the average transit rate for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
AverageTranTime

Indicates the average transit time for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
FastestTranRate

Indicates the fastest transit rate for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
FastestTranTime

Indicates the fastest transit time for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
SlowestTranRate

Indicates the slowest transit rate for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
SlowestTranTime

Indicates the slowest transit time for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
Status

Indicates the schedule status for the message transit monitor (MTM) client.

Collector: AMQ_MTM_CLIENT discovery
AMQ_MTM_Server Application Class
Status

Indicates the schedule status for the message transit monitor (MTM) server.

Collector: AMQ_MTM_Server discovery
AMQ_Namelists Application Class
NameList

Displays a list of namelists defined on the queue manager and the time at which the list was built.
AMQ_PageSets Application Class
PSExtents

Displays the number of extents currently allocated to the OS/390 pageset.

Collector: amq_psCollect
PSExtentsAdded

Displays the number of extents added to the OS/390 pageset since queue manager restart.

Collector: amq_psCollect
PSPagesAllocated

Displays the number of pages (corresponding to 4 kilobyte VSAM records) allocated to an OS/390 pageset.

Collector: amq_psCollect
PSPagesNonPersistent

Displays the number of pages (corresponding to 4 kilobyte VSAM records) that are in use to hold nonpersistent messages.

Collector: amq_psCollect
PSPagesPersistent

Displays the number of pages (corresponding to 4 kilobyte VSAM records) that are in use to hold persistent messages.

Collector: amq_psCollect
PSPagesUsed

Displays the number of pages (corresponding to 4 kilobyte VSAM records) allocated to an OS/390 pageset that are in use.

Collector: amq_psCollect
PSPercentUsed

Displays the percentage of allocated pages (corresponding to 4 kilobyte VSAM records) that are in use.

Collector: amq_psCollect
AMQ_Processes Application Class
ProcessList

Lists the processes defined on the queue manager and the time at which the list was built.
AMQ_QALIAS Application Class
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: Set when Channel Conversion Error occurs for transmission queues.
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetCount

Displays the number of messages removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetStatus

Displays queue GET status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutCount

Displays the number of messages added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_QDEAD Application Class
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: Set when Channel Conversion Error occurs for transmission queues
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXMsgAgeAlarm

Indicates the age of the first available message on the queue exceeds the alarm threshold in the extended events rule for Age of First Message on Queue.

Collector: amq_xCollect
EvXMsgAgeWarn

Indicates the age of the first available message on the queue exceeds the warn threshold in the extended events rule for Age of First Message on Queue.

Collector: amq_xCollect
EvXPutAgeAlarm

Indicates that the time elapsed since the last successful MQPUT to that queue or the time elapsed since performance statistics were reset for the queue exceeds the alarm threshold in the extended event rule for Time Since Last Successful MQPUT.

Collector: amq_xCollect
EvXPutAgeWarn

Indicates that the time elapsed since the last successful MQPUT to that queue or the time elapsed since performance statistics were reset for the queue exceeds the warning threshold in the extended event rule for Time Since Last Successful MQPUT.

Collector: amq_xCollect
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QDefined

Defines the dead letter queue.
QDepth

Displays the number of messages on the queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetBytes

Displays the number of bytes removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetCount

Displays the number of messages removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetStatus

Displays queue GET status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QMax

Displays the maximum number of messages allowed on a queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QOpenInputHandles

Displays the number of the handles indicating queue open for input.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QOpenOutputHandles

Displays the number of the handles indicating queue open for output.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPercentFull

Displays how full the queue is.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutBytes

Displays the number of bytes added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutCount

Displays the number of messages added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QStats

Displays the highest depth that a queue achieved in the previous hour.

Collector: AMQ_Queues discovery, updated on first discovery each hour
QTriggerStatus

Displays the queue TRIGGER status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_QLOCAL
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: Set when Channel Coversion Error occurs for transmission queues
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXMsgAgeAlarm

Indicates the age of the first available message on the queue exceeds the alarm threshold in the extended events rule for Age of First Message on Queue.

Collector: amq_xCollect
EvXMsgAgeWarn

Indicates the age of the first available message on the queue exceeds the warn threshold in the extended events rule for Age of First Message on Queue.

Collector: amq_xCollect
EvXPutAgeAlarm

Indicates that the time elapsed since the last successful MQPUT to that queue or the time elapsed since performance statistics were reset for the queue exceeds the alarm threshold in the extended event rule for Time Since Last Successful MQPUT.

Collector: amq_xCollect
EvXPutAgeWarn

Indicates that the time elapsed since the last successful MQPUT to that queue or the time elapsed since performance statistics were reset for the queue exceeds the warning threshold in the extended event rule for Time Since Last Successful MQPUT.

Collector: amq_xCollect
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QDepth

Displays the number of messages on the queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetBytes

Displays the number of bytes removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetCount

Displays the number of messages removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetStatus

Displays queue GET status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QMax

Displays the maximum number of messages allowed on a queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QOpenInputHandles

Displays the number of the handles indicating queue open for input.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QOpenOutputHandles

Displays the number of the handles indicating queue open for output.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPercentFull

Displays how full the queue is.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutBytes

Displays the number of bytes added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutCount

Displays the number of messages added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QStats

Displays the highest depth that a queue achieved in the previous hour.

Collector: AMQ_Queues discovery, updated on first discovery each hour
QTriggerStatus

Displays whether the TRIGGER attribute is enabled or disabled.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_QManagers Application Class
AMQ_DQM_Collect

Supplies distributed queue manager data to consumer parameters.
amq_psCollect

Supplies pageset data to consumer parameters (OS/390).
Availability

Displays the status of the queue manager. The warning or alarm status is controlled by queue manager rules.

Collector: AMQ_QManagers discovery
Benchmark

Measures the responsiveness of the queue manager.

Collector: amq_bCollect
Channel_Initiator_Status

Displays the status of the channel initiator.

Collector: AMQ_DQM_Collect
Channel_Listener_LU62

Displays the status of the LU62 listener (OS/390).

Collector: AMQ_DQM_Collect
Channel_Listener_NETB

Displays the status of the channel listener for NETBIOS protocol.

Collector: AMQ_DQM_Collect
Channel_Listener_SPX

Displays the status of the channel listener for SPX protocol.

Collector: AMQ_DQM_Collect
Channel_Listener_TCP

Displays the status of the channel listener for TCP protocol.

Collector: AMQ_DQM_Collect
Channel_Listener_UPD

Displays the status of the channel listener for UPD protocol.

Collector: AMQ_DQM_Collect
qmm_qCollect

Enforces local queue processing rules.
AMQ_QMODEL Application Class
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetStatus

Displays queue GET status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QTriggerStatus

Displays the queue TRIGGER status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_QREMOTE Application Class
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutCount

Displays the number of messages added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_Queues Application Class
FmcAdminStatus

Displays the status of the Workflow Administration server.

Collector: AMQ_Queues discovery
FmcCleanStatus

Displays the status of the Workflow Cleanup server.

Collector: AMQ_Queues discovery
FmcExecStatus

Displays the number of Workflow Execution servers.

Collector: AMQ_Queues discovery
FmcSchedStatus

Displays the status of the Workflow Scheduling server.

Collector: AMQ_Queues discovery
FmcTriggerStatus

Displays the status of the Workflow Trigger monitor.

Collector: AMQ_Queues discovery
AMQ_QUNKNOWN Application Class
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_QXMIT Application Class
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXMsgAgeAlarm

Indicates the age of the first available message on the queue exceeds the alarm threshold in the extended events rule for Age of First Message on Queue.

Collector: amq_xCollect
EvXMsgAgeWarn

Indicates the age of the first available message on the queue exceeds the warn threshold in the extended events rule for Age of First Message on Queue.

Collector: amq_xCollect
EvXPutAgeAlarm

Indicates that the time elapsed since the last successful MQPUT to that queue or the time elapsed since performance statistics were reset for the queue exceeds the alarm threshold in the extended event rule for Time Since Last Successful MQPUT.

Collector: amq_xCollect
EvXPutAgeWarn

Indicates that the time elapsed since the last successful MQPUT to that queue or the time elapsed since performance statistics were reset for the queue exceeds the warning threshold in the extended event rule for Time Since Last Successful MQPUT.

Collector: amq_xCollect
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QDepth

Displays the number of messages on the queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetBytes

Displays the number of bytes removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetCount

Displays the number of messages removed from the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetStatus

Displays queue GET status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QMax

Displays the maximum number of messages allowed on a queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QOpenInputHandles

Displays the number of the handles indicating queue open for input.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QOpenOutputHandles

Displays the number of the handles indicating queue open for output.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPercentFull

Displays how full the queue is.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutBytes

Displays the number of bytes added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutCount

Displays the number of messages added to the queue due to MQGET per sample interval.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QStats

Displays the highest depth that a queue achieved in the previous hour.

Collector: AMQ_Queues discovery, updated on first discovery each hour
QTriggerStatus

Displays the queue TRIGGER status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
AMQ_Series Application Class
AgentIdentityDiagnostic

Provides agent identity information as needed.
amq_sCollect

Provides internal services to PATROL for WebSphere MQ.
amq_xCollect

Collects and reports the extended events conditions.
DeploymentReport

Displays the Deployment Report; only displays if there is a problem in the environment after the deployment of WebSphere MQ.

Collector: AMQ_Series
AMQ_SysClusQ Application Class
EvAlQTypeErr

Displays events of type alias base queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvAlUnknown

Displays events of type unknown alias base queue.

Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvChConvert

Displays events of type channel conversion error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQTypeErr

Displays events of type default transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvDfltXQUsageErr

Displays events of type default transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvGetInhibited

Displays events of type get inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth2

Displays events of type not authorized (type 2). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvNotAuth3

Displays events of type not authorized (type 3). Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvPutInhibited

Displays events of put inhibited. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQDepthHi

Displays events of type queue depth high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQFull

Displays events of type queue full. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQIntervalHi

Displays events of type queue service interval high. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvQTypeErr

Displays events of queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvRemoteQNameErr

Displays events of type remote queue name error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownDfltXQ

Displays events of type unknown default transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownObj

Displays events of type unknown object name. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownRemQMgr

Displays events of type unknown queue manager. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvUnknownXQ

Displays events of type unknown transmission queue. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQTypeErr

Displays events of type transmission queue type error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
EvXQUsageErr

Displays events of type transmission queue usage error. Warning and alarm status is determined by queue rules and displays only if event presentation rules specify dynamic parameter style.

Collector: AMQ_EventCollector when queue events occur (one queue)
QDepth

Displays the number of messages on the queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventLatest

Displays the details of the latest queue event, if event presentation rules specify static parameter style.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QEventsOutstanding

Displays events currently outstanding on queue. It is incremented each time an event occurs involving the queue, unless the queue rule for that event is to ignore the event. It is decremented for each event that is reset manually or determined automatically to be no longer outstanding.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QGetStatus

Displays queue GET status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QMax

Displays the maximum number of messages allowed on a queue.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPercentFull

Displays how full the queue is.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QPutStatus

Displays queue PUT status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
QTriggerStatus

Displays the queue TRIGGER status.

Collector: AMQ_Queues discovery (all queues); AMQ_EventCollector when queue events occur (one queue); Refresh Parameters menu command (one queue)
MLP_Logs Application Class
EvAMQ6708

Displays events of type disk full.

Collector: MLP_Logs discovery
EvAMQ6709

Displays events of type log for queue manager full.

Collector: MLP_Logs discovery
EvAMQ6710

Displays events of type queue manager unable to access log directory.

Collector: MLP_Logs discovery
EvAMQ6767

Displays events of type log file could not be opened.

Collector: MLP_Logs discovery
EvAMQ7017

Displays events of type log not available for queue manager.

Collector: MLP_Logs discovery
EvAMQ7042

Displays events of type media image not available.

Collector: MLP_Logs discovery
EvAMQ7044

Displays events of type media recovery not allowed.

Collector: MLP_Logs discovery
EvAMQ7083

Displays events of type command failed due to resource problem.

Collector: MLP_Logs discovery
EvAMQ7463

Displays events of type log is full for queue manager.

Collector: MLP_Logs discovery
EvAMQ7464

Displays events of type log file no longer full for queue manager.

Collector: MLP_Logs discovery
EvAMQ7465

Displays events of type log file is full due to running transaction for queue manager.

Collector: MLP_Logs discovery
EvAMQ7466

Displays event of type log file too small for current data rate for queue manager

Collector: MLP_Logs discovery
EvAMQ7469

Displays events of type transactions rolled back to release log space on queue manager

Collector: MLP_Logs discovery
EvAMQ7472

Displays events of type object damaged on queue manager.

Collector: MLP_Logs discovery
EvAMQ8144

Displays events of type log resource not available for queue manager.

Collector: MLP_Logs discovery
EvMLP2084

Displays events of type disk free space low.

Collector: MLP_Logs discovery
EvMLP2085

Displays events of type no space for secondary logs.

Collector: MLP_Logs discovery
Log_List

Lists the number of active or inactive logs for a queue manager.

Collector: MLP_Logs discovery
Media_Recovery_Log

Lists the oldest log required for media recovery.

Collector: MLP_Logs discovery
Number_Logs

Indicates the number of logs.

Collector: MLP_Logs discovery
Number_UnNeeded_Logs

Indicates the number unneeded logs.

Collector: MLP_Logs discovery
Process_logs

Executes the rule set to process timed parameters.

Collector: NA
Record_MQ_Image

Records object definitions for a queue manager.

Collector: MLP_Logs discovery
Restart_Log

Lists the oldest log required to restart the queue manager.

Collector: MLP_Logs discovery
Unneeded_Log_List

Lists the logs no longer needed.

Collector: MLP_Logs discovery
MLP_Logs_Circ Application Class
EvAMQ6708

Displays events of type disk full.

Collector: MLP_Logs discovery
EvAMQ6709

Displays events of type log for queue manager full.

Collector: MLP_Logs discovery
EvAMQ6710

Displays events of type queue manager unable to access log directory.

Collector: MLP_Logs discovery
EvAMQ6767

Displays events of type log file could not be opened.

Collector: MLP_Logs discovery
EvAMQ7017

Displays events of type log not available for queue manager.

Collector: MLP_Logs discovery
EvAMQ7042

Displays events of type media image not available.

Collector: MLP_Logs discovery
EvAMQ7044

Displays events of type media recovery not allowed.

Collector: MLP_Logs discovery
EvAMQ7463

Displays events of type log is full for queue manager.

Collector: MLP_Logs discovery
EvAMQ7464

Displays events of type log file no longer full for queue manager.

Collector: MLP_Logs discovery
EvAMQ7465

Displays events of type log file is full due to running transaction for queue manager.

Collector: MLP_Logs discovery
EvAMQ7466

Displays event of type log file too small for current data rate for queue manager

Collector: MLP_Logs discovery
EvAMQ7469

Displays events of type transactions rolled back to release log space on queue manager

Collector: MLP_Logs discovery
EvAMQ7472

Displays events of type object damaged on queue manager.

Collector: MLP_Logs discovery
EvAMQ8144

Displays events of type log resource not available for queue manager.

Collector: MLP_Logs discovery
EvMLP2084

Displays events of type disk free space low.

Collector: MLP_Logs discovery
EvMLP2085

Displays events of type no space for secondary logs.

Collector: MLP_Logs discovery
Log_List

Lists the number of active or inactive logs for a queue manager.

Collector: MLP_Logs discovery
MMA_Pool Application Class
MMA_ClientManagement

Monitors and ensures performance of Middleware Management Architecture (MMA) clients.


Table 43 PATROL for WebSphere MQ EC 4.2.00
Parameter



WMS_Channel Application Class
Batches

Displays the number of completed batches.

Collector: WMS_Channel discovery
BuffersReceived

Displays the number of buffers received.

Collector: WMS_Channel discovery
BuffersSent

Displays the number of buffers sent.

Collector: WMS_Channel discovery
BytesReceived

Reports the number of bytes received since activation.

Collector: WMS_Channel discovery
BuffersSent

Displays the number of bytes sent since activation

Collector: WMS_Channel discovery
ChannelStatusText

Provides a summary of channel status.

Collector: WMS_Channel discovery
CurrentMsgs

Displays the number of messages currently on the channel.

Collector: WMS_Channel discovery
InDoubtStatus

Indicates the indoubt status.

Collector: WMS_Channel discovery
Msgs

Indicates the number of messages sent or received.

Collector: WMS_Channel discovery
ShortRetriesLeft

Displays the number of short retires remaining. Activated if the channels is in retry status.

Collector: WMS_Channel discovery
Status

Displays the channel status.

Collector: WMS_Channel discovery




WMS_Channel_Aggregate Application Class
CountActive

Displays the number of active connections.

Collector: WMS_Channel discovery
CountRetrying

Displays the number of retrying connections.

Collector: WMS_Channel discovery
CountStarting

Displays the number of starting connections.

Collector: WMS_Channel discovery
CountStopped

Displays the number of stopped connections.

Collector: WMS_Channel discovery
TotalBatches

Displays the number of completed batches.

Collector: WMS_Channel discovery
TotalBuffersReceived

Displays the total number of buffers received.

Collector: WMS_Channel discovery
TotalBuffersSent

Displays the number of buffers sent.

Collector: WMS_Channel discovery
TotalBytesReceived

Displays the number of bytes received.

Collector: WMS_Channel discovery
TotalBytesSent

Displays the number of bytes sent.

Collector: WMS_Channel discovery
TotalMsgs

Indicates the total number of messages sent or received.

Collector: WMS_Channel discovery
WMS_Event Application Class
EventText

Provides an event summary, including information such as the type of event and the queue manager, queue, or channel name associated with the event.

Collector: WMS_Channel discovery
Occurences

Displays a count of the number of events that have occurred since the console connection started.

Collector: WMS_Channel discovery
WMS_Proxy Application Class
QMgrDiscoveryStatus

Provides a summary of the status of queue manager discovery.

Collector: WMS_Proxy discovery
WMS_QMgr Application Class
Availability

Shows the status of remote queue managers.

Collector: WMS_QMgr discovery
Ch_Collector

Collector parameter for channel applications.

Collector: Ch_Collector
Ch_RetryingCount

Displays the number of channels that are retrying.

Collector: Ch_Collector
Ch_RunningCount

Displays the number of channels that are running.

Collector: Ch_Collector
Ch_StoppedCount

Displays the number of chanels that are stopped.

Collector: Ch_Collector
ChTotalCount

Displays the number of channels.

Collector: Ch_Collector
DLQMessageCount

Displays the number of messages on the dead letter queue.

Collector: WMS_QMgr discovery
NumberOfChannelEvents

Provides a real-time counter of channel events.

Collector: Occurrence of a channel event and resetting/removal of a channel event
NumberOfOtherEvents

Provides a real-time counter of WebSphere MQ events other than queue and channel events.

Collector: Occurrence of a channel event and resetting/removal of a channel event
NumberOfQueueEvents

Provides a real-time counter of queue events.

Collector: Occurrence of a channel event and resetting/removal of a channel event
Q_ClusterCount

Displays the number of cluster queues.

Collector: Q_Collector
Q_ClusterCountAtHighDepth

Displays the number of cluster queues ar hight depth.

Collector: Q_Collector
Q_ClusterCountAtMaxDepth

Displays the number of cluster queues at maximum depth.

Collector: Q_Collector
Q_ClusterMags

Displays the number of messages on cluster queues.

Collector: Q_Collector
Q_Collector

Collector parameter for queue applications.
Q_LocalCount

Displays the number of local queues.

Collector: Q_Collector
Q_LocalCountAtHighDepth

Displays the number of local queues at high depth.

Collector: Q_Collector
Q_LocalCountAtMaxDepth

Displays the number of lcoal queues at maximum depth.

Collector: Q_Collector
Q_LocalMsgs

Displays the number of messages on local queues.

Collector: Q_Collector
Q_XmitCount

Displays the number of transmission queues.

Collector: Q_Collector
Q_XmitCountAtHighDepth

Displays the number of transmission queues at high depth.

Collector: Q_Collector
Q_XmitCountAtMaxDepth

Displays the number of trasmissions queues at maximum depth.

Collector: Q_Collector
Q_XmitMsgs

Displays the number of messages on transmission queues.

Collector: Q_Collector
WMS_Queue Application Class
QDefined

Shows whether or not dead letter queues are defined.

Collector: WMS_QMgr discovery
Q_Depth

Shows the current queue depth.

Collector: WMS_Queue discovery
Q_GetStatus

Displays the queue GET status.

Collector: WMS_Queue discovery
QPercentFull

Reports the percentage of the queue that is full.

Collector: WMS_Queue discovery
QPutStatus

Displays the queue PUT status.

Collector: WMS_Queue discovery
QTriggerStatus

Displays the queue trigger status.

Collector: WMS_Queue discovery





























